<html><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1251"><meta http-equiv="Content-Language" content="ru"><title>Основные функции и принципы пост</title><link rel="stylesheet" type="text/css" href="../main.css"><style>
<!--
 p.MsoNormal
	{mso-style-parent:"";
	margin:5.0pt 0cm; text-autospace:none;
	font-size:12.0pt;
	font-family:"Times New Roman";
	}
p.MsoBodyText2
	{margin-bottom:.0001pt;
	text-align:center;
	text-autospace:none;
	font-size:10.0pt;
	font-family:"Times New Roman";
	margin-left:0cm; margin-right:0cm; margin-top:0cm}
-->
</style>
</head><body><hr width="745" align="left"><table border="0" width="745" id="table3"><tr><td>
      <h2 align="center"><span style="font-size: 18.0pt">Основные функции и принципы 
        построения интерфейсов</span></h2>
    </td></tr></table><hr align="left" width="745"><table border="0" width="745" id="table2"><tr><td>
      <p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Интерфейсы, используемые в вычислительных 
        системах, очень разнообразны, но их функции и основы построения являются 
        достаточно общими, поэтому целесообразно остановиться&nbsp; на них, что 
        облегчит в дальнейшем изучение конкретных, стандартных интерфейсов, как 
        внутренних, так и внешних.</p>
      <p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Для большей конкретности рассматривать все вопросы будем на примере параллельных магистральных интерфейсов, но такой подход не исключает общность рассмотрения, т.к. он в значительной степени может быть распространен и на радиальные последовательные интерфейсы, особенности которых будут по необходимости специально оговариваться.</p>
      <p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Главная задача интерфейса заключается в организации 
        надежной передачи информации от источника к приемнику в заданный момент 
        времени. К одному интерфейсу с помощью специальных средств физически подключается 
        множество взаимодействующих между собой устройств.&nbsp; В каждый момент 
        времени передача информации идет только между двумя устройствами от источника 
        к приемнику информации (иногда возможна передача от одного источника к 
        нескольким приемникам).</p>
      <p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Такая передача возможна, если между этими двумя устройствами в данный момент времени существует электрическая цепь (электрическая взаимосвязь), соединяющая выходы источника со входами приемника, по которой передаются электрические сигналы, соответствующие данной информации. Такое соединение обычно называют соединением типа &quot;точка-точка&quot;. Другие устройства в этот момент времени должны быть электрически отключены от общей шины с помощью специальных схем.</p>
      <p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Поэтому говорят, что между устройствами на 
        общей шине существует логическая взаимосвязь, которая может преобразовываться 
        в электрическую типа &quot;точка-точка&quot; для двух конкретных устройств 
        в заданный момент времени. Можно представить на логическом уровне магистральный 
        способ соединения, как логическое соединение устройств способом &quot;каждый 
        с каждым&quot; (<a href="../images/pages/2.htm" target="_blank">см. рис. 
        1.2а</a>).</p>
      <p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Таким образом в интерфейсах между двумя взаимосвязанными устройствами постоянно существует логический канал, который преобразуется в заданный момент времени в электрическое соединение между этими устройствами типа &quot;точка-точка&quot;. Отсюда следует, что для преобразования логического канала в электрический требуется определенное время. Как правило, передача информации происходит между двумя регистрами. Один из которых находится в источнике, а другой в приемнике. Поэтому при образовании соединений типа &quot;точка-точка&quot;, выходы регистра источника соединяются со входами регистра приемника.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Все устройства, подсоединенные к общей шине, делятся на два типа: активные, задатчики, главные устройства (<span lang="EN-US">muster device</span>) и пассивные, исполнители (<span lang="EN-US">target device</span>). </p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Активное устройство захватывает шину, выставляет адрес и управляет шиной, пассивное выполняет задания активного.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Шина может иметь несколько задатчиков, если имеется несколько ЦПр или некоторые устройства ввода-вывода могут также являться активными устройствами. При наличии нескольких задатчиков возникают коллизии, когда более одного активного устройства требуют для себя шину. В этом случае необходимо специальное устройство &quot;Арбитр шины&quot;, который решает какому устройству ее передать. Если на шине число задатчиков мало, и они фиксированы, т.е. не могут меняться, то специальный арбитр не нужен, его функции выполняет ЦПр.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Задатчик, подав запрос на захват шины, получает ее&nbsp; в свое распоряжение не сразу, а через некоторое время, зависящее от времени арбитрации и времени ожидания момента, когда текущий задатчик освободит шину. Это время называют временем доступа к шине.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Интерфейс должен предусматривать в своей работе возможность выполнения процесса ввода-вывода информации в трех режимах: программного ввода-вывода, ввода-вывода в режимах прерываний и прямого доступа к памяти.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">При выполнении ввода-вывода&nbsp; в режиме прерываний или прямого доступа к памяти возможны коллизии при обращении нескольких ПУ к задатчику при их готовности начать процесс передачи информации. В этом случае эти коллизии разрешает сам задатчик, выбирая то ПУ, с которым он будет работать. При обращении к процессору эту функцию выполняет сам процессор совместно с контроллером прерываний, при прямом доступе к памяти это делает&nbsp; контроллер прямого доступа к памяти.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Для разрешения коллизий при арбитрации, вводе-выводе в режимах прерываний и прямого доступа к памяти используется механизм задания уровня приоритетов для каждого устройства, участвующего в этих процедурах. В настоящее время применяют многоуровневую систему задания приоритетов с параллельным поиском устройства с наивысшим приоритетом. </p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">При передаче информации активное устройство всегда предварительно выставляет адрес того устройства куда записывается&nbsp; или откуда посылаются данные. Любая передача состоит из двух этапов: на первом всегда выдается адрес, на втором передаются сами данные. Передаваться могут или одиночные данные (по одному слову) или блок данных (несколько слов в блоке). Блочную передачу обычно называют шинной транзакцией или просто транзакцией. Транзакция состоит из начального адреса, который стоит вначале транзакции, и данных, располагаемых за ним. В последнее время&nbsp; практически во всех видах интерфейсов используют передачу информации в виде транзакций, т.к. это повышает скорость передачи за счет того, что адрес устанавливается всего один раз.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Передача информации между задатчиком и исполнителем реализуется в виде двух операций: операции записи – передача от задатчика к исполнителю и операции чтения – от исполнителя к задатчику.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">При транзакции типа “Чтение” по шине сначала посылается адрес вместе с соответствующими сигналами управления, идентифицирующими чтение, в ответ исполнитель выставляет на шину данные с соответствующими сигналами управления. Обычно ЦПр вынужден простаивать&nbsp; во время интервала между посылкой адреса и получением данных при выполнении чтения, при транзакции “Запись”, ЦПр или другой задатчик после выставления адреса и данных не ожидают возврата данных.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">В настоящее время, с точки зрения организации транзакций, используется два типа шин: шины с коммутацией цепей (<span lang="EN-US">Circuit</span>– <span lang="EN-US">Switched bus</span>) и шины с коммутацией пакетов (<span lang="EN-US">Packet</span> – <span lang="EN-US">Switched bus</span>), получившие свои названия по аналогии со способами коммутации в сетях передач данных. <span style="text-transform:uppercase">ш</span>ины с коммутацией пакетов при наличии нескольких задатчиков на шине (<span lang="EN-US">muster bus</span>) обеспечивают значительно большую пропускную способность по сравнению с шиной с коммутацией цепей за счет разделения транзакции на две логические части: запроса шины и ответа. Такая методика получила название “расщепления” транзакций (<span lang="EN-US">split transaction</span>). Иногда ее называют шиной соединения/разъединения (<span lang="EN-US">connect</span>/<span lang="EN-US">disconnect</span>)&nbsp; или конвейерной шиной (<span lang="EN-US">pipeling bus</span>). Транзакция называется расщепленной, поскольку произвольное количество других пакетов или транзакций&nbsp; могут использовать шину между запросом и ответом.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Транзакция чтения разбивается на транзакцию запроса чтения, которая содержит адрес, и транзакцию ответа исполнителя, которая содержит данные. Каждая транзакция теперь должна быть помечена (тегирована) соответствующим образом, чтобы ЦПр и исполнители могли сообщить, что есть что.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Шина с коммутацией цепей не делает расщепления транзакций, любая транзакция на ней есть неделимая операция. Задатчик запрашивает шину, после арбитрация помещает на ней адрес и блокирует шину до окончания обслуживания запроса. При этом большая часть времени обслуживания тратиться не на выполнение&nbsp; операций на шине, а на ожидание, вследствие чего это время просто теряется. Расщепление транзакций делает шину доступной для других задатчиков, пока исполнитель читает слово по запрашиваемому адресу. Но это также означает, что ЦПр должен бороться за шину, чтобы вернуть данные. Шина с расщеплением транзакций имеет более высокую пропускную способность, но обычно имеет и большую задержку доступа к шине, по сравнению с шиной с коммутацией цепей, т.к. эта шина захватывается задатчиком на все время выполнения транзакции.</p>
      <p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">В настоящее время в компьютерах поле памяти, 
        величина которого задается количеством разрядов адреса в команде, разбивается 
        на три адресных пространства: адресное пространство ОЗУ (памяти), адресное 
        пространство ввода-вывода и адресное пространство автоконфигурации. Такое 
        разбиение обусловлено особенностями построения и организации доступа к 
        соответствующим запоминающим устройствам. ОЗУ строится на соответствующих 
        микросхемах памяти, память ввода-вывода реализуется на адресуемых регистрах 
        контроллеров и адаптеров системы ввода-вывода, а память автоконфигурации 
        строится на регистрах автоконфигурации, расположенных в соответствующих 
        ПУ.</p>
      <p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Интерфейс учитывает эту ситуацию путем создания циклов записи и чтения отдельно для каждого адресного пространства.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">В частности, при работе с пространством ввода-вывода, обращение идет к портам ввода-вывода. Понятие порта имеет двойной смысл. С одной стороны – это разъем, к которому подключается кабель интерфейса ПУ, с другой стороны порт – это набор адресуемых регистров контроллера ввода-вывода, с которым работают команды компьютера (<span lang="EN-US">In Port</span>, <span lang="EN-US">Out Port</span>). Каждый контроллер ввода-вывода имеет дешифратор адреса, который работает с диапазоном адресов регистров этого контроллера, и в случае обращения к регистру он выбирает его, а затем этот регистр подключается к шине.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Важнейшим моментом в работе интерфейсов является синхронизация передачи информации. </p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Синхронизация – это согласование процессов взаимодействия между устройствами, заключающееся в передаче&nbsp; информации источником и ее приема приемником (одним или несколькими).</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Существуют два основных принципа синхронизации: синхронный и асинхронный. </p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">При синхронном принципе смена состояний источника и приемника взаимонезависимы и выполняются через одинаковые фиксированные интервалы времени. </p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">В этом случае приемник должен успеть принять данные до момента времени, когда источник выставит новые данные.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Величина фиксированного интервала времени синхронизации (<span style="font-family: Symbol">t</span>) определяется суммой времен (Т): распространения сигнала в линии связи, распознавания его приемником и временем фиксации данных в приемнике.</p><p class="MsoBodyText2" style="text-align:justify;text-indent:1.0cm;line-height:
150%"><span style="font-size:12.0pt;line-height:150%">Если источник взаимодействует с разными приемниками, то его частота работы определяется частотой работы самого медленного устройства, включая сам источник, что естественно замедляет общий процесс передачи данных.</span></p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Для надежной передачи данных необходимо выполнение условия&nbsp;&nbsp; <span style="font-family: Symbol">t</span> &gt;Т<sub><span lang="EN-US" style="font-size: 14.0pt; line-height: 150%">max</span></sub>, где <span style="font-family: Symbol">t</span>– это период следования импульсов синхронизации, задающих моменты переключения сигналов в приемнике и источнике.</p><span style="font-size: 12.0pt; font-family: Times New Roman">При асинхронном принципе смена состояний источника и приемника взаимозависимы, момент времени изменения состояния источника зависит от момента времени, когда приемник зафиксирует данные.</span></td></tr></table><table border="0" width="745" id="table1"><tr>
    <td>
      <div align="center"><img src="../images/13.png" width="401" height="201" name="i13"></div>
    </td>
  </tr></table><table border="0" width="745" id="table11"><tr><td><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Асинхронный принцип реализуется с помощью обратной связи от приемника к источнику (см. рис.1.13). Обратная связь может быть однопроводной и двухпроводной. При однопроводной используется сигнал &quot;готовности приемника&quot; (ГП), при двухпроводной добавляется сигнал &quot;данные приняты&quot; (ДП).</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">На рис.1.13б показана временная диаграмма переключения состояний источника и приемника при однопроводной связи. Сигнал ГП является инверсным. Он имеет низкий уровень, когда приемник свободен и может принимать данные от источника, переход ГП в высокий уровень означает, что приемник зафиксировал данные, поэтому занят, и не может принимать новые данные от источника.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">В момент <span lang="EN-US">t</span><sub><span style="font-size:14.0pt;line-height:150%">1</span></sub> источник выставляет данные, через время Т они фиксируются в приемнике, и он устанавливает сигнал ГП в высокое состояние. Источник, получив этот сигнал через время Т, сбрасывает данные и ждет установки ГП в низкое состояние, чтобы выставить новые данные. Приемник через время Т после сброса данных устанавливает ГП в низкое состояние, сигнализируя источнику, что он может выставлять новые данные. Таким образом, для надежной работы источник должен держать данные на шине данных время <span style="font-family: Symbol">t</span> &#8805; 2Т. Период смены информации на выходе источника 2 <span style="font-family: Symbol">t</span>, но <span style="font-family: Symbol">t</span> величина переменная, она зависит от характера линии связи и скорости работы приемников. Асинхронный принцип при работе источника со многими приемниками, имеющими широкий диапазон скоростей передачи информации, обеспечивает большую общую пропускную способность, чем синхронный.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Асинхронный принцип не означает, что синхронизация отсутствует, при асинхронном&nbsp; принципе период синхронизации является переменным, а при синхронном этот период постоянен и определяется частотой работы самого медленного устройства.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Синхронизация может осуществляться не только с помощью импульсов синхронизации, но и программным способом с помощью определенных кодов синхронизации (меток, маркеров и т.д.).</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">В соответствии с используемыми принципами синхронизации интерфейсы могут быть синхронные и асинхронные.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Если шина синхронная, то переключение всех сигналов&nbsp; на линиях шины производится по фронту импульсов синхронизации. Эти шины могут быть быстрыми и дешевыми. Но частота работы параллельных интерфейсов ограничивается из-за проблем перекоса сигналов на разных линиях шины, что накладывает серьезные ограничения на длину этих шин. Обычно системные шины синхронные, шины расширения могут быть синхронные (<span lang="EN-US">PCI</span>) или асинхронные (<span lang="EN-US">ISA</span>). В последовательных&nbsp; интерфейсах такие ограничения существенно меньше.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">В асинхронных интерфейсах переключение сигналов на линиях шины не привязана к фронтам импульсов синхронизации. Эта шина позволяет гораздо проще приспособить широкое разнообразие устройств и удлинить&nbsp; шину без беспокойства о перекосе сигналов синхронизации и о системе синхронизации. Асинхронная шина легче масштабируется.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Следует отметить, что в синхронных и асинхронных шинах могут быть как синхронные, так и асинхронные передачи данных, т.к. система ввода-вывода строится по многошинной архитектуре, то возникают проблемы взаимосинхронизации шин, работающих на разных частотах.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Как видно из вышеизложенного, процессы передачи информации между задатчиком и исполнителем на шине весьма сложные. Они включают преобразование логического канала&nbsp; в электрический, захват шины задатчиком, установка адреса, передача данных, синхронизация передачи и др.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Все передачи&nbsp; информации на шине оформляются в&nbsp; виде команд или циклов шины. Каждой команде соответствует определенный протокол передачи, состоящий из набора взаимосвязанных сигналов, идущих в определенной последовательности.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">&nbsp;В этот набор сигналов, кроме сигналов адреса и данных, включаются сигналы управления, идентификации, синхронизации и др.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Каждому сигналу отводится определенная линия, а все вместе они образуют определенную структуру линий интерфейса. Имеется две основных структуры: трехшинная и двухшинная структуры.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">В трехшинной структуре имеется три вида шин: шина адреса, шина данных и шина управления. В двухшинной структуре – две шины: шина адреса/данных и шина управления. В этой структуре адрес и данные передаются по одной и той же шине, но в разные моменты времени.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Двухшинный интерфейс проще, но его производительность ниже по сравнению с трехшинным из-за необходимости мультиплексирования шины адреса/данных. На шине адреса линии нумеруются от младшего разряда (А<sub><span style="font-size:14.0pt;line-height:150%">0</span></sub>) до последнего старшего, а на шине данных указывается порядок расположения байт. Поэтому к шине данных примыкают линии, указывающие номера передаваемых по шине байта.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Кодирование команд интерфейса производится двумя способами. В первом, каждой команде отводится своя линия интерфейса. Например, линии операций чтения (<i><span lang="EN-US">Read</span></i>) и записи (<i><span lang="EN-US">Write</span></i>). Такой подход приемлем при малом числе команд, он используется в шине <span lang="EN-US">ISA</span>.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Во втором способе, для кода команды отводится определенное небольшое количество линий, с помощью которых формируется код команды. Например, четыре линии позволяют закодировать 16 разных команд, как на шине <span lang="EN-US">PCI</span>.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">В шине управления имеются линии, реализующие асинхронный принцип передачи информации. К ним относятся сигналы готовности (<i><span lang="EN-US">Ready</span></i>), являющиеся сигналами обратной связи, идущими от приемника.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Кроме того, в интерфейсах предусматриваются сигналы арбитрации: сигналы <span lang="EN-US">REQi</span> – запроса на захват шины (<i><span lang="EN-US">Request</span></i>) и <span lang="EN-US">GRNi</span> (<i><span lang="EN-US">Grant</span></i>) – разрешения на захват шины. При прямом доступе к памяти: <span lang="EN-US">DRQi</span> – запрос на прямой доступ к памяти (<i><span lang="EN-US">Direct Request</span></i>) и <span lang="EN-US">DACK</span> – разрешение на прямой доступ к памяти (<i><span lang="EN-US">Direct Acknolidge</span></i>). Для ввода-вывода в режиме прерываний: <span lang="EN-US">IRQi</span> – запрос на прерывание (<i><span lang="EN-US">Interrupt Request</span></i>).</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">&nbsp;Шина управления имеет и другие линии, которые будут рассмотрены в разделах, посвященных конкретным интерфейсам.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">В настоящее время интерфейсы выполняют следующие основные функции:</p><p class="MsoNormal" style="text-align: justify; text-indent: -18.0pt; line-height: 150%; margin-left: 46.35pt; margin-right: 0cm; margin-top: 0cm; margin-bottom: .0001pt">1.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Проведение синхронизации интерфейса, используя синхронный или асинхронный принципы.</p><p class="MsoNormal" style="text-align: justify; text-indent: -18.0pt; line-height: 150%; margin-left: 46.35pt; margin-right: 0cm; margin-top: 0cm; margin-bottom: .0001pt">2.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Передачу информации между источником и приемником с помощью операций чтения и записи.</p><p class="MsoNormal" style="text-align: justify; text-indent: -18.0pt; line-height: 150%; margin-left: 46.35pt; margin-right: 0cm; margin-top: 0cm; margin-bottom: .0001pt">3.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Арбитрацию активных устройств на шине и селекция ПУ при вводе-выводе в режимах прямого доступа к памяти и прерываний.</p><p class="MsoNormal" style="text-align: justify; text-indent: -18.0pt; line-height: 150%; margin-left: 46.35pt; margin-right: 0cm; margin-top: 0cm; margin-bottom: .0001pt">4.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Контроль передачи информации и функционирования самой шины и устройств на ней.</p><p class="MsoNormal" style="text-align: justify; text-indent: -18.0pt; line-height: 150%; margin-left: 46.35pt; margin-right: 0cm; margin-top: 0cm; margin-bottom: .0001pt">5.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Преобразование информации из параллельного в последовательное представление и обратно.</p><p class="MsoNormal" style="text-align: justify; text-indent: -18.0pt; line-height: 150%; margin-left: 46.35pt; margin-right: 0cm; margin-top: 0cm; margin-bottom: .0001pt">6.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Поддержку режима автоконфигурации.</p><p class="MsoNormal" style="text-align: justify; text-indent: -18.0pt; line-height: 150%; margin-left: 46.35pt; margin-right: 0cm; margin-top: 0cm; margin-bottom: .0001pt">7.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Управление питанием компьютера.</p><p class="MsoNormal" style="text-align: justify; text-indent: -18.0pt; line-height: 150%; margin-left: 46.35pt; margin-right: 0cm; margin-top: 0cm; margin-bottom: .0001pt">8.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Поддержку режима горячего подключения ПУ к системному блоку.</p><p class="MsoBodyText2" style="text-align:justify;text-indent:1.0cm;line-height:
150%"><span style="font-size:12.0pt;line-height:150%">Рассмотрим способы реализации функций интерфейсов.</span></p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%"><u>Функция синхронизации.</u> Синхронизация является той функцией, которая определяет скорость и надежность передачи информации. Функция синхронизации реализуется либо по синхронному, либо по асинхронному принципу, используя аппаратные или программные средства. При аппаратной синхронизации она осуществляется с помощью специальных сигналов синхронизации (синхронизирующих импульсов, сигналов стробирования). Программная синхронизация использует специальные маркеры и метки, представляющие из себя либо коды синхронизации, либо пакеты-маркеры, содержащие соответствующую информацию.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">В процесс синхронизации включается механизм стробирования данных. По линии шины данных передаются либо “1” либо “0” или на ней информация отсутствует, что соответствует паузе на шине или, как говорят, “холостому ходу шины”. Для того, чтобы приемник надежно различал эти события, используют специальный стробирующий сигнал, который подается одновременно с данными в момент времени, когда на линии устанавливаются действительное значение данных. В качестве стробирующих используют различные сигналы интерфейса, в том числе и импульсы синхронизации. При синхронном принципе стробирующий сигнал подается синхронно с импульсами синхронизации шины, а при асинхронном – он может образовываться не синхронно с этими импульсами.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Передача информации от источника к приемнику осуществляется либо последовательно (последовательный интерфейс), либо параллельно (параллельный интерфейс).</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">При последовательной передаче синхронизация производится на уровне бит, символов, транзакций и массивов.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Синхронизация на уровне бит осуществляется&nbsp; аппаратным способом путем стробирования каждого бита данных синхроимпульсом.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Синхроимпульс либо генерируется специальным генератором, либо используется самосинхронизация. В первом случае передача “1” и “0” может сопровождаться переключением сигнала только для одной из цифр (“1” или “0”), а для другой отсутствовать. В случае самосинхронизации передача&nbsp; “1” и “0” должна сопровождаться переключением сигнала для обеих цифр и “1” и “0”, что дает возможность формировать синхроимпульс непосредственно из сигналов информации. Например, код Манчестер <span lang="EN-US">II</span>, где “1” изображается током в одном направлении, а “0” - током в обратном направлении (см. рис. 1.14).</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Синхронизация на уровне символов, транзакций и массивов осуществляется по асинхронному принципу с помощью меток, которые идут в начале и конце информации, между ними располагаются данные.</td></tr></table><table border="0" width="745" id="table9"><tr>
    <td>
      <div align="center"><img src="../images/14.png" width="301" height="201"></div>
    </td>
  </tr></table><table border="0" width="745" id="table5"><tr><td><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">В случае символа (см. рис. 1.15) его начало обозначается старт-битом, имеющим 0-ое значение, конец – одним, полутора или двумя стоп-битами, имеющими 1-ое значение, между ними находятся от 5 до 8 информационных бита и может присутствовать разряд контроля по четности.</td></tr><tr>
    <td>
      <div align="center"><img src="../images/15.png" width="351" height="201"></div>
    </td>
  </tr><tr><td><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Синхронизация на уровне транзакций производится с помощью специальных маркер-пакетов, которые идут в начале транзакций от источника, за ними идут данные, а завершается транзакция выдачей приемником пакета-квитирования, подтверждающего, что данные приняты. Массив синхронизируется таким же образом.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">При параллельной передаче информации синхронизация производится на уровне слов (байт) при одновременной передаче всех разрядов слова, а также на уровне транзакций и массивов.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Синхронизация передачи на уровне слов производится по синхронному и асинхронному принципам с помощью сигналов стробирования (<i><span lang="EN-US">Strob</span></i>), и готовности (<i><span lang="EN-US">Ready</span></i>). При параллельной передаче имеется определенный разброс в установке и снятити сигналов данных на линиях шин.(<span style="font-family: Symbol">D</span><span lang="EN-US">t</span><sub>1</sub>, <span lang="EN-US" style="font-family: Symbol">D</span><span lang="EN-US">t</span><sub>2</sub>)</td></tr><tr>
    <td>
      <div align="center"><img src="../images/16.png" width="351" height="201"></div>
    </td>
  </tr><tr><td><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Стробирующий импульс фиксирует момент времени, когда на всех линиях шины устанавливается действительное значение разрядов слова и по стробу приемник может считывать информацию с линий интерфейса (см. рис. 1.16). При асинхронном принципе передачи приемник выдает сигнал квитирования (готовности, <span lang="EN-US">Ready</span>), подтверждающий прием, а строб имеет переменную длительность (см. рис. 1.17). При синхронной передаче строб имеет фиксированную длительность, сигнал квитирования отсутствует (рис. 1.16).</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Транзакции передаются по асинхронному принципу, начало и конец&nbsp; транзакций фиксируется наличием или отсутствием тех или иных сигналов управления и синхронизации. Передача на уровне массивов производится по асинхронному принципу с помощью пакетов-маркеров.</td></tr><tr>
    <td>
      <div align="center"><img src="../images/17.png" width="351" height="201"></div>
    </td>
  </tr><tr><td><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%"><u>Функция передачи информации.</u> </p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Передача информации осуществляется в 3-х режима: программный ввод-вывод, ввод-вывод в режиме прерываний и прямого доступа к памяти.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Программный ввод-вывод (<span lang="EN-US">PIO</span>) сильно загружает процессор и имеет малую скорость передачи, т.к. все управляющие сигналы и строб формируются процессором программно.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">В режиме прерываний тип передачи задает подключенное устройство. Это так называемый <span lang="EN-US">PIO</span> с аппаратным контролем потока. В частности, этот режим используется в интерфейсе <span lang="EN-US">IDE</span>, это режим <span lang="EN-US">PIO Mode</span>.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Прямой доступ к памяти в наименьшей степени загружает процессор, т.к. он только инициализирует <span lang="EN-US">DMA</span>. Но надо отметить, что скорость стандартных каналов <span lang="EN-US">DMA</span> ограничен значениями 2/4 Мбайт/сек. Прогрессивные режимы <span lang="EN-US">DMA</span> (<span lang="EN-US">Ultra DMA</span>) обеспечивают более высокие скорости обмена (33 Мбайта/сек).</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Передача информации между источником и приемником выполняется в виде циклов (команд) шины. Обычно используется четыре типа циклов обмена: циклы памяти, циклы ввода-вывода, циклы прямого доступа к памяти и цикла автоконфигурации. Управление передачей осуществляет активное устройство.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Активное устройство совместно с адресом выдает команду обмена данными. Эти команды различают пространства памяти, ввода-вывода и автоконфигурации. Инструкции ввода-вывода процессора порождают шинные циклы обмена, в которых вырабатываются сигналы <span lang="EN-US">IORD</span> (<span lang="EN-US">Input</span>-<span lang="EN-US">Output read</span>,&nbsp; чтение порта) и <span lang="EN-US">IOWR</span> (<span lang="EN-US">Input</span>-<span lang="EN-US">Output write</span>, запись в порт), которые&nbsp; отличают пространства ввода-вывода от пространства памяти, где вырабатывают соответствующие сигналы чтения и записи <span lang="EN-US">MEMRD</span> (<span lang="EN-US">Memory Read</span>, чтение памяти) и <span lang="EN-US">MEMWR</span> (<span lang="EN-US">Memory Write</span>, запись в память). В цикле&nbsp; обмена участвуют сигналы стробирования и квитирования. В случае кодирования команд в виде сигналов на линиях <span lang="EN-US">RD</span> (<span lang="EN-US">Read</span>) и <span lang="EN-US">WR</span> (<span lang="EN-US">Write</span>), они являются многофункциональными и обычно указывают направление передачи, адресное пространство и выполняют функции стробирования.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Перед передачей данных активное устройство указывает номера байт, передаваемых в цикле обмена, с помощью специальных сигналов и кодов.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Сигналы <span lang="EN-US">IORD</span>, <span lang="EN-US">MEMWR</span> и <span lang="EN-US">IOWR</span>, <span lang="EN-US">MEMRD</span> вырабатываются и в циклах прямого доступа к памяти. В этом случае активным является контроллер прямого доступа к памяти, он выдает на шину адрес памяти, к которой производится доступ, а адрес порта не выдается.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%"><u>Функции арбитрации и селекции.</u> Функции арбитрации и селекции используются для выбора устройств с наибольшим приоритетом и предоставления им прав работать на шине. Эти функции обслуживают режим работы на шине нескольких активных устройств и ввод-вывод в режиме прерываний и прямого доступа к памяти. </p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Функция селекции при вводе-выводе в режиме прерываний включает также процесс идентификации периферийного устройства, получившего право работать с активным устройством.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Задание уровней приоритетов производится двумя способами: на основе одноуровневой и многоуровневой систем задания приоритетов. При одноуровневой системе все запросы на прерывание работы шины (<span lang="EN-US">IRQi</span>) подаются по одной линии, а устройство с наибольшим приоритетом выбирается с помощью процесса последовательного поллинга программными (см. рис. 1.18а) или аппаратными (см. рис. 1.18б) средствами. Эта система проще, но требует большего времени на проведение поллинга.</td></tr><tr>
    <td>
      <div align="center"><img src="../images/18.png" width="500" height="200"></div>
    </td>
  </tr><tr><td><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Многоуровневая система имеет несколько входных линий для запросов. Каждая линия обладает своим уровнем приоритета, который присваивается устройству, подсоединенному к этому уровню. В этом случае производится параллельный&nbsp; поллинг устройства с наивысшем приоритетом, который намного быстрее последовательного (см. рис. 1.19).</td></tr><tr>
    <td>
      <div align="center"><img src="../images/19.png" width="501" height="201"></div>
    </td>
  </tr><tr><td><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Для уменьшения времени доступа к шине устройств с наибольшим приоритетом используют линии разрешения захвата шины или прямого доступа к памяти (<span lang="EN-US">GRNi</span>, <span lang="EN-US">DACK</span>), идущие от блока арбитрации (селекции)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; к устройствам. При одноуровневой системе такая линия одна и проходит через все устройства, сигнал разрешения распространяется до первого устройства, подавшего запрос на прерывание. В этом случае уровень приоритета задается местом расположения устройства на шине по отношению к арбитру, ближе всех расположено устройство с наибольшим приоритетом (см. рис. 1.18).</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">В многоуровневой системе каждой линии запроса (<span lang="EN-US">IRQi</span>, <span lang="EN-US">DRQi</span>) соответствует своя линия разрешения (<span lang="EN-US">GRNi</span>, <span lang="EN-US">DACK</span>) (см. рис. 1.19а).</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Могут быть комбинированные системы, использующие как параллельный, так и последовательный способы задания уровней приоритетов (см. рис. 1.19б).</p>
      <p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">При вводе-выводе в режиме прерываний необходимо 
        кроме определения устройства с наивысшем приоритетом произвести его идентификацию. 
        Идентификация реализуется с помощью адреса вектора прерывания, выдаваемого 
        блоком селекции процессору. С&nbsp; помощью этого вектора идет обращение 
        к ячейке памяти, где он хранится и задает номер ячейки первой команды 
        драйвера, управляющего работой данным устройством (<a href="../images/pages/8.htm" target="_blank">см. 
        рис 1.8</a>). Передача вектора прерываний осуществляется по шине данных.</p>
      <p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Как правило, функции арбитрации и селекции поддерживают режим вложенных прерываний, когда устройство с большим приоритетом может прервать работу текущего устройства, обладающего меньшим приоритетом.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Процессы арбитрации и селекции основываются либо на схеме фиксированного приоритета, либо на более “справедливых” схемах с циклическим приоритетом или схеме со случайным выбором активного устройства, требующего шину.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Арбитрация реализуется с помощью специальных схем арбитра в главном мосту или с помощью котроллеров прямого доступа к памяти, построенных на микросхемах типа <span lang="EN-US">i</span>8237<span lang="EN-US">A</span>, имеющих четыре линии запросов ПДП. Функция селекции использует контроллеры прерываний типа <span lang="EN-US">i</span>8259<span lang="EN-US">A</span>, с 8 линиями запросов прерывания.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%"><u>Функция контроля. </u>Эта функция используется для контроля передачи адреса и данных, контроля выдачи сигналов обратной связи (квитирования) и улучшения ремонтопригодности компьютера при локализации неисправностей.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">При параллельной передаче адрес и данные контролируются методом проверки на четность (нечетность) ЕСС, для чего вводится специальная линия контрольного разряда.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">При последовательной передаче, как правило, используется избыточные циклические коды (метод <span lang="EN-US">CRC</span>) и каждый блок данных сопровождается контрольным кодом.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Контроль выполнения циклов на шине осуществляется методом тайм-аут. При этом методе для каждого контролируемого цикла задается максимально возможное время длительности цикла, если цикл не завершается за это время, выдается сигнал ошибки.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Для проведения диагностики работоспособности устройств в интерфейсах используется специальная последовательная шина <span lang="EN-US">JTAG</span>, предназначенная для тестирования <span lang="EN-US">PCI</span>-устройств с помощью встроенного порта ТАР (<span lang="EN-US">Test Access Port</span>).</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%"><u>Функция преобразования информации.</u> В компьютерах используются одновременно и параллельные и последовательные&nbsp; интерфейсы, кроме того, применяются ПУ с последовательной записью и считыванием информации на носителе (магнитные и оптические диски, магнитные ленты). Все это приводит к необходимости при передаче информации производить преобразование последовательного ее представления в параллельное и наоборот. Эти функции реализуются в соответствующих контроллерах ввода-вывода. </p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%"><u>Функция автоконфигурации.</u> Эта функция в интерфейсе реализуется специальными операциями конфигурационного чтения и записи (<span lang="EN-US">Configuration Read and Write</span>), сигналами выбора устройств при конфигурации и выделенным адресным пространством автоконфигурации. Сигналы выбора являются индивидуальными для каждого устройства. С их помощью производится последовательная выборка устройств шины, подлежащих автоконфигурации. Конфигурируемые устройства сообщают блоку автоконфигурации&nbsp; о потребностях в ресурсах и возможных диапазонах памяти, эти данные хранятся в регистрах автоконфигурации. После распределения ресурсов, выполняемого программой конфигурирования (во время <span lang="EN-US">POST</span>), в устройство передаются&nbsp; параметры конфигурирования, которые записываются в пространство памяти автоконфигурации, расположенной в самих устройствах. ПУ, использующие автоконфигурацию, должны иметь соответствующие средства для проведения этих процедур.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%"><u>Функция управлением питанием.</u> (<span lang="EN-US">Power Management</span>) В настоящее время многие компьютеры круглосуточно включены и работают. Поэтому в интерфейсах вводят специальные функции управления электропотреблением, работающие в соответствии со спецификациями <span lang="EN-US">ACPI</span> и <span lang="EN-US">PC</span>97. </p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Кратко о спецификации <span lang="EN-US">ACPI</span> (<span lang="EN-US">Advanced Configuration and Power Interface</span>) Задача <span lang="EN-US">ACPI </span>обеспечить взаимодействие между операционной системой, аппаратным обеспечением и <span lang="EN-US">BIOS</span> системной платы. В полном объеме спецификация <span lang="EN-US">ACPI</span> к настоящему времени (2000 год) не реализована. На основе этой спецификации реализуется технология <span lang="EN-US">OnNow</span>.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">С точки зрения <span lang="EN-US">ACPI</span>, всего имеется 4 состояния РС:</p><p class="MsoNormal" style="text-align: justify; text-indent: -18.0pt; line-height: 150%; margin-left: 46.35pt; margin-right: 0cm; margin-top: 0cm; margin-bottom: .0001pt"><span style="font-family: Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span lang="EN-US">G0 – </span>обычное рабочее состояние</p><p class="MsoNormal" style="text-align: justify; text-indent: -18.0pt; line-height: 150%; margin-left: 46.35pt; margin-right: 0cm; margin-top: 0cm; margin-bottom: .0001pt"><span style="font-family: Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span lang="EN-US">G1 – suspend, спящий режим</span></p><p class="MsoNormal" style="text-align: justify; text-indent: -18.0pt; line-height: 150%; margin-left: 46.35pt; margin-right: 0cm; margin-top: 0cm; margin-bottom: .0001pt"><span style="font-family: Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span lang="EN-US">G</span>2 – <span lang="EN-US">soft</span>-<span lang="EN-US">off</span>, режим, когда питание отключено, но блок питания находится под напряжением, и машина готова включиться в любой момент</p><p class="MsoNormal" style="text-align: justify; text-indent: -18.0pt; line-height: 150%; margin-left: 46.35pt; margin-right: 0cm; margin-top: 0cm; margin-bottom: .0001pt"><span style="font-family: Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span lang="EN-US">G</span>3 – <span lang="EN-US">mechanical off</span> – питание отключено напрочь</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%">Инициатива <span lang="EN-US">OnNow</span> заключается в расширении состояния <span lang="EN-US">G</span>1. Вместо простого засыпания, реализованного непонятно как, вводятся 4 режима:</p><p class="MsoNormal" style="text-align: justify; text-indent: -18.0pt; line-height: 150%; margin-left: 46.35pt; margin-right: 0cm; margin-top: 0cm; margin-bottom: .0001pt"><span lang="EN-US" style="font-family: Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span lang="EN-US">S</span>1: (<span lang="EN-US">standby</span> 1) останавливаются тактовые генераторы <span lang="EN-US">CPU </span>&nbsp;и всей системы, но при этом состояние памяти остается неизменным. Выход из <span lang="EN-US">S1 </span>осуществляется мгновенно.</p><p class="MsoNormal" style="text-align: justify; text-indent: -18.0pt; line-height: 150%; margin-left: 46.35pt; margin-right: 0cm; margin-top: 0cm; margin-bottom: .0001pt"><span lang="EN-US" style="font-family: Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span lang="EN-US">S</span>2: (<span lang="EN-US">standby</span> 2) также останавливаются тактовые генераторы <span lang="EN-US">CPU</span> и всей системы, но к тому же отключается питание кэша <span lang="EN-US">CPU</span> и , а данные, хранившиеся там, сбрасываются в основную память. Включение также происходит достаточно быстро.</p><p class="MsoNormal" style="text-align: justify; text-indent: -18.0pt; line-height: 150%; margin-left: 46.35pt; margin-right: 0cm; margin-top: 0cm; margin-bottom: .0001pt"><span style="font-family: Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span lang="EN-US">S</span>3: (<span lang="EN-US">suspend</span>-<span lang="EN-US">to</span>-<span lang="EN-US">memory</span>)&nbsp; по замыслу, именно этот режим должен был быть <span lang="EN-US">OnNow</span>, но по воле разработчиков пока так не получилось. Должны обесточиваться все компоненты системы, кроме памяти, в которой сохраняются необходимые данные о состоянии <span lang="EN-US">CPU</span> и кэша. Включение с восстановлением предыдущего состояния РС действительно происходит <span lang="EN-US">Now</span>, т.е. практически сразу.</p><p class="MsoNormal" style="text-align: justify; text-indent: -18.0pt; line-height: 150%; margin-left: 46.35pt; margin-right: 0cm; margin-top: 0cm; margin-bottom: .0001pt"><span lang="EN-US" style="font-family: Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span lang="EN-US">S</span>3: (<span lang="EN-US">suspend</span>-<span lang="EN-US">to</span>-<span lang="EN-US">disk</span>) то, что реализовано в каком-то виде сейчас. Все компоненты системы обесточиваются, данные о состоянии процессора и содержимое кэша и памяти записываются в специальное отведенное место на жестком диске. При этом пробуждение может занимать значительное время.</p><p class="MsoNormal" style="margin:0cm;margin-bottom:.0001pt;text-align:justify;
text-indent:1.0cm;line-height:150%"><u>Функция горячего подключения ПУ.</u> Эта функция позволяет отключать и подключать ПУ без остановки компьютера. При этом происходит автоконфигурирование включенного устройства без участия оператора.</td></tr></table><table border="0" width="745" id="table12"><tr><td><h5><a href="sys_vv.htm">Назад</a><span lang="en-us">|</span><strong><a href="../index.htm">Главная страница</a></strong></h5></td></tr></table><hr align="left" width="745"><dl><dd><h1 align="left">©&nbsp;ПГУ, 2005. Все права защищены.</h1></dd></dl></body></html>