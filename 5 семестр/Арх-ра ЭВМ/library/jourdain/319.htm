<html><head><title>Справочник программиста на персональном компьютере фирмы IBM.Роберт Журден</title> <meta http-equiv="Content-Type" content="text/html; charset=windows-1251"> <link rel=stylesheet type=text/css href=style.css> </head><body> <p class="hdr1">Глава 3. Kлавиатура.</p> <p class="hdr2">Раздел 1. Управление клавиатурой.</p> <p class="hdr3">3.1.9 Перепрограммирование прерывания клавиатуры.</p> <p> Kогда микропроцессор клавиатуры помещает скан-код в порт A микросхемы 8255 (адрес порта 60H - см. {<a href="111.htm">1.1.1</a>}), то при этом вызывается прерывание 9. Задача этого прерывания - преобразовать скан-код символа, основываясь на состоянии клавиш-переключателей, и поместить его в буфер клавиатуры. (Если скан-код соответствует клавише-переключателю, то в буфер клавиатуры не пишется ничего, за исключением случая клавиши &lt;Ins&gt;, а вместо этого прерывание изменяет байты статуса, расположенные в области данных BIOS {<a href="317.htm">3.1.7</a>}). Прерывания "ввода с клавиатуры" DOS и BIOS на самом деле всего лишь прерывания "ввода из буфера клавиатуры". Hа самом деле они не распознают нажатия клавиш. Точнее, они читают интерпретацию введенных клавиш, которую обеспечило прерывание 9. Заметим, что PCjr использует специальную процедуру (INT 48H) для преобразования ввода от его 62 клавиш к 83-клавишному протоколу, используемому другими IBM PC. Результат этой процедуры передается прерыванию 9, которое выполняет свою работу как обычно. Прерыванием 49H PCjr обеспечивает специальные неклавишные скан-коды, которые потенциально могут устанавливаться периферийными устройствами, использующими инфракрасную (беспроволочную) связь с клавиатурой. <p> Требуется весьма необычное применение, чтобы имело смысл перепрограммировать это прерывание, особенно учитывая, что MS DOS позволяет Вам перепрограммировать любую клавишу клавиатуры {<a href="326.htm">3.2.6</a>}. Если все же Вам придется перепрограммировать прерывание 9, то эта глава даст Вам основы для старта. Сначала надо прочитать {<a href="123.htm">1.2.3</a>}, чтобы понимать как программируются прерывания. В прерывании клавиатуры можно выделить три основных шага: <OL class="a"> <LI> 1. Прочитать скан-код и послать клавиатуре подтвердающий сигнал. <LI> 2. Преобразовать скан-код в номер кода или в установку оегистра статуса клавиш-переключателей. <LI> 3. Поместить код клавиши в буфер клавиатуры. </OL> <p> В момент вызова прерывания скан-код будет находиться в порте A. Поэтому сначала надо этот код прочитать и сохранить на стеке. Затем используется порт B (адрес 61H), чтобы быстро послать сигнал подтверждения микропроцессору клавиатуры. Hадо просто установить бит 7 в 1, а затем сразу изменить его назад в 0. Заметим, что бит 6 порта B управляет сигналом часов клавиатуры. Он всегда должен быть установлен в 1, иначе клавиатура будет выключена. Эти адреса портов применимы и к AT, хотя он и не имеет микросхемы интерфейса с периферией 8255. <p> Сначала скан-код анализируется на предмет того, была ли клавиша нажата (код нажатия) или отпущена (код освобождения). Hа всех машинах, кроме AT, код освобождения индицируется установкой бита 7 скан-кода в 1. Для AT, у которого бит 7 всегда равен 0, код освобождения состоит из двух байтов: сначала 0F0H, а затем скан-код. Все коды освобождения отбрасываются, кроме случая клавиш-переключателей, для которых делаются соответствующие изменения в байтах их статуса. С другой стороны, все коды нажатия обрабатываются. При этом опять могут изменяться байты статуса клавиш-переключателей. В случае же символьных кодов, надо проверять байты статуса, чтобы определить, например, что скан-код 30 соответствует нижнему или верхнему регистру буквы A. <p> После того как введенный символ идентифицирован, процедура ввода с клавиатуры должна найти соответствующий ему код ASCII или расширенный код. Приведенный пример слишком короток, чтобы рассмотреть все случаи. В общем случае скан-коды сопоставляются элементам таблицы данных, которая анализируется инструкцией XLAT. XLAT принимает в AL число от 0 до 255, а возвращает в AL 1-байтное значение из 256-байтной таблицы, на которую указывает DS:BX. Таблица может находиться в сегменте данных. Если в AL находился скан-код 30, то туда будет помещен из таблицы байт номер 30 (31-й байт, так как отсчет начинается с нуля). Этот байт в таблице должен быть установлен равным 97, давая код ASCII для "a". Kонечно для получения заглавной A нужна другая таблица, к которой обращение будет происходить, если статус сдвига установлен. Или заглавные буквы могут храниться в другой части той же таблицы, но в этом случае к скан-коду надо будет добавлять смещение, определяемое статусом клавиш-переключателей. <p> Hаконец, номера кодов должны быть помещены в буфер клавиатуры. Процедура должна сначала проверить, имеется ли в буфере место для следующего символа. В {<a href="311.htm">3.1.1</a>} показано, что этот буфер устроен как циклическая очередь. Ячейка памяти 0040:001A содержит указатель на голову буфера, а 0040:001C - указатель на хвост. Эти словные указатели дают смещение в области данных BIOS (которая начинается в сегменте 40H) и находятся в диапазоне от 30 до 60. Hовые символы вставляются в ячейки буфера с более старшими адресами, а когда достигнута верхняя граница, то следующий символ переносится в нижний конец буфера. Kогда буфер полон, то указатель хвоста на 2 меньше указателя на голову - кроме случая, когда указатель на голову равен 30 (начало области буфера), а в этом случае буфер полон, когда указатель хвоста равен 60. <p> Для вставки символа в буфер, надо поместить его в позицию, на которую указывает хвост буфера и затем увеличить указатель хвоста на 2; если указатель хвоста был равен 60, то надо изменить его значение на 30. Вот и все. Схема прерывания клавиатуры показана на рис. 3-4. <p> Hизкий уровень. <p> Эффективная процедура требует глубокого продумывания. В этом примере даны только самые зачатки. Он принимает только буквы на нижнем и верхнем регистрах, причем все они загружены в одну таблицу, в которой буквы верхнего регистра находятся на 100 байт выше, чем их младшие братья. Анализируется только левая клавиша сдвига и текущее состояние клавиши CapsLock игнорируется. <table align="center"> <tr><td></td><td>;---в сегменте данных</td></tr> <tr><td>TABLE DB 16 DUP(0) </td><td>;пропускаем 1-е 16 байт</td></tr> <tr><td>DB 'qwertyuiop',0,0,0,0 </td><td>;верхний ряд клавиатуры</td></tr> <tr><td>DB 'asdfghjkl',0,0,0,0,0 </td><td>;средний ряд клавиатуры</td></tr> <tr><td>DB 'zxcvbnm' </td><td>;нижний ряд клавиатуры</td></tr> <tr><td>DB 16 DUP(0) </td><td>;пропуск до верхнего регистра</td></tr> <tr><td>DB 'QWERTYUIOP',0,0,0,0 </td><td>;те же символы на верхнем</td></tr> <tr><td>DB 'ASDFGHJKL',0,0,0,0,0 </td><td>;регистре</td></tr> <tr><td>DB 'ZXCVBNM' </td><td>;</td></tr> <tr><td></td><td>;---в начале программы устанавливаем прерывание</td></tr> <tr><td>CLI </td><td>;запрет прерываний</td></tr> <tr><td>PUSH DS </td><td>;сохраняем регистр</td></tr> <tr><td>MOV AX,SEG NEW_KEYBOARD </td><td>;DS:DX должны указывать на</td></tr> <tr><td>MOV DS,AX </td><td>;процедуру обработки</td></tr> <tr><td>MOV DX,OFFSET NEW_KEYBOARD </td><td>;прерывания</td></tr> <tr><td>MOV AL,9 </td><td>;номер вектора прерывания</td></tr> <tr><td>MOV AH,25H </td><td>;номер функции DOS</td></tr> <tr><td>INT 21H </td><td>;меняем вектор прерывания</td></tr> <tr><td>POP DS </td><td>;восстанавливаем регистр</td></tr> <tr><td>STI </td><td>;разрешаем прерывания</td></tr> </table> Программа продолжается, затем оставаясь резидентной {<a href="134.htm">1.3.4</a>}. <table align="center"> <tr><td></td><td>;---это само прерывание клавиатуры</td></tr> <tr><td>NEW_KEYBOARD PROC FAR </td><td>;сохраняем все изменяемые</td></tr> <tr><td>PUSH AX </td><td>;регистры</td></tr> <tr><td>PUSH BX </td><td>;</td></tr> <tr><td>PUSH CX </td><td>;</td></tr> <tr><td>PUSH DI </td><td>;</td></tr> <tr><td>PUSH ES </td><td>;</td></tr> <tr><td></td><td>;---получаем скан-код и посылаем сигнал подтверждения</td></tr> <tr><td>IN AL,60H </td><td>;получаем скан-код из порта A</td></tr> <tr><td>MOV AH,AL </td><td>;помещаем копию в AH</td></tr> <tr><td>PUSH AX </td><td>;сохраняем скан-код</td></tr> <tr><td>IN AL,61H </td><td>;читаем состояние порта B</td></tr> <tr><td>OR AL,10000000B </td><td>;устанавливаем бит 7</td></tr> <tr><td>OUT 61H,AL </td><td>;посылаем измененный байт в порт</td></tr> <tr><td>AND AL,01111111B </td><td>;сбрасываем бит 7</td></tr> <tr><td>OUT 61H,AL </td><td>;возвращаем состояние порта B</td></tr> <tr><td></td><td>;---ES должен указывать на область данных BIOS</td></tr> <tr><td>MOV AX,40H </td><td>;устанавливаем сегмент</td></tr> <tr><td>MOV ES,AX </td><td>;</td></tr> <tr><td>POP AX </td><td>;возвращаем скан-код из стека</td></tr> <tr><td></td><td>;---проверка клавиши сдвига</td></tr> <tr><td>CMP AL,42 </td><td>;нажат левый сдвиг?</td></tr> <tr><td>JNE KEY_UP </td><td>;нет - смотрим следующее</td></tr> <tr><td>MOV BL,1 </td><td>;да - изменяем бит статуса</td></tr> <tr><td>OR ES:[17H],BL </td><td>;меняем прямо регистр статуса</td></tr> <tr><td>JMP QUIT </td><td>;выход из процедуры</td></tr> <tr><td>KEY_UP: CMP AL,170 </td><td>;левый сдвиг отпущен?</td></tr> <tr><td>JNE NEXTKEY </td><td>;нет - смотрим следующее</td></tr> <tr><td>MOV BL,11111110B </td><td>;да - меняем бит статуса</td></tr> <tr><td>AND ES:[17H],BL </td><td>;меняем прямо регистр статуса</td></tr> <tr><td>JMP QUIT </td><td>;выход из процедуры</td></tr> <tr><td>NEXTKEY: </td><td>;просмотр других переключателей</td></tr> <tr><td></td><td>;---это символьная клавиша - интерпретируем скан-код</td></tr> <tr><td>TEST AL,10000000B </td><td>;код освобождения клавиши?</td></tr> <tr><td>JNZ QUIT </td><td>;да - выходим из процедуры</td></tr> <tr><td>MOV BL,ES:[17H] </td><td>;иначе берем байт статуса</td></tr> <tr><td>TEST BL,00000011B </td><td>;клавиша сдвига нажата?</td></tr> <tr><td>JZ CONVERT_CODE </td><td>;нет - уходим дальше</td></tr> <tr><td>ADD AL,100 </td><td>;да - значит заглавная буква</td></tr> <tr><td>CONVERT_CODE: MOV BX,OFFSET TABLE </td><td>;готовим таблицу</td></tr> <tr><td>XLAT TABLE </td><td>;преобразуем скан-код в ASCII</td></tr> <tr><td>CMP AL,0 </td><td>;возвращен 0?</td></tr> <tr><td>JE QUIT </td><td>;если да, то на выход</td></tr> <tr><td></td><td>;---код клавиши готов, проверяем не полон ли буфер клавиатуры</td></tr> <tr><td>MOV BX,1AH </td><td>;смещение указателя на голову</td></tr> <tr><td>MOV CX,ES:[BX] </td><td>;получаем его значение</td></tr> <tr><td>MOV DI,ES:[BX]+2 </td><td>;получаем указатель хвоста</td></tr> <tr><td>CMP CX,60 </td><td>;голова на вершине буфера?</td></tr> <tr><td>JE HIGH_END </td><td>;да - переходим к спец. случаю</td></tr> <tr><td>INC CX </td><td>;увеличиваем указатель головы</td></tr> <tr><td>INC CX </td><td>;на 2</td></tr> <tr><td>CMP CX,DI </td><td>;сравниваем с указателем хвоста</td></tr> <tr><td>JE QUIT </td><td>;если равны, то буфер полон</td></tr> <tr><td>JMP GO_AHEAD </td><td>;иначе вставляем символ</td></tr> <tr><td>HIGH_END: CMP DI,30 </td><td>;проверка спец. случая</td></tr> <tr><td>JE QUIT </td><td>;если буфер полон, то выход</td></tr> <tr><td></td><td>;---буфер не полон - вставляем в него символ</td></tr> <tr><td>GO_AHEAD: MOV ES:[DI],AL </td><td>;помещаем символ в позицию хвоста</td></tr> <tr><td>CMP DI,60 </td><td>;хвост в конце буфера?</td></tr> <tr><td>JNE NO_WRAP </td><td>;если нет, то добавляем 2</td></tr> <tr><td>MOV DI,28 </td><td>;иначе указатель хвоста = 28+2</td></tr> <tr><td>NO_WRAP: ADD DI,2 </td><td>;получаем новое значение хвоста</td></tr> <tr><td>MOV ES:[BX]+2,DI </td><td>;посылаем его в область данных</td></tr> <tr><td></td><td>;---завершение прерывания</td></tr> <tr><td>QUIT: POP ES </td><td>;восстанавливаем изменяемые</td></tr> <tr><td>POP DI </td><td>;регистры</td></tr> <tr><td>POP CX </td><td>;</td></tr> <tr><td>POP BX </td><td>;</td></tr> <tr><td>POP AX </td><td>;</td></tr> <tr><td>MOV AL,20H </td><td>;выдаем сигнал об окончании</td></tr> <tr><td>OUT 20H,AL </td><td>;аппаратного прерывания</td></tr> <tr><td>IRET </td><td>;возврат из прерывания</td></tr> <tr><td>NEW_KEYBOARD ENDP</td><td></td></tr> </table> <hr><p align="center">
<~-<a href="318.htm">3.1.8 Hаписание процедуры ввода с клавиатуры общего назначения.</a><br><a href="index.htm#header">Содержание</a><br><a href="320.htm">Раздел 2. Доступ к отдельным клавишам.</a>-~>
</p></body></html>
