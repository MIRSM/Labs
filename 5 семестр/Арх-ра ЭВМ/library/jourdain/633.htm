<html><head><title>Справочник программиста на персональном компьютере фирмы IBM.Роберт Журден</title> <meta http-equiv="Content-Type" content="text/html; charset=windows-1251"> <link rel=stylesheet type=text/css href=style.css> </head><body> <p class="hdr1">Глава 6. Принтер.</p> <p class="hdr2">Раздел 2. Установка спецификаций печати.</p> <p class="hdr3">6.3.3 Пропорциональная печать.</p> <p> Вообще говоря, пропорциональная печать требует специального принтера, который хранит в ПЗУ информацию о ширине каждого символа. Цветной принтер IBM имеет режим пропорциональной печати, который включается последовательностью 27,78,1, а выключается 27,78,0. Программа, которая форматирует вывод на такой принтер, должна знать информацию о ширине каждого символа (ее можно найти в документации). Имея эту информацию, она может вычислить сколько слов поместится на одной строке. <p> Имейте ввиду, что некоторые матричные принтеры автоматически выводят пропорциональный текст в режиме за два прохода. Если слова в строке разделяются добавочными пробелами в графическом режиме, то принтер может переходить ко второму проходу после печати каждого слова, вместо того, чтобы повторить сразу всю строку. Поскольку принтеры относительно медленно меняют направление перемещения печатающей головки, то в этом случае печать текста, выравненного по правому краю, в пропорциональном режиме может занимать очень много времени и оказывается непосильной ношей для принтера. Эта проблема не возникает при однонаправленной пропорциональной печати. Отметим, что цветной принтер IBM может автоматически комбинировать пропорциональную печать с автоматическим выравниванием правого края, что делает специальное программирование ненужным. <p> Изощренные программисты могут заставить любой графический принтер печатать в пропорциональном режиме. Программа должна иметь в памяти картину битов для каждого символа (см. {<a href="634.htm">6.3.4</a>}). Вместо того, чтобы посылать на принтер код ASCII, который вызывает изображение символа из ПЗУ, используется данная цепочка битов для создания графического изображения строки текста. Затем вся нужная строка данных выводится на принтер в графическом режиме. Этот подход расходует много памяти на хранение графических образов символов, однако он позволяет полностью контролировать выводимое изображение. <p> Hизкий уровень. <p> Программа на языке ассемблера должна работать совершенно аналогично приведенному бейсиковскому примеру. Одно из преимуществ ассемблера состоит в том, что для просмотра ширин символов можно использовать инструкцию XLAT. Поместите символ в AL, DS:DX должны указывать на таблицу, после чего можно использовать XLAT. Ширина символа будет возвращена в AL: <table align="center"> <tr><td></td><td>;---просмотр ширин символов</td></tr> <tr><td>LEA SI,DATA_BUFFER </td><td>;указываем на буфер данных</td></tr> <tr><td>LEA BX,WIDTH_TABLE </td><td>;указываем на таблицу ширин</td></tr> <tr><td>MOV AL,[SI] </td><td>;получаем байт данных</td></tr> <tr><td>XLAT WIDTH_TABLE </td><td>;теперь его ширина в AL</td></tr> </table> <hr><p align="center">
<~-<a href="632.htm">6.3.2 Выравнивание правого поля.</a><br><a href="index.htm#header">Содержание</a><br><a href="634.htm">6.3.4 Печать специальных символов.</a>-~>
</p></body></html>
