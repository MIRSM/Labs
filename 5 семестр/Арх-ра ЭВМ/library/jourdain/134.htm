<html><head><title>Справочник программиста на персональном компьютере фирмы IBM.Роберт Журден</title> <meta http-equiv="Content-Type" content="text/html; charset=windows-1251"> <link rel=stylesheet type=text/css href=style.css> </head><body> <p class="hdr1">Глава 1. Системные ресурсы.</p> <p class="hdr2">Раздел 3. Управление программами.</p> <p class="hdr3">1.3.4 Сохранение программы в памяти после завершения.</p> <p> Программы, оставленные резидентными в памяти, могут служить в качестве утилит для других программ. Обычно такие программы вызываются через неиспользуемый вектор прерывания. MS DOS рассматривает такие программы как часть операционной системы, защищая их от наложения других программ, которые будут загружены впоследствии. Резидентные программы обычно пишутся в форме COM, что обсуждается в пункте {<a href="136.htm">1.3.6</a>}. Программы, написанные в форме EXE оставить резидентными в памяти немного труднее. <p> Завершение программы прерыванием 27H оставляет ее резидентной в памяти. CS должен указывать на начало PSP для того, чтобы эта функция работала правильно. В программах COM, CS сразу устанавливается соответствующим образом, поэтому надо просто завершить программу прерыванием 27H. В программах EXE , CS первоначально указывает на первый байт, следующий за PSP (т.е. 100H). При нормальном завершении EXE программы последняя инструкция RET выталкивает из стека первые положенные туда значения: PUSH DX / MOV AX,0 / PUSH AX. Поскольку DS первоначально указывает на начало PSP, то при получении этих значений из стека счетчик команд указывает на смещение 0 в PSP, где при инициализации записывается инструкция INT 20H. Поэтому INT 20H выполняется, а это стандартная функция для завершения программы и передачи управления в DOS. Hа рис. 1-5 показан этот процесс. Чтобы заставить прерывание 27H работать в EXE программе надо поместить 27H во второй байт PSP (первый содержит машинный код инструкции INT), а затем завершить программу обычным RET. Для обоих типов файлов прежде чем выполнить прерывание 27H, DX должен содержать смещение конца программы, отсчитываемое от начала PSP. <p> Средний уровень. <p> Вектор прерывания устанавливается с помощью функции 25H прерывания 21H, как показано в {<a href="123.htm">1.2.3</a>} (здесь используется вектор 70H). Позаботьтесь, чтобы процедура оканчивалась IRET. Kроме самой процедуры, устанавливаемая программа не должна делать ничего, кроме инициализации вектора прерывания, присвоения DX значения смещения конца процедуры и завершения. Для COM файлов просто поместите оператор INT 27H в конец программы. Для EXE файлов поместите этот оператор в первое слово PSP и завершите программу обычным оператором RET. Для того чтобы выполнить процедуру, впоследствии загруженная программа должна вызвать INT 70H. <p> Приведены примеры для обоих типов файлов (COM и EXE). В обоих установлена метка FINISH для отметки конца процедуры прерывания (напоминаем, что знак $ дает значение счетчика команд в этой точке). Для COM файлов FINISH дает смещение от начала PSP, как и требуется для прерывания 27H. Для EXE файлов смещение отсчитывается от первого байта, следующего за PSP, поэтому к нему необходимо прибавить 100H, чтобы пересчитать на начало PSP. Заметим, что поместив процедуру в начало программы, мы можем исключить установочную часть кода из резидентной порции. Другой возможный фокус состоит в использовании инструкции MOVSB для пересылки кода процедуры вниз в неиспользуемую часть PSP, начиная со смещения 60H, что освобождает 160 байт памяти. <p> Случай файла COM: <table align="center"> <tr><td></td><td>;---здесь процедура прерывания</td></tr> <tr><td>BEGIN: JMP SHORT SET_UP </td><td>;переход на установку</td></tr> <tr><td>ROUTINE PROC FAR</td><td></td></tr> <tr><td>PUSH DS </td><td>;сохранение регистров</td></tr> <tr><td>.</td><td></td></tr> <tr><td>(процедура)</td><td></td></tr> <tr><td>.</td><td></td></tr> <tr><td>POP DS </td><td>;восстановление регистров</td></tr> <tr><td>IRET </td><td>;возврат из прерывания</td></tr> <tr><td>FINISH EQU $ </td><td>;отметка конца процедуры</td></tr> <tr><td>ROUTINE ENDP</td><td></td></tr> <tr><td></td><td></td></tr> <tr><td></td><td>;---установка вектора прерывания</td></tr> <tr><td>SET_UP: MOV DX,OFFSET ROUTINE </td><td>;смещение процедуры в DX</td></tr> <tr><td>MOV AL,70H </td><td>;номер вектора прерывания</td></tr> <tr><td>MOV AH,25H </td><td>;функция установки вектора</td></tr> <tr><td>INT 21H </td><td>;устанавливаем вектор</td></tr> <tr><td></td><td>;---завершение программы, оставляя резидентной</td></tr> <tr><td>LEA DX,FINISH </td><td>;определяем треб. смещение</td></tr> <tr><td>INT 27H </td><td>;завершение</td></tr> </table> <p> Случай файла EXE: <table align="center"> <tr><td></td><td>;---здесь резидентная процедура</td></tr> <tr><td>JMP SHORT SET_UP </td><td>;переход на установку</td></tr> <tr><td>ROUTINE PROC FAR</td><td></td></tr> <tr><td>PUSH DS </td><td>;сохранение регистров</td></tr> <tr><td>.</td><td></td></tr> <tr><td>(процедура)</td><td></td></tr> <tr><td>.</td><td></td></tr> <tr><td>POP DS </td><td>;восстановление регистров</td></tr> <tr><td>IRET </td><td>;возврат из прерывания</td></tr> <tr><td>FINISH EQU $ </td><td>;отметка конца процедуры</td></tr> <tr><td>ROUTINE ENDP</td><td></td></tr> <tr><td></td><td></td></tr> <tr><td></td><td>;---установка вектора прерывания</td></tr> <tr><td>SET_UP: MOV DX,OFFSET ROUTINE </td><td>;смещение процедуры в DX</td></tr> <tr><td>MOV AX,SEG ROUTINE </td><td>;сегмент процедуры в DS</td></tr> <tr><td>MOV DS,AX </td><td>;</td></tr> <tr><td>MOV AL,70H </td><td>;номер вектора прерывания</td></tr> <tr><td>MOV AH,25H </td><td>;функция установки вектора</td></tr> <tr><td>INT 21H </td><td>;установка вектора</td></tr> <tr><td></td><td>;---завершение программы</td></tr> <tr><td>MOV DX,FINISH+100H </td><td>;вычисляем смещение конца</td></tr> <tr><td>MOV BYTE PTR ES:1,27H </td><td>;посылаем 27H в PSP</td></tr> <tr><td>RET </td><td>;завершаем процедуру</td></tr> </table> <p> Функция 31H прерывания 21H работает аналогично, за исключением того, что в DX должно содержаться число 16-байтных параграфов, требуемых процедуре (вычисление размера процедуры, начиная от начала PSP - см. в примере {<a href="131.htm">1.3.1</a>}). Преимуществом этой функции является то, что она передает родительской программе код выхода, дающий информацию о статусе процедуры. Родительская программа получает этот код с помощью функции 4DH прерывания 21H. Kоды выхода обсуждаются в {<a href="725.htm">7.2.5</a>}. <hr><p align="center">
<~-<a href="133.htm">1.3.3 Использование команд интерфейса с пользователем из программы.</a><br><a href="index.htm#header">Содержание</a><br><a href="135.htm">1.3.5 Загрузка и запуск программных оверлеев.</a>-~>
</p></body></html>
