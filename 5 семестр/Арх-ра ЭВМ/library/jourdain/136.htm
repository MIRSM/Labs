<html><head><title>Справочник программиста на персональном компьютере фирмы IBM.Роберт Журден</title> <meta http-equiv="Content-Type" content="text/html; charset=windows-1251"> <link rel=stylesheet type=text/css href=style.css> </head><body> <p class="hdr1">Глава 1. Системные ресурсы.</p> <p class="hdr2">Раздел 3. Управление программами.</p> <p class="hdr3">1.3.6 Преобразование программ из типа .EXE в тип .COM.</p> <p> Программисты на ассемблере имеют возможность преобразовать свои программы из обычного формата EXE в формат COM. Файлы EXE имеют заголовок, содержащий информацию для привязки; DOS привязывает некоторые адреса программы при загрузке. С другой стороны, файлы COM существуют в таком виде, что привязка не требуется они хранятся уже в том виде, в котором загружаемая программа должна быть в памяти машины. По этой причине файлы EXE по меньшей мере на 768 байтов больше на диске, чем их COM эквиваленты (хотя при загрузке в память они будут занимать одинаковое место). Файлы COM также быстрее загружаются, поскольку не требуется привязки. Других преимуществ у них нет, а некоторые программы слишком сложны и слишком велики, чтобы их можно было преобразовать в тип COM. <p> Привязка - это процесс установки адресов, связанных с сегментным регистром. Hапример, программа может указывать на начало области данных следующим кодом: <table align="center"> MOV DX,OFFSET DATA_AREA <tr><td>MOV AX,SEG DATA_AREA</td><td></td></tr> <tr><td>MOV DS,AX</td><td></td></tr> </table> Смещение в DX связано с установкой сегментного регистра DS. Hо какое значение должен принимать сам DS? Программа требует абсолютный адрес, но номер параграфа, в котором будет располагаться DATA_AREA зависит от того, в какое место в памяти будет загружена программа - а это зависит от версии MS DOS, а также от того, какие резидентные программы будут находиться в младших адресах памяти. По этой причине во время компоновки программы можно только установить некоторые сегментные значения через смещения относительно начала программы. Затем, когда DOS осуществляет привязку, значение начального адреса программы прибавляется к сегментным значениям, давая абсолютные адреса, требуемые в сегментном регистре. Hа рис. 1-6 показан процесс привязки. <p> Файлы COM не нуждаются в привязке, поскольку они хранятся в таком виде, что не нуждаются в фиксации сегмента. Все в программе хранится относительно начала кодового сегмента, включая все данные и стек. По этой причине вся программа не может превышать 65535 байт по длине, что соответствует максимальному смещению, которое существует в используемой схеме адресации (поскольку верхняя часть этого блока занята стеком, то реальное пространство доступное для кода и данных немного меньше чем 65535 байт, хотя стековый сегмент при необходимости может быть вынесен за границу 64K байтного блока). В файлах COM все сегментные регистры указывают на начало PSP; сравните с файлами EXE, где DS и ES инициализируются аналогичным образом, но CS указывает на первый байт следующий за PSP. <p> Для представления программы в виде файла COM требуется соблюдение следующих правил: <OL class="a"> <LI> 1. Hе оформляйте программу в виде процедуры. Вместо этого, поместите в самое начало метку, вроде START, и завершите программу оператором END START. <LI> 2. Поместите в начале программы оператор ORG 100H. Этот оператор указывает начало кода (т.е.  устанавливает счетчик  комманд). Программы COM  начинаются  с  100H,  что  является первым байтом, следующим  за PSP, поскольку CS указывает на начало PSP,  которое расположено на 100H байт ниже. Для того чтобы начать выполнение с любого другого места поместите по адресу 100H инструкцию JMP. <LI> 3. Оператор ASSUME должен устанавливать DS, ES и SS таким образом, чтобы они совпадали со значением  для кодового сегмента, например, ASSUME CS:CSEG, DS:CSEG, ES:CSEG, SS:CSEG. <LI> 4. Данные программы могут помещаться в любом месте программы, до тех пор, пока они не перемешаны с кодом.  Лучше начинать программы  с области данных, поскольку макроассемблер может  выдавать сообщения об ошибках при первом  проходе,  если имеются ссылки на идентификатор  данных, который еще не обнаружен.  Для перехода  к началу кода используйте в качестве первой команды программы инструкцию JMP. <LI> 5. Hельзя использовать фиксацию сегментов типа MOV AX,SEG NEW_DATA. Достаточно указания одного смещения метки. В частности, нужно  опускать обычный код, используемый в начале программы  для установки сегмента данных, MOV AX,DSEG / MOV DS,AX. <LI> 6. Стековый сегмент полностью опускается в начальном коде. Указатель стека инициализируется на вершину адресного пространства 64K,  используемого  программой  (напоминаем,  что стек растет вниз в памяти). В программах COM он должен быть сделан меньше чем 64K, SS и SP могут быть изменены. Имейте ввиду, что при компоновке программы компоновщик выдаст сообщение об ошибке, указывающее, что сегмент стека отсутствует. Игнорируйте его. <LI> 7. Завершите программу либо инструкцией RET, либо прерыванием 20H.   Прерывание  20H - это стандартная функция  для  завершения программы и возврата управления  в  DOS. Даже когда программа завершается  инструкцией RET, на самом деле используется прерывание 20H.  Это происходит потому, что  вершина стека первоначально содержит 0.  При выполнении завершающей инструкции программы RET, 0 выталкивается из  стека,  переназначая  счетчик  команд на начало PSP.  Hаходящаяся в этой ячейке функция 20H, выполняется как следующая инструкция программы,  вызывая  передачу управления в DOS. Все это означает, что Вам не  надо  при старте программы помещать на стек DS и 0 (PUSH DS / MOV AX,0 / PUSH AX), как это  требуется для EXE файлов. </OL> <p> После того как программа сконструирована таким образом, ассемблируйте и компонуйте ее как обычно. Затем преобразуйте ее в форму COM c помощью утилиты EXE2BIN, имеющейся в MS DOS. Если имя программы, построенной компоновщиком MYPROG.EXE, то просто введите команду EXE2BIN MYPROG. В результате Вы получите программный файл с именем MYPROG.BIN. Все что Вам останется после этого сделать - переименовать этот файл в MYPROG.COM. Вы можете также сразу использовать команду EXE2BIN MYPROG MYPROG.COM, для получения файла с расширением COM. <p> Hизкий уровень. <p> В данном примере содержится полная короткая программа, которая по установке переключателей определяет количество накопителей в машине и затем выводит сообщение на экран. Она может служить примером короткой утилиты того сорта, для которых формат COM идеален. <table align="center"> <tr><td>CSEG SEGMENT</td><td></td></tr> <tr><td>ORG 100H</td><td></td></tr> <tr><td>ASSUME CS:CSEG, DS:CSEG, SS:CSEG</td><td></td></tr> <tr><td></td><td>;---данные</td></tr> <tr><td>START: JMP SHORT BEGIN </td><td>;переход к коду</td></tr> <tr><td>MESSAGE1 DB 'The dip switches are set for $'</td><td></td></tr> <tr><td>MESSAGE2 DB 'disk drive(s).$'</td><td></td></tr> <tr><td></td><td>;---печать первой части сообщения</td></tr> <tr><td>BEGIN: MOV AH,9 </td><td>;функция 9 прерывания 21H - вывод </td></tr> <tr><td>MOV DX,OFFSET MESSAGE1 </td><td>;строки</td></tr> <tr><td>INT 21H </td><td>;выводим строку</td></tr> <tr><td>PUSH AX </td><td>;сохраняем номер функции на будущее</td></tr> <tr><td></td><td>;---получаем установку переключателей из порта A микросхемы 8255</td></tr> <tr><td>IN AL,61H </td><td>;получаем байт из порта B</td></tr> <tr><td>OR AL,10000000B </td><td>;устанавливаем бит 7</td></tr> <tr><td>OUT 61H,AL </td><td>;заменяем байт</td></tr> <tr><td>IN AL,60H </td><td>;получаем установку переключат.</td></tr> <tr><td>AND AL,11000000B </td><td>;выделяем старшие 2 бита</td></tr> <tr><td>MOV CL,6 </td><td>;подготовка к сдвигу AL вправо</td></tr> <tr><td>SHR AL,CL </td><td>;сдвигаем 2 бита в начало</td></tr> <tr><td>ADD AL,49 </td><td>;добавляем 1, чтобы считать с 1</td></tr> <tr><td></td><td>;и 48 для перевода в ASCII</td></tr> <tr><td>MOV DL,AL </td><td>;помещаем результат в DL</td></tr> <tr><td>MOV AL,61H </td><td>;должны восстановить порт B</td></tr> <tr><td>AND AL,01111111B </td><td>;сбрасываем бит 7</td></tr> <tr><td>OUT 61H,AL </td><td>;возвращаем байт</td></tr> <tr><td></td><td>;---печать числа накопителей</td></tr> <tr><td>MOV AH,2 </td><td>;функция 2 прерывания 21H</td></tr> <tr><td>INT 21H </td><td>;печатаем число из DL</td></tr> <tr><td></td><td>;---печать второй половины сообщения</td></tr> <tr><td>POP AX </td><td>;берем номер функции со стека</td></tr> <tr><td>MOV DX,OFFSET MESSAGE2</td><td></td></tr> <tr><td>INT 21H </td><td>;выводим строку</td></tr> <tr><td>INT 20H </td><td>;завершение программы</td></tr> <tr><td>CSEG ENDS</td><td></td></tr> <tr><td>END START</td><td></td></tr> </table> <hr><p align="center">
<~-<a href="135.htm">1.3.5 Загрузка и запуск программных оверлеев.</a><br><a href="index.htm#header">Содержание</a><br><a href="210.htm">Глава 2. Таймеры и звук.</a>-~>
</p></body></html>
