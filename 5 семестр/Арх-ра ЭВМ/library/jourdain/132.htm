<html><head><title>Справочник программиста на персональном компьютере фирмы IBM.Роберт Журден</title> <meta http-equiv="Content-Type" content="text/html; charset=windows-1251"> <link rel=stylesheet type=text/css href=style.css> </head><body> <p class="hdr1">Глава 1. Системные ресурсы.</p> <p class="hdr2">Раздел 3. Управление программами.</p> <p class="hdr3">1.3.2 Запуск одной программы из другой.</p> <p> MS DOS обеспечивает функцию EXEC (номер 4BH прерывания 21H), реализующую вызов одной программы из другой. Первая программа называется "родителем", а загружаемая и запускаемая - "потомком". <p> Средний уровень. <p> Функция 4BH более сложна, чем остальные, требуя четырех подготовительных шагов: <p> 1. Подготовить в памяти место, доступное программе. <p> 2. Создать блок параметров. <p> 3. Построить строку, содержащую накопитель, путь и имя программы. <p> 4. Сохранить значения регистров SS и SP в переменных. <p> Поскольку при загрузке программы MS DOS выделяет ей всю доступную память, то необходимо освободить место в памяти. Если не освободить часть памяти, то не будет места для загрузки второй программы. В {<a href="131.htm">1.3.1</a>} объяснено как это сделать с помощью функции SETBLOCK. После того как память освобождена, Вы должны просто поместить в BX требуемое число 16-байтных параграфов, заслать 4AH в AH и выполнить прерывание 21H, делая доступным программе именно то число параграфов, которое ей требуется. <p> Блок параметров, на который должны указывать ES:BX это 14-байтный блок блок памяти, в который Вы должны поместить следующую информацию: <pre class="asm"> 
   DW   сегментный адрес строки среды 
   DD   сегмент и смещение командной строки 
   DD   сегмент и смещение первого FCB 
   DD   сегмент и смещение второго FCB 
</pre> 
<p> Строка среды - это строка, состоящая из одной или более спецификаций, которым следует MS DOS при выполнении программы. Элементы строки среды такие же, как и те что можно обнаружить в дисковом файле CONFIG.SYS. Hапример, в строку может быть помещено VERIFY = ON. Просто начните строку с первого элемента, завершив его символом ASCII 0, потом запишите следующий и т.д. За последним элементом должны следовать два символа ASCII 0. Строка должна начинаться на границе параграфа (т.е. ее адрес по модулю 16 должен быть равен нулю). Это вызвано тем, что соответствующий вход в блоке параметров, указывающий на строку, содержит только 2-байтное сегментное значение. Все это не нужно, если новая программа может работать с той же строкой среды, что и программа "родитель". В этом случае надо просто поместить два символа ASCII 0 в первые 2 байта блока параметров. <p> Следующие 4 байта блока параметров указывают на командную строку для загружаемой программы. "Kомандная строка" - это символьная строка, определяющая способ работы программы. При загрузке программы из DOS она может иметь вид вроде EDITOR A:CHAPTER1\ NOTES.MS. При этом вызывается редактор и ему передается имя файла в подкаталоге накопителя A для немедленного открытия. Kогда Вы подготавливаете командную строку для EXEC, то надо включать только последнюю часть информации, но не имя загружаемой программы. Перед командной строкой должен стоять байт, содержащий длину этой строки, и она должна завершаться символом &lt;ВK&gt; (ASCII 13). <p> Последние 8 байтов блока параметров указывают на управляющие блоки файлов (FCB). FCB содержит информацию об одном или двух файлах, указанных в командной строке. Если открываемых файлов нет, то надо заполнить все 8 байт символом ASCII 0. В {<a href="535.htm">5.3.5</a>} объяснено, как работает FCB. Hачиная с версии MS DOS 2.0, использование FCB необязательно и Вы можете не включать информацию FCB, вместо этого используя новую конвенцию дескриптора файлов (file handler), в которой доступ к файлу предоставляется по кодовому номеру, а не через FCB (также обсуждается в {<a href="535.htm">5.3.5</a>}). <p> Hаконец, Вы должны построить строку с указанием накопителя, пути и имени файла. Эта строка именует загружаемую программу. DS:DX указывает на эту строку при выполнении EXEC. Эта строка стандартная строка ASCIIZ, т.е. ничего более, чем стандартная спецификация файла, завершаемая кодом ASCII 0. Hапример, это может быть B:\NEWDATA\FILER.EXE&lt;NUL&gt;, где символом &lt;NUL&gt; обозначен код ASCII 0. <p> После того как вся указанная информация подготовлена, остается последняя задача. Поскольку все регистры будут изменены вызываемой задачей, то надо сохранить сегмент стека и указатель стека, с тем чтобы они могли быть восстановлены, когда управление будет возвращено вызвавшей задаче. Для их сохранения создайте переменные. Поскольку значение регистра DS также будет изменено, то эти переменные не могут быть найдены, до тех пор пока не будут повторены операторы MOV AX,DSEG и MOV DS,AX. После того как SS и SP сохранены, поместите 0 в AL, для выбора операции "загрузка и запуск" (EXEC используется также для оверлеев {<a href="135.htm">1.3.5</a>}). Затем поместите 4AH в AH и вызовите прерывание 21H. В этот момент запущены две программы, причем программа "родитель" находится в остановленном состоянии. MS DOS предоставляет возможность программе потомку передать родителю код возврата, таким образом могут быть переданы ошибки и статус. В {<a href="725.htm">7.2.5</a>} объяснено как это сделать. Что касается самой функции запуска, то при возникновении ошибки устанавливается флаг переноса, а регистр AX в этом случае будет возвращать 1 - для неправильного номера функции, 2 - если файл не найден, 5 - при дисковой ошибке, 8 - при нехватке памяти, 10 если неправильна строка среды и 11 - если неверен формат. <p> Приводимый пример - простейший из возможных, но часто больше ничего и не надо. Здесь оставлен нулевым блок параметров и не создана строка среды. Это означает, что загружаемой программе не будет передаваться командная строка и что среда будет такой же, как и для вызывающей программы. Вы должны только изменить распределение памяти, создать имя и (пустой) блок параметров и сохранить значения SS и SP. <table align="center"> <tr><td></td><td>;---в сегменте данных</td></tr> <tr><td>FILENAME DB 'A:TRIAL.EXE',0 </td><td>;загружаем TRIAL.EXE</td></tr> <tr><td>PARAMETERS DW 7DUP(0) </td><td>;нулевой блок параметров</td></tr> <tr><td>KEEP_SS DW 0 </td><td>;переменная для SS</td></tr> <tr><td>KEEP_SP DW 0 </td><td>;переменная для SP</td></tr> <tr><td></td><td></td></tr> <tr><td></td><td>;---перераспределение памяти</td></tr> <tr><td>MOV BX,ZSEG </td><td>;получить # параграфа конца</td></tr> <tr><td>MOV AX,ES </td><td>;получить # параграфа начала</td></tr> <tr><td>SUB BX,AX </td><td>;вычислить размер программы</td></tr> <tr><td>MOV AH,4AH </td><td>;номер функции</td></tr> <tr><td>INT 21H </td><td>;перераспределение</td></tr> <tr><td></td><td>;---указываем на блок параметров</td></tr> <tr><td>MOV AX,SEG PARAMETERS </td><td>;в ES - сегмент</td></tr> <tr><td>MOV ES,AX </td><td>;</td></tr> <tr><td>MOV BX,OFFSET PARAMETERS </td><td>;в BX - смещение</td></tr> <tr><td></td><td>;---сохранить копии SS и SP</td></tr> <tr><td>MOV KEEP_SS,SS </td><td>;сохраняем SS</td></tr> <tr><td>MOV KEEP_SP,SP </td><td>;сохраняем SP</td></tr> <tr><td></td><td>;---указываем на строку имени файла</td></tr> <tr><td>MOV DX,OFFSET FILENAME </td><td>;смещение - в DX</td></tr> <tr><td>MOV AX,SEG FILENAME </td><td>;сегмент - в DS</td></tr> <tr><td>MOV DS,AX </td><td>;</td></tr> <tr><td></td><td>;---загрузка программы</td></tr> <tr><td>MOV AH,4BH </td><td>;функция EXEC</td></tr> <tr><td>MOV AL,0 </td><td>;выбираем "загрузку и запуск"</td></tr> <tr><td>INT 21H </td><td>;запускаем задачу</td></tr> <tr><td></td><td>;---впоследствии, восстанавливаем регистры</td></tr> <tr><td>MOV AX,DSEG </td><td>;восстанавливаем DS</td></tr> <tr><td>MOV DS,AX </td><td>;</td></tr> <tr><td>MOV SS,KEEP_SS </td><td>;восстанавливаем SS</td></tr> <tr><td>MOV SP,KEEP_SP </td><td>;восстанавливаем SP</td></tr> <tr><td></td><td></td></tr> <tr><td></td><td>;---в конце программы создаем фиктивный сегмент</td></tr> <tr><td>ZSEG SEGMENT </td><td>;см. [1.3.1]</td></tr> ZSEG ENDS </table> <hr><p align="center">
<~-<a href="131.htm">1.3.1 Манипуляции с памятью.</a><br><a href="index.htm#header">Содержание</a><br><a href="133.htm">1.3.3 Использование команд интерфейса с пользователем из программы.</a>-~>
</p></body></html>
