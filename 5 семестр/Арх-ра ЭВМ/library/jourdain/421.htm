<html><head><title>Справочник программиста на персональном компьютере фирмы IBM.Роберт Журден</title> <meta http-equiv="Content-Type" content="text/html; charset=windows-1251"> <link rel=stylesheet type=text/css href=style.css> </head><body> <p class="hdr1">Глава 4. Вывод на терминал.</p> <p class="hdr2">Раздел 2. Управление курсором.</p> <p class="hdr3">4.2.1 Установка курсора в абсолютную позицию.</p> <p> Для курсора могут быть установлены абсолютные координаты или координаты относительно его текущей позиции {<a href="422.htm">4.2.2</a>}. Абсолютные координаты могут меняться в пределах 25 строк и 80 (иногда 40) столбцов. Языки высокого уровня обычно отсчитывают координаты экрана, начиная с 1, и таким образом позиция левого верхнего угла 1,1. Язык ассемблера всегда начинает отсчет с нуля и позиция левого верхнего угла 0,0. <p> Средний уровень. <p> Операционная система предоставляет два способа позиционирования курсора в абсолютную позицию на экране. Функция 2 прерывания 10H устанавливает курсор, относящийся к указанной странице памяти. Страницы нумеруются начиная с нуля и для монохромного дисплея номер страницы (находящийся в BH) должен всегда быть равным 0. DH:DL содержат строку и столбец, которые тоже нумеруются с 0. Kурсор меняет свое положение на экране только если установка курсора относится к текущей активной странице. <table align="center"> <tr><td></td><td>;---установка курсора в строку 13, столбец 39</td></tr> <tr><td>MOV AH,2 </td><td>;номер функции</td></tr> <tr><td>MOV BH,0 </td><td>;номер страницы</td></tr> <tr><td>MOV DH,13 </td><td>;строка</td></tr> <tr><td>MOV DL,39 </td><td>;столбец</td></tr> <tr><td>INT 10H </td><td>;позиционируем курсор</td></tr> </table> <p> Второй метод позиционирования курсора состоит в использовании специального драйвера устройства ANSI.SYS, который должен быть загружен при старте системы. В приложении Д даны необходимые сведения. Для вывода строки, содержащей информацию о строке и столбце используется функция 9 прерывания 21H. Строка начинается с символа Esc (ASCII 27), а завершается символом ограничителем $. Формат строки Esc[строка,столбецH$, где строка и столбец нумеруются от нуля, а Esc обозначает код ASCII 27. Hапример, строка 27,'10;60H$' устанавливает курсор в строку 10, столбец 60. <p> Хотя такой метод кажется излишне сложным, но он оказывается очень удобным при выводе ряда строк на экран, так как Esc-последовательность обрабатывается как одна из строк набора. В данном примере три строки сообщения разбросаны по всему экрану. <table align="center"> <tr><td></td><td>;---в сегменте данных</td></tr> <tr><td>POSITION_1 DB 27,'[10</td><td>;30H$'</td></tr> <tr><td>STRING_1 DB 'There are two options:$'</td><td></td></tr> <tr><td>POSITION_2 DB 27,'[13</td><td>;32H$'</td></tr> <tr><td>STRING_2 DB '(1) Review part 1$'</td><td></td></tr> <tr><td>POSITION_3 DB 27,'[15</td><td>;32H$'</td></tr> <tr><td>STRING_3 DB '(2) Move on to part 2$'</td><td></td></tr> <tr><td></td><td>;---печать строк</td></tr> <tr><td>MOV AH,9 </td><td>;номер функции вывода строки</td></tr> <tr><td>LEA DX,POSITION_1 </td><td>;1-я строка позиционирования курсора</td></tr> <tr><td>INT 21H </td><td>;позиционируем курсор</td></tr> <tr><td>LEA DX,STRING_1 </td><td>;1-я текстовая строка</td></tr> <tr><td>INT 21H </td><td>;вывод строки</td></tr> <tr><td>LEA DX,POSITION_2 </td><td>;и т.д.</td></tr> <tr><td>INT 21H </td><td>;</td></tr> <tr><td>LEA DX,STRING_2 </td><td>;</td></tr> <tr><td>INT 21H </td><td>;</td></tr> <tr><td>LEA DX,POSITION_3 </td><td>;</td></tr> <tr><td>INT 21H </td><td>;</td></tr> <tr><td>LEA DX,STRING_3 </td><td>;</td></tr> <tr><td>INT 21H </td><td>;</td></tr> </table> <p> Hизкий уровень. <p> Регистры 14 и 15 микросхемы 6845 хранят положение курсора. Вы можете изменить их значение и курсор передвинется в соответствующую позицию экрана, но прерывания вывода на экран DOS и BIOS будут игнорировать Вашу установку и вернут курсор в старое положение. Это происходит потому, что каждый раз при вызове этих прерываний, они восстанавливают регистры курсора, используя 2-байтное значение, хранящееся в области данных BIOS. В этой области, начиная с адреса 0040:0050, могут находиться до восьми таких значений, давая текущее положение курсора для каждой из страниц дисплея. Процедура низкого уровня должна модифицировать и эти значения, чтобы изменить состояние курсора полностью. <p> Позиция курсора хранится в регистрах 14 и 15 как число от 0 до 1999, что соответствует 2000 (25*80) позициям экрана. Hе спутайте эту систему нумерации с позициями видеобуфера от 0 до 3999, где каждый символ сопровождается еще байтом атрибутов (для получения эквивалентного указателя на позицию курсора надо сдвинуть указатель видеобуфера на 1 бит вправо). Обращаем также Ваше внимание,  на то, что не надо менять местами старший и младший байты: в регистре 14 - старший, а 15 - младший. <table align="center"> <tr><td></td><td>;---в программе</td></tr> <tr><td>MOV BL,24 </td><td>;строка в BL (0-24)</td></tr> <tr><td>MOV BH,79 </td><td>;столбец в BH (0-79)</td></tr> <tr><td>CALL SET_CURSOR </td><td>;вызов процедуры</td></tr> <tr><td></td><td></td></tr> <tr><td></td><td>;---процедура установки курсора</td></tr> <tr><td>SET_CURSOR PROC</td><td></td></tr> <tr><td></td><td>;получаем доступ к регистру младшего байта</td></tr> <tr><td>MOV DX,3B4H </td><td>;порт адресного регистра 6845</td></tr> <tr><td>MOV AL,15 </td><td>;выбираем регистр 15</td></tr> <tr><td>OUT DX,AL </td><td>;посылаем запрос</td></tr> <tr><td></td><td>;вычисление позиции курсора</td></tr> <tr><td>MOV AL,80 </td><td>;умножаем номер строки на 80</td></tr> <tr><td>MUL BL </td><td>;в AX - номер строки, умноженный на 80</td></tr> <tr><td>MOV BL,BH </td><td>;переносим номер столбца в BL</td></tr> <tr><td>SUB BH,BH </td><td>;распространяем BL на BX</td></tr> <tr><td>ADD AX,BX </td><td>;вычисляем позицию курсора</td></tr> <tr><td></td><td>;посылаем младший байт результата</td></tr> <tr><td>INC DX </td><td>;адресуем управляющий регистр</td></tr> <tr><td>OUT DX,AL </td><td>;посылаем младший байт</td></tr> <tr><td></td><td>;получаем доступ к регистру старшего байта</td></tr> <tr><td>MOV AL,14 </td><td>;номер требуемого регистра</td></tr> <tr><td>DEC DX </td><td>;восстанавливаем порт адресного регистра</td></tr> <tr><td>OUT DX,AL </td><td>;посылаем запрос</td></tr> <tr><td></td><td>;посылаем старший байт результата</td></tr> <tr><td>INC DX </td><td>;адресуем управляющий регистр</td></tr> <tr><td>MOV AL,AH </td><td>;помещаем старший байт в AL</td></tr> <tr><td>OUT DX,AL </td><td>;посылаем старший байт</td></tr> <tr><td>RET</td><td></td></tr> <tr><td>SET_CURSOR ENDP</td><td></td></tr> </table> <hr><p align="center">
<~-<a href="420.htm">Раздел 2. Управление курсором.</a><br><a href="index.htm#header">Содержание</a><br><a href="422.htm">4.2.2 Относительное позиционирование курсора</a>-~>
</p></body></html>
