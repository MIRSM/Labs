<html><head><title>Справочник программиста на персональном компьютере фирмы IBM.Роберт Журден</title> <meta http-equiv="Content-Type" content="text/html; charset=windows-1251"> <link rel=stylesheet type=text/css href=style.css> </head><body> <p class="hdr1">Глава 4. Вывод на терминал.</p> <p class="hdr2">Раздел 1. Управление выводом на терминал.</p> <p class="hdr3">4.1.5 Очистка части/всего экрана.</p> <p> Очистка экрана состоит просто в записи пробела в каждую из позиций экрана (код ASCII - 32). Однако, если при выводе на экран были использованы ненормальные атрибуты, то должны быть также изменены и байты атрибутов. Операционная система обеспечивает простой способ очистки только части экрана. <p> Средний уровень. <p> Операционная система предоставляет несколько способов очистки экрана. Kакой из них Вы выберете зависит от того, какие средства требуются программе для достижения других целей. Первый метод это просто сброс режима дисплея, используя функцию 0 прерывания 10H {<a href="412.htm">4.1.2</a>}. Для символьного экрана каждая позиция заполняется пробелом (ASCII 32), а все атрибуты устанавливаются нормальными (ASCII 7). Обычно этот метод хорош только в начале программы, когда все равно надо устанавливать режим работы дисплея. Для цветного графического адаптора и PCjr реинициализация режима дисплея приводит к катавасии на экране. Этот эффект отсутствует у монохромного адаптора и EGA. <table align="center"> <tr><td></td><td>;---очистка экрана путем установки нового режима</td></tr> <tr><td>MOV AH,0 </td><td>;номер функции установки режима дисплея</td></tr> <tr><td>MOV AL,2 </td><td>;код режима 80*25 черно-белого</td></tr> <tr><td>INT 10H </td><td>;очистка экрана</td></tr> </table> <p> Второй метод состоит в использовании функций 6 и 7 прерывания 10H, которые сдвигают экран. Число строк, на которое надо сдвинуть экран помещается в AL и когда это число равно нулю экран очищается. Прерывание позволяет сдвигать только часть экрана, поэтому таким образом можно очистить отдельное окно на экране. Hадо поместить координаты левого верхнего угла окна в CX, а координаты правого нижнего угла в DX (номер строки в CH/DH, а номер столбца в CL/DL). Поместите атрибут, с которым должен чиститься экран в BH. Kоординаты отсчитываются от 0. <table align="center"> <tr><td></td><td>;---очистка окна между 3,4 и 13,15</td></tr> <tr><td>MOV AH,6 </td><td>;используем процедуру сдвига</td></tr> <tr><td>MOV AL,0 </td><td>;число строк сдвига делаем равным нулю</td></tr> <tr><td>MOV BH,7 </td><td>;байт атрибутов для заполнения</td></tr> <tr><td>MOV CH,3 </td><td>;строка для верхнего левого угла</td></tr> <tr><td>MOV CL,4 </td><td>;столбец для левого верхнего угла</td></tr> <tr><td>MOV DH,13 </td><td>;строка для нижнего левого угла</td></tr> <tr><td>MOV DL,15 </td><td>;столбец для нижнего левого угла</td></tr> <tr><td>INT 10H </td><td>;чистим окно</td></tr> </table> <p> Третий метод заключается в использовании фукнции 9 прерывания 10H; которая выводит символ и атрибуты столько раз, сколько указано в CX. Значение 2000 чистит весь экран, если курсор был установлен в 0,0, используя метод показанный в {<a href="421.htm">4.2.1</a>}. AH должен содержать символ пробела, AL - байт атрибутов, а BH - номер страницы дисплея. <table align="center"> <tr><td></td><td>;---установка курсора в левый верхний угол экрана</td></tr> <tr><td>MOV AH,2 </td><td>;функция установки курсора</td></tr> <tr><td>MOV BH,0 </td><td>;номер страницы</td></tr> <tr><td>MOV DX,0 </td><td>;координаты 0,0</td></tr> <tr><td>INT 10H </td><td>;устанавливаем курсор</td></tr> <tr><td></td><td>;---вывод символа пробела 2000 раз</td></tr> <tr><td>MOV AH,9 </td><td>;номер функции</td></tr> <tr><td>MOV CX,2000 </td><td>;число повторений вывода</td></tr> <tr><td>MOV AL,' ' </td><td>;символ пробела в AL</td></tr> <tr><td>MOV BL,7 </td><td>;атрибуты в BL</td></tr> <tr><td>INT 10H </td><td>;очистка экрана</td></tr> </table> <p> Hаконец, DOS обеспечивает очистку экрана с помощью специальных Esc-последовательностей, которые работают с драйвером ANSI.SYS. Основные сведения о нем приведены в приложении Д. Эти последовательности - это строки, начинающиеся с символа Esc, а завершающиеся ограничителем $. Такие строки выводятся функцией 9 прерывания 21H, при этом DS:DX должны указывать на первый символ строки. DOS интерпретирует строку не выводя ее на дисплей. Чтобы стереть весь экран строка должна быть [2J. Чтобы стереть конец строки, начиная от позиции курсора (включая эту позицию), строка [K. <table align="center"> <tr><td></td><td>;---в сегменте данных</td></tr> <tr><td>CLEAR_LINE DB 27,'[K$'</td><td></td></tr> <tr><td></td><td></td></tr> <tr><td></td><td>;---очистка конца строки, начиная от позиции курсора</td></tr> <tr><td>MOV AH,9 </td><td>;функция вывода строки</td></tr> <tr><td>LEA DX,CLEAR_LINE </td><td>;DX должен указывать на начало строки</td></tr> <tr><td>INT 21H </td><td>;стираем конец строки</td></tr> </table> <p> Hизкий уровень. <p> Hа низком уровне надо просто поместить символы пробела и требуемый байт атрибутов в память дисплея, используя инструкцию STOSW. Вот пример для монохромного дисплея: <table align="center"> <tr><td>MOV AX,0B000H </td><td>;указываем на память дисплея</td></tr> <tr><td>MOV ES,AX </td><td>;</td></tr> <tr><td>MOV DI,0 </td><td>;DI указывает на начало буфера</td></tr> <tr><td>MOV AL,32 </td><td>;символ пробела</td></tr> <tr><td>MOV AH,7 </td><td>;нормальные атрибуты</td></tr> <tr><td>MOV CX,2000 </td><td>;число повторений</td></tr> <tr><td>REP STOSW </td><td>;посылаем AX в ES:DI 2000 раз</td></tr> </table> <hr><p align="center">
<~-<a href="414.htm">4.1.4 Установка цвета границы экрана.</a><br><a href="index.htm#header">Содержание</a><br><a href="416.htm">4.1.6 Переключение между видеоадапторами.</a>-~>
</p></body></html>
