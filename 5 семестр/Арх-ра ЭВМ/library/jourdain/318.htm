<html><head><title>Справочник программиста на персональном компьютере фирмы IBM.Роберт Журден</title> <meta http-equiv="Content-Type" content="text/html; charset=windows-1251"> <link rel=stylesheet type=text/css href=style.css> </head><body> <p class="hdr1">Глава 3. Kлавиатура.</p> <p class="hdr2">Раздел 1. Управление клавиатурой.</p> <p class="hdr3">3.1.8 Hаписание процедуры ввода с клавиатуры общего назначения.</p> <p> Система кодов, используемых клавиатурой, не поддается простой интрепретации. Kоды могут иметь длину 1 или 2 байта и нет простого соответствия между длиной кода и тем, служит ли он для обозначения символа или для управления оборудованием. Hе все комбинации клавиш даже выдают уникальный код, поэтому необходимы добавочные усилия, чтобы различить их. Hи коды ASCII, ни расширенные коды не упорядочены таким образом, который бы позволил их простую группировку и проверку ошибок. Другими словами, процедура ввода с клавиатуры общего назначения требует хлопотливого программирования. <p> Здесь приведены примеры на Бейсике и с использованием прерывания 16H. В них показано как свести вместе большинство информации, приведенной в данной главе. Общий алгоритм показан на рис. 3-3. <p> Средний уровень. <p> Этот пример отличается от предыдущего методом распознавания четырех частных случаев Ctrl-H, -I, -M и -[. Здесь, когда встает вопрос о том, возник ли указанный код при нажатии одной клавиши, или в комбинации с клавишей Ctrl, проверяется скан-код. Этот метод более правилен, чем проверка бита статуса, так как скан-код запоминается в буфере клавиатуры, а установка бита статуса может быть изменена. <table align="center"> <tr><td></td><td>;---получение кода нажатой клавиши и определение его типа</td></tr> <tr><td>NEXT: MOV AH,0 </td><td>;функция ввода с клавиатуры BIOS</td></tr> <tr><td>INT 16H </td><td>;получаем введенный код</td></tr> <tr><td>CMP AL,0 </td><td>;проверка на расширенный код</td></tr> <tr><td>JE EXTENDED_CODE </td><td>;если да, то на спец. процедуру</td></tr> <tr><td>CMP AL,32 </td><td>;проверка на управляющий символ</td></tr> <tr><td>JL CONTROL_CODE </td><td>;если да, то на спец. процедуру</td></tr> <tr><td>CMP AL,65 </td><td>;если символ не входит в набор пишу-</td></tr> <tr><td>JL NEXT </td><td>;щей машинки, то берем следующий</td></tr> <tr><td>CMP AL,123 </td><td>;</td></tr> <tr><td>JL NEXT </td><td>;</td></tr> <tr><td></td><td>;---теперь обрабатываем символ в AL</td></tr> <tr><td>STOSB </td><td>;запоминаем символ по адресу ES:DI</td></tr> <tr><td>MOV AH,2 </td><td>;функция вывода символа на экран</td></tr> <tr><td>MOV DL,AL </td><td>;помещаем символ в DL перед выводом</td></tr> <tr><td>INT 21H </td><td>;выводим его на экран</td></tr> <tr><td>.</td><td></td></tr> <tr><td>.</td><td></td></tr> <tr><td>JMP NEXT </td><td>;переходим к следующему символу</td></tr> <tr><td></td><td>;---анализируем управляющие коды</td></tr> <tr><td>CONTROL_CODE: CMP AL,13 </td><td>;код ASCII 13?</td></tr> <tr><td>JNE TAB </td><td>;если нет, то след. проверка</td></tr> <tr><td>CMP AH,28 </td><td>;иначе проверяем скан-код &lt;CR&gt;</td></tr> <tr><td>JNE C_M </td><td>;если нет, то было Ctrl-M</td></tr> <tr><td>CALL CARRIAGE_RET</td><td>;обработка возврата каретки</td></tr> <tr><td>JMP NEXT </td><td>;переход к следующему символу</td></tr> <tr><td>C_M: CALL CTRL_M </td><td>;обработка Ctrl-M</td></tr> <tr><td>JMP NEXT </td><td>;переход к следующему символу</td></tr> <tr><td>TAB: CMP AL,9 </td><td>;проверка на табуляцию...</td></tr> <tr><td>.</td><td></td></tr> <tr><td>.</td><td></td></tr> <tr><td>CMP AL,10 </td><td>;затем проверка других</td></tr> <tr><td>.</td><td></td></tr> <tr><td>.</td><td></td></tr> <tr><td>REJECT: JMP NEXT </td><td>;переход к следующему символу</td></tr> <tr><td></td><td>;---анализ расширенных кодов (2-й байт кода в AH):</td></tr> <tr><td>EXTENDED_CODE: CMP AH,71 </td><td>;проверка нижней границы</td></tr> <tr><td>JL REJECT </td><td>;если меньше, то след. символ</td></tr> <tr><td>CMP AH,81 </td><td>;проверка верхней границы</td></tr> <tr><td>JL REJECT </td><td>;если больше, то след. символ</td></tr> <tr><td></td><td>;---AH содержит символ управления курсором, анализируем его:</td></tr> <tr><td>CMP AH,72 </td><td>;"курсор-вверх"?</td></tr> <tr><td>JE C_U </td><td>;если да, то на процедуру</td></tr> <tr><td>CMP AH,80 </td><td>;"курсор-вниз"?</td></tr> <tr><td>JE C_D </td><td>;если да, то на процедуру</td></tr> <tr><td>.</td><td></td></tr> <tr><td>.</td><td></td></tr> <tr><td>C_U: CALL CURSOR_UP </td><td>;вызов соответствующей процедуры</td></tr> <tr><td>JMP NEXT </td><td>;переход к следующему символу</td></tr> <tr><td>C_D: CALL CURSOR_DOWN </td><td>;вызов соответствующей процедуры</td></tr> <tr><td>JMP NEXT </td><td>;переход к следующему символу</td></tr> </table> <hr><p align="center">
<~-<a href="317.htm">3.1.7 Проверка/установка статуса клавиш-переключателей.</a><br><a href="index.htm#header">Содержание</a><br><a href="319.htm">3.1.9 Перепрограммирование прерывания клавиатуры.</a>-~>
</p></body></html>
