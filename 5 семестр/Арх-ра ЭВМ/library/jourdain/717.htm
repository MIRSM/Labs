<html><head><title>Справочник программиста на персональном компьютере фирмы IBM.Роберт Журден</title> <meta http-equiv="Content-Type" content="text/html; charset=windows-1251"> <link rel=stylesheet type=text/css href=style.css> </head><body> <p class="hdr1">Глава 7. Ввод/вывод.</p> <p class="hdr2">Раздел 1. Доступ к последовательному порту.</p> <p class="hdr3">7.1.7 Получение данных.</p> <p> Kоммуникационная программа готова принимать данные как только инициализирован коммуникационный порт {<a href="712.htm">7.1.2</a>} и установлена связь с удаленной станцией {<a href="715.htm">7.1.5</a>}. Прием данных никогда полностью не отделен от передачи данных, поскольку программе может потребоваться послать сигнал XOFF (ASCII 19), чтобы остановить поток данных, если они поступают слишком быстро и она не успевает их обрабатывать. Kод XON (ASCII 17) сообщает удаленной станции, что можно продолжить передачу. Отметим, что PCjr не может принимать данные во время дисковых операций; чтобы снять это ограничение можно использовать XON и XOFF. <p> В зависимости от сложности используемого протокола обмена, принимаемые данные могут требовать простой или сложной обработки. Может быть получен один из набора управляющих кодов, приведенных в {<a href="719.htm">7.1.9</a>}. Те из них, которые являются ограничителями данных чаще обнаруживаются при синхронном обмене. При выводе получаемых символов на экран учитывайте влияние символов перевода строки (ASCII 10), поскольку некоторые языки (включая Бейсик) автоматически вставляют перевод строки после возврата каретки; в этом случае исключайте переводы строки из принимаемых данных, чтобы избежать пустых строк при выводе. Hа рис. 7-2 показана коммуникационная процедура, включающая также код передачи, обсуждаемый в {<a href="716.htm">7.1.6</a>}. <p> Средний уровень. <p> Функция 2 прерывания 14H BIOS ожидает символ из последовательного порта, помещает его в AL при получении и затем возвращается в программу. При входе надо поместить номер порта (0-1) в DX. При возврате AX равен нулю, если не было ошибки. Если AH не равен 0, то может быть возвращен байт статуса, в котором имеют значение только 5 битов. Это следующие биты: <pre class="asm"> 
бит  1   ошибка переполнения (новый символ поступил  раньше,  чем 
         был удален старый) 
     2   ошибка четности (вероятно, из-за проблем в линии) 
     3   ошибка оформления (стартовый или стоп-биты неверны) 
     4   обнаружен перерыв (получена длинная строка битов 0) 
     5   ошибка таймаута (не получен сигнал DSR) 
</pre> 
<p> MS DOS также предоставляет коммуникационную функцию для приема одного символа, это функция 3 прерывания 21H. Функция ожидает символ из COM1 и помещает его в AL. Отметим, что при этом нет функции инициализации порта, которую надо делать через процедуру BIOS или непосредственно, как показано в {<a href="712.htm">7.1.2</a>}. По умолчанию порт инициализируется со значениями 2400 бод, нет контроля четности, один стоп-бит и 8 битов на символ. Эта функция не имеет никаких достоинств по сравнению с функцией BIOS и не возвращает информации о статусе. <p> Hизкий уровень. <p> При получении данных без использования коммуникационного прерывания {<a href="718.htm">7.1.8</a>} программа должна постоянно проверять регистр статуса линии, адрес порта которого на 5 больше базового адреса используемого коммуникационного адаптера. Бит 0 этого регистра будет равен нулю, до тех пор пока не будет получен символ в регистр данных приемника. Kогда бит 0 становится равным 1, то надо немедленно считать его из регистра, с тем чтобы на него не наложился следующий принимаемый символ. После того как символ считан, бит 0 опять становится равным 0 и остается таковым, пока не прибудет новый символ. <p> Хотя здесь об этом не говорилось, но коммуникационные процедуры обычно создают циклический буфер для сбора поступающих символов. Циклические буфера обсуждались в {<a href="311.htm">3.1.1</a>}. Вы должны также знать, что если поступающие данные подавать на экран со скоростью 1200 бод, то процедура сдвига экрана BIOS {<a href="451.htm">4.5.1</a>} не будет успевать и произойдет переполнение. Простое решение этих проблем состоит в использовании коммуникационного прерывания, как объяснено в {<a href="718.htm">7.1.8</a>}. <p> Следующий пример частично дублирует содержимое предыдущего раздела, относящегося к передаче символов. Kак и в том случае код начинается с бесконечного цикла. Объедините эти 2 процедуры с процедурами инициализации из {<a href="712.htm">7.1.2</a>} и {<a href="715.htm">7.1.5</a>} для создания законченной процедуры ввода/вывода через коммуникационный канал. <table align="center"> <tr><td>KEEP_TRYING: MOV DX,BASE_ADDRESS </td><td>;базовый адрес</td></tr> <tr><td>ADD DX,5 </td><td>;указываем на регистр статуса линии</td></tr> <tr><td>IN AL,DX </td><td>;получаем байт статуса</td></tr> <tr><td>TEST AL,00011110B </td><td>;проверяем на ошибку</td></tr> <tr><td>JNZ ERROR_ROUTINE </td><td>;если да, то на обработку ошибки</td></tr> <tr><td>TEST AL,00000001B </td><td>;проверяем получены ли данные</td></tr> <tr><td>JNZ RECEIVE </td><td>;на процедуру приема данных</td></tr> <tr><td>TEST AL,00100000B </td><td>;проверяем готовность к передаче</td></tr> <tr><td>JZ KEEP_TRYING </td><td>;если нет, то к началу цикла</td></tr> <tr><td>.</td><td></td></tr> <tr><td>(здесь расположена процедура передачи - см. [7.1.6])</td><td></td></tr> <tr><td>.</td><td></td></tr> <tr><td></td><td>;---получаем данные и выводим их на экран</td></tr> <tr><td>RECEIVE: MOV DX,BASE_ADDRESS </td><td>;базовый адрес</td></tr> <tr><td>IN AL,DX </td><td>;читаем полученный символ</td></tr> <tr><td>CMP AL,19 </td><td>;проверка на XOFF</td></tr> <tr><td>JE XOFF_ROUTINE </td><td>;</td></tr> <tr><td>.</td><td></td></tr> <tr><td>(и т.д.)</td><td></td></tr> <tr><td>.</td><td></td></tr> <tr><td>MOV DL,AL </td><td>;готовим символ для вывода на экран</td></tr> <tr><td>MOV AH,2 </td><td>;функция вывода символа</td></tr> <tr><td>INT 21H </td><td>;выводим его</td></tr> <tr><td>JMP SHORT KEEP_TRYING </td><td>;возвращаемся на начало цикла</td></tr> </table> <hr><p align="center">
<~-<a href="716.htm">7.1.6 Передача данных.</a><br><a href="index.htm#header">Содержание</a><br><a href="718.htm">7.1.8 Посылка/получение данных с помощью коммуникационного прерывания.</a>-~>
</p></body></html>
