<html><head><title>Справочник программиста на персональном компьютере фирмы IBM.Роберт Журден</title> <meta http-equiv="Content-Type" content="text/html; charset=windows-1251"> <link rel=stylesheet type=text/css href=style.css> </head><body> <p class="hdr1">Глава 2. Таймеры и звук.</p> <p class="hdr2">Раздел 2. Создание звука.</p> <p class="hdr3">2.2.5 Генерация набора тонов.</p> <p> В этом подразделе показано как генерировать цепочку звуков, когда компьютер ничем другим не занят; в следующем будет показано как выполнить ту же задачу, когда компьютер занят другой работой. Kогда компьютер ничем другим не занят, то можно выводить мелодию или производить специальные звуковые эффекты; когда же компьютер занят другой работой, то нельзя производить звуковые эффекты. <p> Создание звуковых строк является одной из мощнейших возможностей, предоставляемых Бейсиком. Построение же строк звуков в ассемблере требует большой работы. Может быть использован любой из двух методов генерации звука, предложенных в {<a href="222.htm">2.2.2</a>} и {<a href="223.htm">2.2.3</a>}. Для обоих методов надо просто генерировать один тон в течении заданного времени, затем следующий и т.д. Kаждая звуковая строка формируется из двух строк данных, одна из которых содержит частоты последовательных тонов, а другая хранит их длительности (при условии, что требуются разные длительности). Продолжительность звучания определяется с использованием счетчика времени суток BIOS {<a href="216.htm">2.1.6</a>}. <p> Hизкий уровень. <p> В примере для генерации звука используется микросхема таймера 8253. Здесь просто исполняются 8 нот, но небольшая модификация может сильно расширить возможности этой процедуры. Имеется три строки данных. Первая устанавливает длительность каждой ноты, как кратное произвольного периода задержки (изменяя этот период задержки, можно изменять темп). Вторая строка содержит частоты каждой из 8 нот; эти значения должны быть помещены в регистр задвижки канала 2 микросхемы 8253 для исполнения желаемых тонов. Третья строка содержит мелодию в виде кодовых номеров от 1 до 8, которые соответствуют восьми частотам. Эта строка завершается кодом 0FFH, который служит признаком конца мелодии. Процедура просто читает очередную ноту мелодии, находит соответствующую частоту и помещает ее в канал 2. Затем длительность для этой ноты помещается в счетчик цикла задержки, который использует счетчик времени суток, а когда задержка кончается, то переходим к обработке следующей ноты. Hа рис. 2-5 показана работа этой процедуры. <table align="center"> <tr><td></td><td>;---в сегменте данных</td></tr> <tr><td>BEAT DB 10,9,8,7,6,5,4,3,2 </td><td>;длительность нот</td></tr> <tr><td>FREQUENCY DW 2280,2031,1809,1709 </td><td>;таблица частот</td></tr> <tr><td>DW 1521,1353,1207,1139 </td><td>;</td></tr> <tr><td>MELODY DB 1,2,3,4,5,6,7,8,0FFH </td><td>;номер частоты ноты</td></tr> <tr><td></td><td></td></tr> <tr><td></td><td>;---инициализация</td></tr> <tr><td>PORT_B EQU 61H</td><td></td></tr> <tr><td>COMMAND_REG EQU 43H</td><td></td></tr> <tr><td>LATCH2 EQU 42H</td><td></td></tr> <tr><td>IN AL,PORT_B </td><td>;получаем текущий статус</td></tr> <tr><td>OR AL,00000011B </td><td>;разрешаем динамик и таймер</td></tr> <tr><td>OUT PORT_B,AL </td><td>;заменяем байт</td></tr> <tr><td>MOV SI,0 </td><td>;инициализируем указатель</td></tr> <tr><td>MOV AL,0B6H </td><td>;установка для канала 2</td></tr> <tr><td>OUT COMMAND_REG,AL </td><td>;посылаем в командный регистр</td></tr> <tr><td></td><td>;---смотрим ноту, получаем ее частоту и помещаем в канал 2</td></tr> <tr><td>NEXT_NOTE: LEA BX,MELODY </td><td>;берем смещение для мелодии</td></tr> <tr><td>MOV AL,[BX][SI] </td><td>;берем код n-ной ноты строки</td></tr> <tr><td>CMP AL,0FFH </td><td>;проверка на конец строки</td></tr> <tr><td>JE NO_MORE </td><td>;если конец, то на выход</td></tr> <tr><td>CBW </td><td>;переводим в слово</td></tr> <tr><td></td><td>;получение частоты</td></tr> <tr><td>MOV BX,OFFSET FREQUENCY </td><td>;смещение таблицы частот</td></tr> <tr><td>DEC AX </td><td>;начинаем отсчет с 0</td></tr> <tr><td>SHL AX,1 </td><td>;умножаем на 2, т.к. слова</td></tr> <tr><td>MOV DI,AX </td><td>;адресуем через DI</td></tr> <tr><td>MOV DX,[BX][DI] </td><td>;получаем частоту из таблицы</td></tr> <tr><td></td><td>;начинаем исполнение ноты</td></tr> <tr><td>MOV AL,DL </td><td>;готовим младший байт частоты</td></tr> <tr><td>OUT LATCH2,AL </td><td>;посылаем его</td></tr> <tr><td>MOV AL,DH </td><td>;готовим старший байт частоты</td></tr> <tr><td>OUT LATCH2,AL </td><td>;посылаем его</td></tr> <tr><td></td><td>;---создание цмкла задержки</td></tr> <tr><td>MOV AH,0 </td><td>;номер функции чтения счетчика</td></tr> <tr><td>INT 1AH </td><td>;получаем значение счетчика</td></tr> <tr><td>MOV BX,OFFSET BEAT </td><td>;смещение таблицы длин</td></tr> <tr><td>MOV CL,[BX][SI] </td><td>;берем длину очередной ноты</td></tr> <tr><td>MOV CH,0 </td><td>;</td></tr> <tr><td>MOV BX,DX </td><td>;берем младшее слово счетчика</td></tr> <tr><td>ADD BX,CX </td><td>;определяем момент окончания</td></tr> <tr><td>STILL_SOUND: INT 1AH </td><td>;берем значение счетчика</td></tr> <tr><td>CMP DX,BX </td><td>;сравниваем с окончанием</td></tr> <tr><td>JNE STILL_SOUND </td><td>;неравны - продолжаем звук</td></tr> <tr><td>INC SI </td><td>;переходим к следующей ноте</td></tr> <tr><td>JMP NEXT_NOTE </td><td>;</td></tr> <tr><td></td><td>;---завершение</td></tr> <tr><td>NO_MORE: IN AL,PORT_B </td><td>;получаем статус порта B</td></tr> <tr><td>AND AL,0FCH </td><td>;выключаем динамик</td></tr> <tr><td>OUT 61H,AL </td><td>;заменяем байт</td></tr> </table> <hr><p align="center">
<~-<a href="224.htm">2.2.4 Гудок динамика.</a><br><a href="index.htm#header">Содержание</a><br><a href="226.htm">2.2.6 Генерация строки тонов, одновременно с другими операциями.</a>-~>
</p></body></html>
