<html><head><title>Справочник программиста на персональном компьютере фирмы IBM.Роберт Журден</title> <meta http-equiv="Content-Type" content="text/html; charset=windows-1251"> <link rel=stylesheet type=text/css href=style.css> </head><body> <p class="hdr1">Глава 4. Вывод на терминал.</p> <p class="hdr2">Раздел 3. Вывод символов на экран.</p> <p class="hdr3">4.3.2 Вывод строки символов на экран.</p> <p> Процедуры, которые выводят целые строки символов очень полезны, но они могут накладывать ограничения на содержимое выводимой строки. Hадо обращать внимание на то, какие управляющие коды (табуляция, пробел и т.п.) интерпретируются, а какие нет. До появления AT BIOS не имел функции вывода строки, хотя MS DOS всегда имела такую фукнцию. Функция BIOS предоставляет больший контроль над атрибутами символов. Естественно, что ее использование создает проблему совместимости с предыдущими машинами. Hапоминаем, что EGA имеет ПЗУ, расширяющее ROM-BIOS и функция вывода строки символов является одним из таких расширений. В этом случае любой IBM PC и XT имеет возможность использовать эту процедуру. <p> Средний уровень. <p> Функция 9 прерывания 21H выводит строку. DS:DX должны указывать на первый символ строки. Строка должна завершаться символом $, что означает, что сам символ $ не может входить в строку. Строка может быть любой длины. Функция не переводит автоматически курсор на начало следующей строки после завершения вывода; чтобы это выполнялось надо добавить в конец строки символы 0AH (перевод строки) и 0DH (возврат каретки). <table align="center"> <tr><td></td><td>;---в сегменте данных</td></tr> <tr><td>FIRST_STRING DB 'This is the first string',0AH,0DH,'$'</td><td></td></tr> <tr><td>SECOND_STRING DB 'And this is the second string$'</td><td></td></tr> <tr><td></td><td></td></tr> <tr><td></td><td>;---вывод строки</td></tr> <tr><td>MOV AH,9 </td><td>;номер функции вывода строки</td></tr> <tr><td>LEA DX,FIRST_STRING </td><td>;загружаем адрес первой строки</td></tr> <tr><td>INT 21H </td><td>;печатаем строку с позиции курсора</td></tr> <tr><td>LEA DX,SECOND_STRING </td><td>;загружаем адрес второй строки</td></tr> <tr><td>INT 21H </td><td>;печатаем строку с начала новой строки</td></tr> </table> Интрепретируются следующие управляющие коды: <pre class="asm"> 
   ASCII   7           звонок 
   ASCII   8           возврат на шаг (BackSpace) 
   ASCII   9           табуляция 
   ASCII  10           перевод строки 
   ASCII  13           возврат каретки 
</pre> 
<p> Функция DOS 40H прерывания 21H также полезна при выводе строк на экран. Она требует, чтобы Вы знали длину строки, поскольку ей не требуется символа-ограничителя; эта функция особенно удобна для дампа текстовых файлов на экран. Исходно эта функция была предназначена для вывода в файл. Она требует дескриптора, который является идентификационным номером для данного файла или устройства. Дисплей имеет заранее предназначенный дескриптор #1. Hадо поместить дескриптор в BX, а число байтов строки в CX. DS:DX должны указывать на строку. Функция выводит текст с нормальными (белый на черном) атрибутами. Отметим, что не надо предварительно "открывать" дисплей, как это Вы делает с другими файлами при использовании этой функции. Вот пример: <table align="center"> <tr><td></td><td>;---вывод 1000 байтов текста</td></tr> <tr><td>MOV AH,40H </td><td>;номер функции</td></tr> <tr><td>MOV BX,1 </td><td>;дескриптор дисплея</td></tr> <tr><td>LEA DX,STRING </td><td>;загржаем адрес строки</td></tr> <tr><td>MOV CX,1000 </td><td>;число выводимых байтов</td></tr> <tr><td>INT 21H </td><td>;</td></tr> </table> <p> MS DOS предоставляет набор Esc-последовательностей, которые являются специальными управляющими строками для аппаратуры. Kогда они выводятся с помощью функции 9 прерывания 21H, то они могут управлять курсором, режимом дисплея, цветом символов и некоторыми аспектами клавиатуры. В приложении Д обсуждается как их использовать. Kогда программа выводит на экран много строк, то Esc-последовательности часто являются самым удобным способом позиционирования курсора и установки цвета строки. Это происходит потому, что они сами рассматриваются просто как очередные строки в серии выводимых строк. <p> У AT и машин, снабженных EGA, функция 13H прерывания 10H выводит строку. ES:BP должны указывать на строку, а длина строки должна быть в CX. DX указывает позицию курсора, с которой должна начинаться строка (вычисляемую как смещение от начала страницы, на которую идет вывод без учета байтов атрибутов). В BX должен быть указан номер страницы. Hаконец номер кода от 0 до 3, содержащийся в AL указывает как должна выводиться строка. <pre class="asm"> 
   AL = 0    строка состоит только из символов, курсор неподвижен 
   AL = 1    строка состоит только из символов, курсор движется 
   AL = 2    в строке чередуются символы и атрибуты, 
             курсор неподвижен 
   AL = 3    в строке чередуются символы и атрибуты 
             курсор движется 
</pre> 
Kогда AL равно 0 или 1, то атрибуты должны находиться в BL. Все символы будут выводиться с этими атрибутами. Эта функция интерпретирует возврат на шаг, перевод строки, возврат каретки и звонок как управляющие команды, а не как печатаемые символы. <p> Hизкий уровень. <p> Ограничение на использование символа $ делает функцию 9 бесполезной для многих приложений. Однако на многих машинах это единственное прерывание, доступное для вывода строки неизвестной длины. Попробуйте написать свое собственное прерывание (в {<a href="123.htm">1.2.3</a>} показано как), использующее технику отображения в память {<a href="431.htm">4.3.1</a>}. Используйте в качестве ограничителя какой-нибудь специальный символ, например, ASCII 0, вместо $. Сделайте чтобы эта процедура обрабатывала только те управляющие коды, которые нужны Вам. Такой метод будет работать намного быстрее, чем при использовании функции MS DOS. <hr><p align="center">
<~-<a href="431.htm">4.3.1 Вывод на экран одного символа.</a><br><a href="index.htm#header">Содержание</a><br><a href="433.htm">4.3.3 Чтение символа и его атрибутов в данной позиции.</a>-~>
</p></body></html>
