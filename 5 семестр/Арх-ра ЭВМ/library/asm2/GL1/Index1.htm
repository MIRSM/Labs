<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>
<head>
<title>
</title>
<meta http-equiv="Content-Type" content="text/html;charset=windows-1251">
<title>Память и процессор</title>
</head>
<body background="../FON.JPG" BGCOLOR="#E7E3E7" TEXT="#000000" LINK="#004080" VLINK="#004080">
<table COLS="3" WIDTH="16%">
<tr>
<td WIDTH="10%">
<font face="Arial, Helvetica, sans-serif">
<a href="../index.html">
<img SRC="Menu.gif" BORDER="0" width="73" height="22">
</a>
</font>
</td>
<td ALIGN="RIGHT">
<font face="Arial, Helvetica, sans-serif">
<a href="Index2.htm">
<img SRC="For.gif" BORDER="0">
</a>
</font>
</td>
</tr>
</table>
<p align="center">
<font face="Arial, Helvetica, sans-serif" size="4">
Память и процессор</font>
<font face="Arial, Helvetica, sans-serif" size="3">
<p align="left">
<br>


Среди устройств и узлов, входящих в состав компьютера, наиболее важными для выполнения 
  любой программы катаются оперативная память и центральный микропроцессор, который 
  мы для краткости будем в дальнейшем называть просто процессором. В оперативной 
  памяти хранится выполняемая программа вместе с принадлежащими ей данными; процессор 
  выполняет вычисления и другие действия, описанные в программе.<br>
  Программа загружается в память с жесткого или гибкого магнитного диска, где 
  она хранится, операционной системой в ответ ввод с клавиатуры команды запуска 
  программы. Операционная система, загрузив программу, и при необходимости настроив 
  ее для выполнения в той области памяти, куда она попала, сообщает процессору 
  начальный адрес загруженной программы и инициирует процесс ее выполнения.<br>
Процессор считывает из памяти первую команду программы, находит в памяти или в 
своих регистрах данные, необходимые для ее выполнения (если, конечно, команда 
требует данных) и, выполнив требуемую операцию, возвращает в память или, возможно, 
оставляет в регистрах результат своей работы (рис. 1.1).</P>
</font><p align="center"><font face="Arial, Helvetica, sans-serif" size="3">
&nbsp;
</font>
<img src="gl1-1.jpg" ></P>
<p align="center">
<font face="Arial, Helvetica, sans-serif" size="3"><b>Рис. 
  1.1.</b> Взаимодействие оперативной памяти и процессора.</font>
<p align="left">
<font face="Arial, Helvetica, sans-serif" size="3">
  Выполнив первую команду, процессор переходит к следующей, и так
дальше до конца 
  программы. Завершив программу, процессор не будет знать, что ему дальше делать, 
  поэтому любая программа должна завершаться командами, передающими
управление 
  операционной системе компьютера.<br>
  Оперативная память компьютера представляет собой электронное устройство, состоящее 
  из большого числа двоичных запоминающих элементов, а также схем
управления ими. 
  Минимальный объем информации, к которому имеется доступ в памяти,
составляет 
  один байт (8 двоичных разрядов, или битов). Все байты оперативной памяти нумеруются, 
  начиная с нуля. Нужные байты отыскиваются в памяти по их номерам, выполняющим 
  функции адресов.<br>
  Некоторые данные (например, коды символов) требуют для своего хранения одного 
  байта; для других данных этого места на хватает, и под них в памяти выделяется 
  2, 4, 8 или еще большее число байтов. Обычно пары байтов называют словами, а 
  четверки - двойными словами (рис. 1.2), хотя иногда термином &quot;слово&quot; 
  обозначают любую порцию машинной информации.</font></p>
<p align="center"><font size="3" face="Times New Roman, Times, serif"><img src="gl1-2.jpg" ></font></p>
<p align="center"><font face="Arial, Helvetica, sans-serif" size="3"><b>Рис. 1.2.</b> Байт, слово 
  и двойное слово.</font></p>
<p align="left"><font face="Arial, Helvetica, sans-serif" size="3">
  При обсуждении содержимого многобайтового данного приходится ссылаться на составляющие 
  его байты; эти байты условно нумеруются от нуля и располагаются (при их изображении 
  на бумаге) в порядке возрастания номера справа налево, так что слева оказываются 
  байты с большими номерами, а справа - байты с меньшими номерами. Крайний слева 
  байт принято называть старшим, а крайний справа - младшим. Такой порядок расположения 
  байтов связан с привычной для нас формой записи чисел: в многоразрядном числе 
  слева указываются старшие разряды, а справа - младшие. Следующее число, если 
  его написать за предыдущим, опять начнется со старшего разряда и закончится 
  младшим. Однако в памяти компьютера данные располагаются в более естественном 
  порядке непрерывного возрастания номеров байтов и, таким образом, каждое слово 
  или двойное слово в памяти начинается с его младшего байта и заканчивается старшим 
  (рис. 1.3).</font></p>
<p align="center"><font size="3" face="Times New Roman, Times, serif"><img src="gl1-3.jpg" >
</font></p>
<p align="center"><font size="3" face="Times New Roman, Times, serif">
 <br>
</font><font face="Arial, Helvetica, sans-serif" size="3"><b>Рис. 1.3</b>. Нумерация байтов в многобайтовых данных.</font></p>
<p align="left"><font face="Arial, Helvetica, sans-serif" size="3">
  Строго говоря, в памяти компьютера можно хранить только целые двоичные числа, 
  так как память состоит из двоичных запоминающих элементов. Для записи иных данных, 
  например, символов или дробных чисел, для них предусматриваются правила кодирования, 
  т.е. представления в виде последовательности битов той или длины. Так, действительное число одинарной 
  точности занимает в памяти двойное слово (32 бит), в котором 23 бит отводятся 
  под мантиссу, 8 бит под порядок и еще один бит под знак числа. Программы, работающие 
  с такого рода данными, должны, естественно, знать правила их записи и руководствоваться 
  ими при обработке и представлении этих данных.<br>
  Двоичная система счисления, в которой работают все цифровые электронные устройства, 
  неудобна для человека. Для удобства представления двоичного содержимого ячеек 
  памяти или регистров процессора используют иногда восьмеричную, а чаще - шестнадцатеричную 
  системы счисления. Для процессоров Intel используется шестнадцатеричная система.<br>
  Каждый разряд шестнадцатеричного числа может принимать 16 значений, из которых 
  первые 10 обозначаются обычными десятичными цифрами, а последние 6 - буквами 
  латинского алфавита от А до F, где А обозначает 10, В - И, С - 12, D - 13, Е 
  - 14, a F - 15. В языке ассемблера шестнадцатеричные числа, чтобы отличать их 
  от десятичных, завершаются буквой h (или Н). Таким образом, 100 - это десятичное 
  число, a l00h - шестнадцатеричное (равное 256). Поскольку одна шестнадцатеричная 
  цифра требует для записи ее в память компьютера четырех двоичных разрядов, то 
  содержимое байта описывается двумя шестнадцатеричными цифрами (от 00h до
FFh, 
  или от 0 до 255) , а содержимое слова - четырьмя (от 0000h до
FFFFh, или от 
  0 до 65535).<br>
  Помимо ячеек оперативной памяти, для хранения данных используются еще запоминающие 
  ячейки, расположенные в процессоре и называемые регистрами. Достоинство регистров 
  заключается в их высоком быстродействии, гораздо большем, чем у оперативной 
  памяти, а недостаток в том, что их очень мало - всего около десятка. Поэтому 
  регистры используются лишь для кратковременного хранения данных. В режиме МП 
  86, который мы здесь обсуждаем, все регистры процессора имеют длину 16 разрядов, 
  или 1 слово (в действительности в современных процессорах их длина составляет 
  32 разряда, но в МП 86 от каждого регистра используется лишь его половина). 
  За каждым регистром закреплено определенное имя (например, АХ или
DS), по которому 
  к нему можно обращаться в программе. Состав и правила использования регистров 
  процессора будут подробно описаны ниже, здесь же мы коснемся только назначения 
  сегментных регистров, с помощью которых осуществляется обращение процессора 
  к ячейкам оперативной памяти.<br>
  Казалось бы, для передачи процессору адреса какого-либо байта оперативной памяти, 
  достаточно записать в один из регистров процессора его номер. В действительности 
  поступить таким образом в 16-разрядном процессоре нельзя, так как максимальное 
  число (данное или адрес), которое можно записать в 16-разрядный регистр, составляет 
  всего 216 - 1 = 65535, или 64К-1, и мы получим возможность обращения лишь к 
  первым 64 Кбайт памяти. Для того, чтобы с помощью 16-разрядных чисел адресовать 
  любой байт памяти, в МП 86 предусмотрена сегментная адресация памяти, реализуемая 
  с помощью сегментных регистров процессора.<br>
  Суть сегментной адресации заключается в следующем. Обращение к памяти осуществляется 
  исключительно с помощью сегментов - логических образований, накладываемых на 
  те или иные участки физической памяти. Исполнительный адрес любой ячейки памяти 
  вычисляется процессором путем сложения начального адреса сегмента, в котором 
  располагается эта ячейка, со смещением к ней (в байтах) от начала сегмента (рис. 
  1.4). Это смещение иногда называют относительным адресом.</font></p>
<p align="center"><img src="gl1-4.jpg" ></p>
<p align="center"><font face="Arial, Helvetica, sans-serif" size="3"><b>Рис. 1.4.</b> Образование 
  физического адреса из сегментного адреса и смещения.</font></p>

<p><font face="Arial, Helvetica, sans-serif" size="3">
  Начальный адрес сегмента без четырех младших битов, т.е. деленный на 16, помещается 
  в один из сегментных регистров и называется сегментным адресом. Сам же начальный 
  адрес хранится в специальном внутреннем регистре процессора, называемом теневым 
  регистром. Для каждого сегментного регистра имеется свой теневой регистр; начальный 
  адрес сегмента загружается в него процессором в тот момент, когда программа 
  заносит в соответствующий сегментный регистр новое значение сегментного адреса.<br>
  Процедура умножения сегментного адреса на 16 (или, что то же самое, на 10h) 
  является принципиальной особенностью реального режима, ограничивающей диапазон 
  адресов, доступных в реальном режиме, величиной 1 Мбайт. Действительно, максимальное 
  значение сегментного адреса составляет
FFFFh, или 64К-1, из чего следует, что 
  максимальное значение начального адреса сегмента в памяти равно FFFF0h, или 
  1 Мбайт - 16. Если, однако, учесть, что к начальному адресу сегмента можно добавить 
  любое смещение в диапазоне от 0 до FFFFh, то адрес последнего адресуемого байта 
  окажется равен 10FFEFh, что соответствует величине 1 Мбайт + 64 Кбайт - 17.<br>
  Диапазон адресов, формируемых процессором, называют адресным пространством процессора; 
  как мы видим, в реальном режиме он немного превышает 1 Мбайт. Заметим еще, что 
  для описания адреса в пределах 1 Мбайт требуются 20 двоичных разрядов, или 5 
  шестнадцатеричных. Процессор 8086 имел как раз 20 адресных линий и не мог, следовательно, 
  выйти за пределы 1 Мбайт; современным 32-разрядным процессорам, если они работают 
  в реальном режиме, доступно несколько большее (почти на 64 Кбайт) адресное пространство. 
  Если же процессор работает в защищенном режиме (с использованием 32-разрядных 
  регистров), то его адресное пространство увеличивается до 232 = 4 Гбайт.</font></p>


<p></p>
<p>&nbsp;

</p>
<table COLS="3" WIDTH="16%">
<tr>
    <td WIDTH="10%" height="27"> <font face="Arial, Helvetica, sans-serif"> <a href="../index.html"> 
      </a> </font> </td>    
    <td ALIGN="RIGHT" height="27"> <font face="Arial, Helvetica, sans-serif"> 
      <a href="Index2.htm"> </a><a href="../index.html"><img src="Menu.gif" border="0"></a><a href="Index2.htm"><img SRC="For.gif" BORDER="0"> 
      </a> </font> </td>
</tr>
</table>
</body>
</html>