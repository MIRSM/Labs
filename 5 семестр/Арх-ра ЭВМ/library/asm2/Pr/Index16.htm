<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>
<head>
<title>
</title>
<meta http-equiv="Content-Type" content="text/html;charset=windows-1251">
</head>
<body background="../FON.JPG" BGCOLOR="#E7E3E7" TEXT="#000000" LINK="#004080" VLINK="#004080">
<table COLS="3" WIDTH="16%">
<tr>
<td>
<font face="Arial, Helvetica, sans-serif">
<a href="Index15.htm">
<img SRC="Back.gif" BORDER="0" width="73" height="22">
</a>
</font>
</td>
<td WIDTH="10%">
<font face="Arial, Helvetica, sans-serif">
<a href="../index.html">
<img SRC="Menu.gif" BORDER="0" width="73" height="22">
</a>
</font>
</td>
<td ALIGN="RIGHT">
<font face="Arial, Helvetica, sans-serif">
<a href="Index17.htm">
<img SRC="For.gif" BORDER="0" width="73" height="22">
</a>
</font>
</td>
</tr>
</table>
<p>
&nbsp;
</p>
<p align="center">
<font face="Arial, Helvetica, sans-serif" size="3">
<font size="4">
LOCK Запирание шины 
</font>
<br>
</font>
</p>
<p align="left">
<font face="Arial, Helvetica, sans-serif" size="3">

  Префикс lock, помещенный перед командой, устанавливает сигнал на линии LOCK 
  системной шины и запрещает доступ к шине другим процессорам на время выполнения 
  данной команды. Этот префикс предназначен для использования в многопроцессорных 
  многозадачных системах для обеспечения исключительного доступа к памяти данного 
  процесса (и данного процессора) на время проверки или модификации некоторой 
  ячейки памяти. Типичный пример операций такого рода - работа с семафорами.<br>
  Если два (или более) процесса, идущие на разных процессорах, используют какой-либо 
  общий ресурс, например, файл или лазерный диск, то необходимо обеспечить механизм, 
  запрещающий одновременное обращение процессов к общему ресурсу. Эта задача решается 
  с помощью семафора - ячейки памяти (байта или даже бита), состояние которого 
  отражает доступность или, наоборот, занятость ресурса.<br>
  Если процессору понадобился общий ресурс, он читает состояние семафора и, если 
  ресурс занят, продолжает опрашивать семафор до тех пор, пока другой процессор, 
  использующий в настоящий момент общий ресурс, не освободит его. Обнаружив, что 
  ресурс свободен, первый процессор устанавливает семафор в состояние &quot;занят&quot; 
  и использует ресурс. Закончив работу с ресурсом, процессор сбрасывает его семафор 
  и дает возможность другому процессу обратиться к тому же ресурсу.<br>
  Описанный алгоритм будет работать только в том случае, если операция чтения-
  модификации- записи 
  семафора будет выполняться в непрерываемом режиме. В противном случае оба процесса 
  могут, одновременно обратившись к семафору, увидеть, что ресурс свободен, и 
  начать его совместное использование. Избежать такой ситуации и позволяет префикс 
  lock в сочетании с командами типа btr или bts, выполняющими комплексные операции 
  проверки и сброса или проверки и установки бита.<br>
  Будем считать, что семафор расположен в бите 0 байта по адресу sem, причем сброшенное 
  состояние бита свидетельствует о занятости ресурса, а установленное состояние 
  о том, что ресурс свободен. Тогда типичная процедура ожидания освобождения ресурса 
  выглядит следующим образом:</p>

</font>
<blockquote>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="3">mov SI,offset sem ;Адрес байта с 
  семафором <br>
  getsem: <br>
  lock btr byte ptr [SI],1 ;Проверка и сброс бита 0<br>
  jnc getsem</font></p>
</blockquote>
<font face="Arial, Helvetica, sans-serif" size="3">

<p>Проверка состояния семафора и его 
  модификация (запись в бит семафора 0, т.е. признака &quot;занят&quot;) осуществляется 
  в одной команде btr. На время выполнения этой команды шина многопроцессорной 
  системы блокируется префиксом lock, и другой процессор обратиться к тому же 
  семафору не может. Блокировка шины снимается уже после того, как семафор будет 
  переведен в состояние занятости.<br>
  Если при обращении к байту sem оказывается, что в битс семафора записан 0, т.е. 
  ресурс занят другим процессом, команда btr сбрасывает флаг CF (путем переноса 
  в него содержимого анализируемого бита), что приводит к многократному повторению 
  процедуры getsem, т.е. к циклу ожидания освобождения ресурса.<br>
  Типичная процедура освобождения занятого данным процессом ресурса выглядит следующим 
  образом:</p>

</font>
<blockquote>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="3">freesem:<br>
  lock bts byte ptr [SI],1 ;Проверка и установка бита 0</font></p>
</blockquote>
<font face="Arial, Helvetica, sans-serif" size="3">

<p>Собственно говоря, никакая проверка 
  здесь не выполняется, однако процесс будет освобождать ресурс лишь если он этот 
  ресурс использует, и проверять состояние флага в этой операции нет необходимости. 
  Однако и здесь необходимо запирание шины на время записи в бит семафора 1, чтобы 
  исключить одновременное обращение двух процессов к одной ячейке памяти.<br>
  386+ Префикс lock может быть использован только со следующими командами (и лишь 
  при условии, что при их выполнении происходит обращение к памяти): adc, add, 
  and, bt, bts, btr, btc, or, sbb, sub, xor, xchg, dec, inc, neg, not.</p>
<p>&nbsp;</p>

</font>
<p align="center"><font face="Arial, Helvetica, sans-serif" size="4">LODS Загрузка 
  операнда из строки</font></p>
<p align="center"><font face="Arial, Helvetica, sans-serif" size="4"> 
 LODSB Загрузка байта из строки</font></p>
<p align="center"><font face="Arial, Helvetica, sans-serif" size="4"> 
 LODSW Загрузка слова из строки</font></p>
<font face="Arial, Helvetica, sans-serif" size="3">

<p><br>
  Команды предназначены для операций над строками (строкой называется последовательность 
  байтов или слов памяти с любым содержимым). Они загружают в регистр AL (в случае 
  операций над байтами) или АХ (в случае операций над словами) содержимое ячейки 
  памяти по адресу, находящемуся в паре регистров DS:SI. Команда lodsb загружает 
  1 байт, команда lodsw - 1 слово, а команда lods может быть использована для 
  загрузки как байтов, так и слов. В последнем случае размер загружаемого данного 
  определяется описанием строки (с помощью директив db или dw). После операции 
  загрузки регистр SI получает положительное (если флаг DF=0) или отрицательное 
  (если флаг DF=1) приращение. Величина приращения составляет 1 или 2, в зависимости 
  от размера загружаемого элемента. Команда не имеет параметров и не воздействует 
  на флаги процессора.<br>
  Вариант команды lods имеет формат</p>
  <blockquote>
<p>

</font>
    <font face="Verdana, Arial, Helvetica, sans-serif" size="3">lods строка</font></p>
</blockquote>
<font face="Arial, Helvetica, sans-serif" size="3">

<p>(что не избавляет от необходимости 
  инициализировать регистры DS:SI адресом строки). В этом формате возможна замена 
  сегмента строки строка:</p>

</font>
<blockquote>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="3">lods ES:строка</font></p>
</blockquote>
<font face="Arial, Helvetica, sans-serif" size="3">

<p align="center"><b>Пример 1</b></p>
  <blockquote>
<p><br>

</font>
    <font face="Verdana, Arial, Helvetica, sans-serif" size="3">
  ;В полях данных сегмента данных, адресуемого через DS: <br>
  str db 'qwertyuiop' <br>
  ; В программном сегменте:<br>
  сld ;Двигаемся по строке вперед<br>
  mov SI, off set str ;Адрес строки<br>
  add SI,BX ;Добавим смещение (пусть ВХ=4)<br>
  lodsb ;AL='t', SI -&gt; 'у'</font></p>
</blockquote>
<font face="Arial, Helvetica, sans-serif" size="3">

<p align="center"><b>Пример 2</b></p>

  <blockquote>
<p><br>

</font>
    <font face="Verdana, Arial, Helvetica, sans-serif" size="3">
  ;В полях данных сегмента данных, адресуемого через ES:<br>
  str db 'qwertyuiop'<br>
  ;В программном сегменте:<br>
  сld ;Двигаемся по строке вперед <br>
  mov SI,offset str ;Адрес строки <br>
  lodsbES:str ;AL='q', ES:SI -&gt; 'w'</font></p>

</blockquote>
<p>
&nbsp;
</p>
<table COLS="3" WIDTH="16%">
<tr>
<td>
<font face="Arial, Helvetica, sans-serif">
<a href="Index15.htm">
<img SRC="Back.gif" BORDER="0" width="73" height="22">
</a>
</font>
</td>
<td WIDTH="10%">
<font face="Arial, Helvetica, sans-serif">
<a href="../index.html">
<img SRC="Menu.gif" BORDER="0" width="73" height="22">
</a>
</font>
</td>
<td ALIGN="RIGHT">
<font face="Arial, Helvetica, sans-serif">
<a href="Index17.htm">
<img SRC="For.gif" BORDER="0" width="73" height="22">
</a>
</font>
</td>
</tr>
</table>
</body>
</html>
