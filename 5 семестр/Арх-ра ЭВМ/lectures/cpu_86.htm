<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head> 
<title>Процессор x86</title>
<META content="text/html; charset=windows-1251" http-equiv=Content-Type>
<META content="Demon" name=Author>
<BASE TARGET="main">
<style TYPE="TEXT/CSS">
h4.Y {color: red; font-family: arial}
h2.W {color: purple ; font-family: arial}
</STYLE>
<link rel="stylesheet" href="../images/styles.css" type="text/css">
</head>


<body bgcolor="#50BECD" link="#0000FC" vlink="#ffff00" text="#000000">
<h1 CLASS="Y" align="center">Архитектура процессоров х86</h1>
<p>Первые процессоры, появившиеся в персональных ЭВМ бsли 16 разрядные. Процессор, 
  стоявший в компьютере IBM PC,&nbsp;&nbsp; был изготовлен&nbsp; фирмой Intel, 
  назывался <b>i8086</b> и работал на тактовой частоте 4,77 МГц. Процессоры &nbsp; 
  следующего&nbsp; поколения,&nbsp; 80186,&nbsp; 80188, &nbsp; 80286,&nbsp; тоже&nbsp; 
  были&nbsp; 16-ти&nbsp; разрядными, хотя имели более&nbsp; высокую&nbsp; тактовую 
  &nbsp; частоту&nbsp; и&nbsp; возможность&nbsp; работы &nbsp;&nbsp; с&nbsp; памятью&nbsp; 
  выше&nbsp; 1&nbsp; Мбайта в защищенном режиме . </p>
<p>Коротко 16-ти битные процессоры можно описать:
<UL>
  <LI> &nbspРазрядность ядра - 16 бит<br>
    <br>
  <LI> &nbsp;Число регистров - 14 <br>
    <br>
  <LI> &nbsp;Разрядность шины данных : внутренняя - 16 или 8 бит, внешняя - 16 
    бит<br>
    <br>
  <LI> &nbsp;Адресная шина - 20 бит (память до 1 Мбайта)<br>
    <br>
  <LI> &nbsp;Внутренняя кэш-память - отсутствует <br>
    <br>
  <LI> &nbsp;Внешняя шина для подключения устройств ввода/вывода - ISA (Industry 
    Standard Architecture), 16 бит, 8 МГц<br>
    <br>
</UL>
<p></p>
<p> </p>
<p class="Y">Родоначальником семейства 32-разрядных процессоров для ПЭВМ стал 
  процессор <b>i80386. </b>Этот процессор был значительным шагом вперед по сравнению 
  с предыдущими процессорами этой фирмы. Сохраняя полную совместимость с 16-битными 
  процессорами на уровне команд, он имеет следующие новшества:</p>
<ul>
  <li> &nbsp;32-разрядные регистры, шины и команды <br>
    <br>
  <li> &nbsp;Адресная шина - 32бит (память до 4Гбайт)<br>
    <br>
  <li> &nbsp;реализованный на аппаратном уровне механизм работы с виртуальной 
    памятью <br>
    <br>
  <li> &nbsp;защищенный режим, поддерживающий механизмы многопрограммной обработки<br>
    <br>
  <li> &nbsp;расширенные возможности отладки <br>
    <br>
  <li> &nbsp;режим виртуальной машины i8086 <br>
    <br>
  <li> &nbsp;повышенная производительность, связанная с конвейерной обработкой 
    данных <br>
    <br>
</ul>
<p>Следующий процессор, <b>i80486,</b> стал вдвое более производительным и воплотил 
  в себе следующие нововведения:</p>
<ul>
  <li>&nbsp;встроенный математический сопроцессор <br>
    <br>
  <li>&nbsp;кэш-память размером 8 Кбайт, размещенная на кристалле процессора <br>
</ul>
<p><font face="Times New Roman">Процессор<strong> Pentium, </strong>пришедший 
  на смену<strong> i80486,</strong> был еще более насыщен новыми технологическими 
  новинками, которые включали в себя:</font></p>
<ul>
  <li>&nbsp;суперскалярную архитектуру (несколько команд за один такт) <br>
    <br>
  <li>&nbsp;раздельное кэширование данных и команд <br>
    <br>
  <li>&nbsp;64-разрядная шину данных <br>
    <br>
  <li>&nbsp;поддержка многопроцессорности (впрочем, ограниченная) <br>
    <br>
  <li>&nbsp;средства задания размера страницы памяти <br>
    <br>
  <li>&nbsp;возможности самодиагностики и управления производительностью <br>
</ul>
<p><font face="Times New Roman">Процессоры<strong> Pentium II - Pentium IV </strong>разделились 
  на несколько подсемейств, ориентированных на различные задачи, но общим у них 
  является:</font></p>
<ul>
  <li>&nbsp;новый набор команд MMX для работы с 64-разрядными данными <br>
    <br>
  <li>&nbsp;кэш-память второго уровня (первый уровень - 64 Кбайт - размещен непосредственно 
    <br>
    <br>
    &nbsp;в ядре) размером до 512 Кбайт, работающая на половинной частоте процессора 
    <br>
    <br>
  <li>&nbsp;динамическое исполнение - возможность программирования некоторых микроопераций 
    процессора <br>
    <br>
</ul>
<h3 CLASS="W" align="center"><b>Внутренняя логическая структура процессора i8086 
  </b></h3>
<p CLASS="W" align="left">Во время работы программы команды и данные хранятся 
  в оперативной памяти. Для повышения скорости обработки данных их можно разместить 
  в 14 регистрарегистрах - ячейках памяти внутри процессора. Они имеют собственные 
  имена и обладают очень малым временем доступа к данным. содержит : AX, BX, CX, 
  DX, SI, DI, SP, BP, CS, DS, SS, ES, IP, FLAGS. Рассмотрим их. </p>
<h3 CLASS="W" align="center"><b>РЕГИСТРЫ ОБЩЕГО НАЗНАЧЕНИЯ</b></h3>
<p CLASS="Y" align="left">Первые восемь регистров являются регистрами общего назначения 
  (РОН) и содержат 2 байта, или 16 бит. В них могут храниться любые данные, хотя 
  каждый из них имеет собственное назначение:</p>
<p CLASS="Y" align="left"><b>AX </b> (Accumulator) - этот регистр используется 
  во многих арифметических операциях как один из операндов, явно и без явного 
  указания (MUL, SUB, DIV). Многие арифметические операции оптимизированы под 
  использования именно этого регистра. Старшая его часть (AH) используется для 
  указания номера вызываемой функции в обработчиках прерываний (ISR), а также 
  для возврата кода ошибки. &nbsp;&nbsp; </p>
<p></p>
<p><b> BX </b>(Base) - этот регистр используется как второй операнд в арифметических 
  операциях (MUL, DIV). Его можно использовать как индексный регистр для указания 
  смещения относительно базы (как и DI,SI,BP)</p>
<p><b>CX </b>(Counter)<b> </b>- этот регистриспользуется при организации циклов 
  (loop) и цепочечных операций (rep movs, stos, lods и т.д.)</p>
<p></p>
<p><b> DX </b>(Data) -этот регистр данных.</p>
<p>В 16 разрядных регистрах AX, BX, CX, DX могут использоваться отдельные ьайты, 
  образующие слово. Старшие половины называются соответственно AH, BH, CH, DH, 
  а младшие (биты 0..7) - AL, BL, CL, DL.</p>
<p align="center"> <b>ИНДЕКСНЫЕ РЕГИСТРЫ</b></p>
<p><b>SI (</b>Source Index)- применяется для указания смещения относительно регистров 
  BX и BP, а также относительно регистра DS в операциях с цепочками байтов (stos, 
  lods, movs.</p>
<p CLASS="W"><b>DI (</b>Destination Index) - применяется для указания смещения 
  относительно регистров BX и BP, а также относительно регистра ES в операциях 
  с цепочками байтов (stos, lods, movs..). </p>
<p></p>
<p><b> BP </b>(Base Pointer) - используется для указания смещения относительно 
  базового сегментного регистра (обычно SS) для операций передачи параметров в 
  подпрограммы через стек. </p>
<p></p>
<p><b> SP </b>(Stack Pointer) - указатель стека, модифицируется аппаратно по командам 
  push, pop, call, ret и др. Для арифметических операций не пригоден.<br>
</p>
<p align="center"><b>СЕГМЕНТНЫЕ РЕГИСТРЫ</b></p>
<p> <b>CS</b> (Code Segment) - указатель сегмента кода, хранит начальный адрес 
  сегмента памяти, в котором хранятся команды программы (сегмента кода), . Доступен 
  - только для для чтения.</p>
<p></p>
<p><b> DS</b> (Data Segment) - указатель сегмента данных, хранит начальный адрес 
  сегмента памяти, в котором хранятся данные. По умолчанию данные адресуются через 
  этот регистр.</p>
<p></p>
<p><b>ES </b>(Extra Segment) - дополнительный сегментный указатель данных, изменяя 
  его, можно адресовать любой сегмент оперативной памяти.</p>
<p></p>
<p> SS:</p>
<p> Stack Segment - указатель сегмента стека. Доступен для чтения и записи через 
  регистр.</p>
<p CLASS="Y" align="center"><b>СЧЕТЧИК КОМАНД</b></p>
<p CLASS="W"><b>IP </b>(Instruction Pointer) - указатель команд хранит смещение 
  первого байта следующей команды внутри сегмента кода. Этот регистр изменяется 
  автоматически при выполнении команд. Задать ему нужное значение можно с помощью 
  команд передачи управления.</p>
<p align="center"><b>РЕГИСТР ФЛАГОВ</b></p>
<p>Регистр флагов <b>FLAGS</b> содержит информацию о результате последней арифметико-логической 
  команды (рис. 1.4). Команды пересылки и передачи управления на него не воздействуют. 
  Этот регистр состоит из отдельных бит, называемых флагами, каждый из которых 
  имеет определенный смысл:</p>
<p><b>CF</b> (Carry) - флаг переноса. Используется арифметическкими командами 
  и командами сдвигов; <br>
  <b>OF </b>(Overflow) - флаг переполнения. Указывает, что в результате выполнения 
  арифметической команды возникло переполнение старшего разряда результата; <br>
  <b>SF</b> (Sign) - знаковый флаг. Содержит знак результата после выполнения 
  арифметических операций (0 = '+',1= '-'); <br>
<b>ZF</b> (Zero) - флаг ноля. Содержит 1, если результат арифметической операции 
  или операции сравнения ненулевой, в противном случае содержит 0; <br>
<p><b>DF</b> (Direction) - флаг напрвления. Определяет, в каком направлении будут 
  пересылаться данные строковыми командами - от младших адресов к старшим или 
  наоборот; <br>
  <b>IF</b> {Interrupt) - флаг разрешения прерываний. Указывает на возможность 
  внешних прерываний; <br>
  <b>TF </b>(Trap) - флаг пошагового выполнения. Устанавливает выполнение команд 
  процессора в пошаговом режиме (для отладки программ); <br>
  <b>AF</b> (Auxiliary) - дополнительный флаг переноса. Содержит значение переноса 
  из 3-го бита восьмибитовых данных; <br>
  <b>PF</b> (Parity) - флаг контроля четности. Содержит 1, если сумма единиц в 
  восьми младших разрядах регистра является четным числом, или 0, если она нечетна.</p>
<p>Существующие команды условной передачи управления анализируют эти биты и в 
  зависимости от их содержимого выполняют команду, расположенную по заданному 
  адресу, либо следующую за данной.</p>
<hr class=forhr align="center">
<table width="600" align="center">
  <tr> 
    <td> 
      <p align="center"><b><a href="cpu.htm" target="mainFrame">назад</a></b></p>
    </td>
    <td> 
      <p align="center"><b> </b></p>
    </td>
    <td> 
      <p align="center"><b><a href="adres.htm"target="mainFrame">вперед</a></b></p>
    </td>
  </tr>
</table>
<h1>&nbsp;</h1  >
<p><br>
</p>
</body>
</html>
