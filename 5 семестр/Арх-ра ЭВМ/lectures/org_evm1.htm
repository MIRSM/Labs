<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>Обобщенная структура ЭВМ</title>
<style><!--
.Normal
	{text-align:justify;
	line-height:23.0pt;
	font-size:14.0pt;
	font-family:"Times New Roman";}
-->
</style>
<link rel="stylesheet" href="../images/styles.css" type="text/css">
<link rel="stylesheet" href="../images/styles.css" type="text/css">
</head>
<body lang=RU class="Normal" bgcolor="#FFFFFF">
<h1 style='text-align:center'>Обобщенная структура ЭВМ</h1>
<p  align="left">Функциональная организация (архитектура) ЭВМ - это абстрактная 
  модель ЭВМ, описывающая функциональные возможности машины и предоставляемые 
  ею услуги c точки зрения пользователя. В общем случае под структурной организацией 
  ЭВМ понимается некоторая физическая модель, устанавливающая состав, порядок 
  и принципы взаимодействия основных функциональных частей машины ( устройств, 
  блоков, узлов). Функциональная организация ЭВМ играет ведущую роль и в значительной 
  степени определяет структурную организацию машины, хотя и не дает жестких ограничений 
  на конечную техническую реализацию структурных элементов. Одна и та же функция 
  может быть реализована на совершенно разных технических средствах.<br>
  <br>
  Обобщенная структура прстейшей фон-неймановской ЭВМ приведена на рис.1, </p>
<p  align="center"><img src="images/cpu1.gif" width="420" height="239"><br>
  Рис.1. Обобщенная структура ЭВМ</p>
<p  align="left">Любая ВМ может быть разделена на три части: обрабатывающая часть 
  - процессор, оперативное запоминающее устройство (ОЗУ) и. <br>
  периферийные устройства (ПУ), через которые осуществляется обмен информацией 
  остальных устройств с внешним миром.<br>
  Любой процессор содержит следующие устройства и блоки:</p>
<p  align="left">1. <b>Арифметическое устройство</b> (АЛУ), непосредственно обрабатывающее 
  данные.<br>
  2. <b>Внутреннюю память процессора</b> (СОЗУ), которое используется для для 
  хранения операндов, адресов, в том числе и очередной команды на специальном 
  регистре СК<b>(счётчик команд)</b>.<br>
  3. <b>Устройство управления </b>(УУ), которое выделяет последовательность сигналов 
  контролирующих передачу информации между между остальными устройствами в соответствии 
  с содержимом <b>регистра команд </b>РК, на который принимается очередная команда.</p>
<p>Перед началом работы исполняемая программа и исходные данные размещаются в 
  ОП. На счетчик команд загружается адрес первой команды. Затем начинактся исполнение 
  последовательности команд, каждая из которых включает ряд фаз (рис.2): </p>

  <li > Выборка команды.  </li > <br>
<li > Дешифрация команды. </li > <br>
   <li >  Выборка первого операнда. </li > <br>
   <li > Выборка второго операнда </li > <br>
  <li >   Исполнение команды.</li > <br>
   <li > Запись результата</li><br>

<p  align="center"><img src="images/cpu2.gif" width="486" height="136"> </p>
<p align="center">Рис.2 Последовательность фаз выполнения команд<br>
</p>
<p><b> Выборка команд</b> - передача содержимого счетчика команд шине адреса в 
  память, считывание команды из основной памяти в регистр команды по шине адреса, 
  модификация содержимого счетчика команд для выборки следующей команды.<br>
  <b>Дешифрация команды</b> - обработка ее кода в устройстве управления и настройка 
  всех остальных устройств.<br>
  <b>Выборка операнда</b> - вычисление адреса и обращение в основную память или 
  к регистру внутренней памяти. Операнд считывается и принимается в регистр АЛУ.<br>
  <b>Выполнение команды</b> - инициализация кодом операции цикла работы устройства 
  управления, которое, в свою очередь, управляет работой АЛУ, регистров и схем 
  сопряжения. <br>
  <b>Запись операнда</b> - результат выполнения передается в внутреннюю или основную 
  память.</p>
<p>Затем процессор переходит к выборке и выполнению следующей команды и фазы повторяются.
 
</p>


<h3 style='text-align:center'>Классификация команд или операций процессора.</h3>
<p >Система команд процессора - набор поддерживаемых данным процессором операций. 
  В настоящее время существует две основные группы систем команд:<br>
  а) CISC-архитектура (Complex Instruction Set Computer - расширенный набор команд); 
  150-300 команд.<br>
  б) RISC-архитектура (Redjust Instruction Set Computer - ограниченный набор ко-манд). 
  менее 100 команд<br>
</p>
<p >Вся система команд разделяется на следующие 
  группы выполняемых операций:</p>
<p> 1.<span style='font:7.0pt "Times New Roman"'>&nbsp; </span> команды передачи 
  данных (<span lang=EN-US>reg</span>-<span lang=EN-US>reg</span>, <span
lang=EN-US>reg</span>-<span lang=EN-US>mem</span> и т.д.);2.<span style='font:7.0pt "Times New Roman"'>&nbsp; 
  </span> арифметические операции (<span lang=EN-US>add</span>, <span lang=EN-US>subtr</span> 
  – так называемые «короткие» операции, <span lang=EN-US>mul</span>, <span lang=EN-US>div</span> 
  – так называемые «длинные» операции – чисел с фиксированной и плавающей точками), 
  десятичная арифметика (выполнение операций в <span lang=EN-US>BCD</span>-формате), 
  индексная арифметика;3.<span style='font:7.0pt "Times New Roman"'>&nbsp; </span> 
  логические операции и операции сдвига;4.<span style='font:7.0pt "Times New Roman"'>&nbsp; 
  </span> команды передачи управления;5.<span style='font:7.0pt "Times New Roman"'>&nbsp; 
  </span> команды управления процессором.</p>
<h3 align="center">Структура и формат команд. </h3>
<p >Код команд в процессоре состоит из двух частей: поля кода операции КОП и поля 
  адресной части.</p>
<p >КОП фактически представляет собой номер операции в системе команд. Адресная 
  часть указывает на адреса операндов.</p>
<table border=1 cellspacing=0 cellpadding=0 width="376">
  <tr> 
    <td width=182 valign=top class="Normal"> 
      <p align=center style='text-align:center'>код операции</p>
    </td>
    <td width=188 valign=top class="Normal"> 
      <p align=center style='text-align:center'>адресная часть</p>
    </td>
  </tr>
</table>
<p>Для сокращенного выделения количества разрядов в команде (в первую очередь 
  в адресной части) в современных процессорах используют различные способы адресности 
  команд:. </p>
<table border=1 cellspacing=0 cellpadding=0 align=left>
  <tr> 
    <td width=49 valign=top class="Normal"> 
      <p align=center style='text-align:center;    '>КОП</p>
    </td>
    <td width=49 valign=top class="Normal"> 
      <p align=center style='text-align:center;    '>А<sub>1</sub></p>
    </td>
    <td width=49 valign=top class="Normal"> 
      <p align=center style='text-align:center;    '>А<sub>2</sub></p>
    </td>
    <td width=49 valign=top class="Normal"> 
      <p align=center style='text-align:center;    '>А<sub>3</sub></p>
    </td>
  </tr>
</table>
<p align="left"> &nbsp;&nbsp;&nbsp;1. трехадресная A1 A1&lt;--A2*A3, здесь * -некоторая 
  арифметическая операция;</p>
<table border=1 cellspacing=0 cellpadding=0 align=left>
  <tr> 
    <td width=49 valign=top class="Normal"> 
      <p align=center style='text-align:center;    '>КОП</p>
    </td>
    <td width=49 valign=top class="Normal"> 
      <p align=center style='text-align:center;    '>А<sub>1</sub></p>
    </td>
    <td width=49 valign=top class="Normal"> 
      <p align=center style='text-align:center;    '>А<sub>2</sub></p>
    </td>
  </tr>
</table>
<p style='
' align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2. 
  двухадресная A1&lt;--A1*A2, </p>
<table border=1 cellspacing=0 cellpadding=0 align=left>
  <tr> 
    <td width=49 valign=top class="Normal"> 
      <p align=center style='text-align:center;    '>КОП</p>
    </td>
    <td width=49 valign=top class="Normal"> 
      <p align=center style='text-align:center;    '>А<sub>1</sub></p>
    </td>
  </tr>
</table>
<p style='
' align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3. 
  одноадресная <span
lang=EN-US>A1&lt;--A12*S, здесь S -некоторый заранее определенный регистр;</span></p>
<table border=1 cellspacing=0 cellpadding=0 align=left>
  <tr> 
    <td width=49 valign=top class="Normal"> 
      <p align=center style='text-align:center;    '>КОП</p>
    </td>
  </tr>
</table>
<p style='
'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4. 
  </span>безадресная<span>  </span>операнды однозначно определяет КОП </p>
<p>В современных процессорах наиболее часто используются способы 2-4.</p>
<p>Команды процессора можно разделить на три группы:</p>
<p>1. <span
lang=EN-US>RR</span> – регистр-регистр, оба операнда находятся в регистрах процессора;<br>
<p><span
lang=EN-US>2. RS – </span>регистр<span lang=EN-US>-</span>память<span lang=EN-US> 
  (S – Storage);</span><br>
<p>3. <span
lang=EN-US>SS</span> – память-память.<br>
</p>

<h3 align="center">Способы адресации в современных процессорах.</h3>
<p align="left">Поскольку разрядность адресной части накладывает ограничение длины 
  команды, то для обеспечения .большего адресного пространства памяти используются 
  различные способы адресации.<br>
  <br>
  а) <b>непосредственная адресация </b>- в команде задается не адрес операнда, 
  а сам операнд ,<br>
  б) <b>прямая или линейная адресация</b> - исполнительный адрес точно соответствует 
  адресной части команды. <br>
  в) <b>относительная адресация</b> - исполнительный адрес АИ определяется суммой: 
  АИ = АК + АБ, где АК - адресный код, АБ - базовый адрес. <br>
  д) <b>регистровая адресация</b> - в этом случае осуществляется адресация к регистрам 
  самого процессора, например, РОНам<br>
  г)<b>&nbsp;подразумеваемая</b> - в команде не содержится явного указания на 
  адрес операнда , а последний задается кодом операции . <br>
  е) <b>косвенная адресация</b> - адресный код команды АК не адрес операнда, а 
  адрес регистра, где находится адрес операнда;<br>
  ж) <b>автоиндексация </b>(автоинкрементная и автодекрементная адресации) - такой 
  способ можно отнести к косвенно-регистровой, но он отличается тем, что в регистр 
  заносится начальный адрес массива, а дальнейшее обращение к его элементам осуществляется 
  автоматически;<br>
  з) <b>стековая </b>- безадресное задание операндов при работе со стековой памятью. 
</p>
<h3 align="center">Типы данных</h3>
  
<p>Основными типами данных в компьютерах являются байты, слова, двойные слова 
  и квадрослова (учетверенные слова).<br>
  <b>Данных со знаком с фиксированной точкой</b>. Байт (биты 0-6 - значение, бит 
  7 - знак), слово (биты 0-14 - значение, бит 15- знак) и так далее.<br>
  <b>Данных без знака с фиксированной точкой</b>. Байт, слово и т.д. -целые положительные 
  числа. <br>
  <b>Данные с плавающей точкой</b> (слово или двайное слово) .Формат включает 
  три поля: знака, мантиссы и порядка. Поле мантиссы содержит значащие биты числа, 
  а поле порядка содержит степень 2 и определяет масштабирующий множитель для 
  мантиссы. <br>
  <b>Двоично-десятичные числа.</b> Неупакованное BCD - в байте одна цифра (биты 
  0-3 - цифра, остальные - игнорируются). Упакованное BCD - в байте две цифры 
  (по 4 бита на цифру)<br>
  <b>Символьные данные.</b>Поддерживаются строки символов в коде ASCI.</p>
<h3 align="center">Принципы организации системы прерываний.</h3>
<p> <b>Система прерываний</b> обязательная компонента современного процессора, 
  представляет собой комплекс аппаратно-программных средств, которые обеспечивают:<br>
<li>прекращение выполнения текущей программы при наступлении некоторых событий;  </li>
  <br>
  <li> переключение на программу, специально предназначенную для обслуживания поступившего 
  сообщения (обработчик прерывания);  </li><br>
  <li>обеспечение возможности возврата к первоначальной программе после завершения 
  работы от программы обслуживающей прерывание.  </li>
<br>

<p>Процессор имеет дело с двумя видами прерыванийсобытий: <br>
  1. <b>Аппаратные,</b> наступление которых вызывается внешним по отношению процессора 
  сигналом. <br>
  2. <b>Программные</b> - наступление которых инициируется специальной командой 
  в текущей программе. <br>
  <b>Насыщение системы прерываний.</b> От какого-либо источника поступает запрос 
  на прерывание, в то время как ранее поступивший запрос от этого же источника 
  ещё не обслужен.<br>
  <b>Уровневая система прерываний</b>. Одноуровневая система: это если выполняется 
  прерывание и пришёл запрос на другое прерывание, то он будет обслужен после 
  того как выполнится первое прерывание. В многоуровневой системе в той же ситуации 
  второе прерывание будет обслужено немедленно.<br>
  <b>Приоритет.</b> Как правило, в нормальных системах количество источников большое. 
  Причем источники формируют запросы асинхронно.<br>
  В системе есть приоритет запросов - который показывает, какой из поступивших 
  одновременно запросов более важный.<br>
  Приоритет программ - это приоритет ЦП по отношению к выбранному источнику прерываний. 
  Не любая программа может прерываться каждым источником.<br>
  Для программного управления приоритетом используется маскирование. Маска прерывания 
  - это двоичный код, отдельные биты которого ставятся в соответствие определённым 
  источникам прерывания и задают определённый алгоритм обработки этого прерывания.<br>
  В простейшем случае один бит - одно прерывание. <b>Маска прерывания</b> формируется 
  процессором или программистом и управляет занесением информации на регистр прерывания 
  .<br>
  <br>
  В процедуре прерывания различают два момента: <br>
  1. момент прерывания - переключение прерванной программы к прерывающей. <br>
  2. момент возврата прерывания - переход от прерывающей программы к прерванной. 
</p>
<p>
  <b>Аппаратные запросы прерывания</b> обслуживаются специальным контроллером, 
  который реагирует на запросы прерывания, выполняя:<br>
  1. фиксация наступления запроса; <br>
  2. определение, когда прерывание возможно; <br>
  3. селекция запросов - предполагает выбор запроса из поступивших с наибольшим 
  приоритетом; <br>
  4. проверка приоритета программы; <br>
  5. идентификация запроса - определение адрес вектора прерывания, который определяет 
  адрес первой команды процедуры обработки; <br>
  Дальше процессор выполняет следующие действия: <br>
  1. Сохраняет в стеке адрес возврата и содержимое других регистров. <br>
  2. Берёт вектор прерывания и загружает его в счётчик команд, с этого момента 
  начинает работать обработчик прерывания. <br>
  <b>Возврат к прерванной программе: </b>реализуется аппаратно - программным путём. 
  Цель: восстановление состояния процессора на момент прерывания. Информацию, 
  которая фиксируется на момент прерывания можно разделить: <br>
  · основная - фиксируется процессором в обязательном порядке - адрес возврата 
  и регистр флагов; <br>
  · дополнительная - фиксируется программой обработки прерываний - различные регистры 
  общего назначения (РОН), используемые в обработчике. </p>
<p> Во время возврата из обработчика все операции делаются в обратном порядке. 
  Дополнительная информация загружается программно. Основная информация восстанавливается 
  с помощью специальной команды возврат из прерывания, которая эквивалентна команде 
  возврат из подпрограммы.</p>
<h3 align="center">Иерархия памяти</h3>
<p align="left"> Классическая машина фон Неймана предполагала наличие только одного 
  устройства памяти - оперативного (ОП). Однако, современные ЭВМ имеют иерархическую 
  структуру памяти, каждый уровень которой имеет различное быстродействие и емкость. 
  Это объясняется процессора и ОП, которое необходимо скомпенсировать для повышения 
  производительности ЭВМ в целом. Кроме того, развитие программного обеспечения 
  и расширение круга задач, решаемых на ЭВМ, требовали постоянного увеличения 
  объема ОП. Однако, чем выше быстродействие, тем технически труднее и дороже 
  обходиться увеличение емкости, поэтому необходимость поддержания стоимости памяти 
  ЭВМ на приемлемом уровне, а также множество технических проблем, связанных с 
  построением быстродействующих ЗУ большого объема, и привели в процессе эволюции 
  к созданию иерархической структуры памяти современной ЭВМ.</p>
<p>В общем случае память современной ЭВМ включает в себя следующие иерархические 
  уровни:<br>
  1) <b>Сверхоперативная память (СОЗУ)</b>, которая называется еще местной памятью.<br>
  2) <b>КЭШ-память,</b> которая обычно отсутствует в простейших процессорных устройствах. 
  В более сложных ЭВМ КЭШ имеет несколько уровней, причем КЭШ верхнего уровня 
  находится в кристалле процессора.<br>
  3) <b>Оперативная память (ОП)</b>, а также системное ПЗУ,<br>
  4<b>) Внешняя память</b> - память дисковых и ленточных носителях.х.<br>
  <br>
  Устройства перечислены в порядке убывания быстродействия и увеличения объема. 
</p>
<p><br>
  Название <b>оперативная память </b>отражает тот факт, что процессор может работать 
  только с программами, которые загружены в ОП. Этот принцип был положен в основу 
  функционирования первых однозадачных ЭВМ, по этому же принципу функционируют 
  современные многозадачные однопроцессорные системы (многопроцессорные системы 
  рассмотрены во второй части настоящего курса). При отсутствии КЭШ ОП служит 
  для хранения информации, непосредственно используемой в вычислительном процессе. 
  Из ОП в процессор поступают операнды и команды, а обратно - результаты выполненных 
  операций.<br>
  Характеристики ОП непосредственно влияют на характеристики ЭВМ в целом и, прежде 
  всего, на производительность.<br>
  Объем ОП зависит от целевого назначения ЭВМ и колеблется в очень широком диапазоне 
  - от десятков Кбайт в простейших контроллерах до сотен Мбайт. В современных 
  ЭВМ ОП всегда выполняется на полупроводниковых ЗУ . С ОП общее адресное пространство 
  имеет системное ПЗУ имеет . Его объем и заполнение существенно зависят от целевого 
  назначения ЭВМ. Системное ПЗУ может хранить ядро операционной системы, утилиты, 
  драйвера, служебные и прикладные программы и т.д. При включении ЭВМ или ее работе 
  программы, записанные в системном ПЗУ, загружаются в ОП (ОЗУ) и только после 
  этого обрабатываются процессором.</p>
<p> <b>Сверхоперативная память.</b> Необходимость в СОЗУ, которые строятся на 
  полупроводниках и представляют собой наборы регистров, находящихся внутри кристалла 
  процессора в непосредственной близости от АЛУ и УУ процессора. БыстродействиеСОЗУ 
  должно соответствовать быстродействию АЛУ и УУ процессора. Объем СОЗУ очень 
  небольшой, Во многих случаях называют также внутренней регистровой памятью процессора. 
  Регистры СОЗУ используют для временного хранения результатов операции в АЛУ, 
  операндов, служебных констант, очень коротких наборов команд обрабатываемой 
  программы и т.д.</p>
<p> В процессе эволюции ЭВМ возник другой иерархический уровень буферной памяти, 
  быстродействие которого несколько ниже СОЗУП, а емкость существенно больше. 
  Это <b>КЭШ-память.</b> Память этого типа является быстродействующим буфером 
  достаточно большого объема между процессором (его внутренней памятью) и сравнительно 
  медленно действующей ОП. Эта память недоступна программисту (cash в переводе 
  означает тайник).Объем КЭШ составляет около 16-256 Кбайт на 4-8 Мбайт ОП. КЭШ-память, 
  как уже отмечалось, располагается в непосредственной близости от процессора, 
  а КЭШ верхних уровней - непосредственно в кристалле процессора. В настоящее 
  время КЭШ верхнего уровня и СОЗУ стали фактически единым иерархическим уровнем 
  внутренней памяти процессора. В IBM PC БИС нижнего уровня КЭШ располагается 
  на процессорной шине. Информация в КЭШ-память закачивается из ОП небольшими 
  блоками при этом ненужные блоки удаляются из КЭШ обратно в ОП. Алгоритмы обмена 
  КЭШ-памяти и ОП весьма строги и будут рассмотрены далее. Наличие КЭШ-памяти 
  позволяет сгладить различие в быстродействии процессора и ОП. Кроме того, КЭШ 
  память дает возможность в ряде случаев не прерывать работу процессора при обмене 
  внешних устройств с ОП в режиме прямого доступа (DMA).</p>
<p> Потребность во <b>внешней памяти</b>, объем которой существенно превосходил 
  бы размер существующих ОП, возникла в процессе эксплуатации уже первых ЭВМ. 
  Такая память могла решить многие проблемы, связанные с вводом в ЭВМ больших 
  программ, которые было невозможно разместить в ОП и, особенно, с хранением больших 
  наборов данных. Первоначально, в качестве внешней памяти ЭВМ, использовались 
  накопители на магнитных барабанах (НМБ) и магнитных лентах (НМЛ). Затем были 
  разработаны и созданы накопители на жестких и мягких магнитных дисках (НМД), 
  которые стали интенсивно вытеснять более медленные НМ. Впоследствии были созданы 
  накопители на оптических магнитных и магнитооптических дисках. <br>
  В настоящее время основным типом устройства внешней памяти является НМД. Внешнюю 
  память на НМД иногда называют оперативным внешним запоминающим устройством (ВЗУ). 
  В настоящее время НМЛ стали использоваться как архивные ВЗУ (стримеры), предназначенные 
  для резервного хранения информации. К этому же классу ВЗУ относятся накопители 
  на оптических и магнитооптических дисках. Все перечисленные ВЗУ имеют быстродействие 
  во много раз меньше, чем ОП и информация, хранимая на них, не может непосредственно 
  перерабатываться процессором и перед обработкой в процессоре информация с ВЗУ 
  должна быть помещена в ОП. <br>
</p>
<p align="left"><br>
  Подробнее материал можно изучить по учебникам [1],[2].</p>
<hr class=forhr align="center">
<div align="center">
  <table width="600">
    <tr> 
      <td width="143"> 
        <p align="center"><b><a href="org_evm.htm">назад</a></b></p>
      </td>
      <td width="208"> 
        <p align="center"><b> </b></p>
      </td>
      <td width="233"> 
        <p align="center"><b><a href="org_evm0.htm">в начало раздела</a></b></p>
      </td>
    </tr>
  </table>
</div>
<h1>&nbsp;</h1  >
<h3 align="center">&nbsp; </h3>
  <p align="left">&nbsp;</p>
</body>
</html>
