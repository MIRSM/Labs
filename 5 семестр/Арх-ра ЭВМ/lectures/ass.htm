<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
</head>

<body bgcolor="#FFFFFF" text="#000000">
 
<p>Язык Ассемблер </p>
<p>Программа на машинно-ориентированном языке ассемблера представляет собой текст 
  разбитый на строки. Каждая строка либо соответствует машинной команде, либо 
  яв-ляется директивой ассемблера или макрокомандой. Команды и директивы можно 
  набирать как большими, так и малыми латинскими буквами. Русские буквы можно 
  использовать только в комментариях. </p>
<p><имя сегмента> segment команды или директивы <имя сегмента> ends [ <имя сегмента> 
  segment команды или директивы <имя сегмента> ends ] end <метка входа в программу> 
  Директива end < метка входа в программу> </p>
<p>отмечает конец текста программы и указывает ассемблеру, где завершить трансляцию. 
  По-этому директива end должна присутствовать в каждой программе. < метка точки 
  входа > указывает инструкцию с которой должно на-чинаться выполнение программы.</p>
<p> Каждая программа содержит сегменты данных и команд, но минимально должна содержать 
  сегмент команд. Строка программы, в общем случае, состоит из четырех полей: 
</p>
<p>Поле метки Поле операции Поле операндов Поле комментария </p>
<p>M1: Add AX, BX ; сложение </p>
<p>Имена данных, процедур, сегментов или метки команд могут состоять не более 
  чем из 31 латинских букв и цифр, причем первым символом должна быть обязательно 
  буква. Большие и маленькие буквы не различа-ются. </p>
<p>Директивы ассемблера </p>
<p>Директивой называется команда транслятору для выполнения определённых данной 
  директивой действий, сама директива в текст транслиро-ванной программы не включается. 
</p>
<p>1. Директива задания исходных данных: [<имя>] d<тип> <константа>[,<константа>, 
  <константа>, . . .] · <имя> - имя массива данных, по которому к ним можно обратиться 
  из команды; · d (define) - определяет начало массива данных; · <тип> - размер 
  констант, входящих в массив: b - байт, w - слово(два байта), d - двойное слово, 
  q - учетверённое слово, t - десять байтов; · <константа> - числовой или символьный 
  элемент массива данных.</p>
<p> В ассемблере используется несколько типов констант: десятичные - последовательность 
  цифр от 0 до 9; шестнадцатеричные - последовательность шестнадцатеричных цифр 
  от 0 до 9 и от А или а до F или f завершающаяся буквой H или h, первой должна 
  быть десятичная цифра или 0;</p>
<p> восьмеричные - последовательность цифр от 0 до 7, завершающаяся буквами Q 
  или q; </p>
<p>двоичные - последовательность цифр от 0 до 1, завершающаяся бук-вой B или b;</p>
<p> символьные - символ или группа символов, заключённые в кавычки;</p>
<p> Пример:</p>
<p>data1 db 123, 0a2h, 75q, 110011b, 'a' ; задан массив data1 из 7 байт</p>
<p> Знак ? - используется для резервирования места для данных. Пример:</p>
<p>data2 dw ? ; в памяти для переменной data2 </p>
<p>Для заполнения больших массивов используется директива dup (dupli-cate): <число 
  повторений> dup(<образец>) <число повторений> - задаёт количество размещаемых 
  в памяти данных, определяемых образцом; <образец> - любая допустимая группа 
  констант. Например,</p>
<p> data2 db 23 dup(1, 2, 'x'); выделяет в памяти 23 · 3=69 байтов и заносит в 
  них образец 1, 2, 'x', </p>
<p> 2. Директива использования сегментных регистров по умолчанию: assume <имя 
  сегментного регистра>:<имя сегмента или nothing>[, <имя сегментного регистра>:<имя 
  сегмента или nothing>, …] Как отмечалось выше, для задания адреса в памяти требуется 
  два ре-гистра, один из них всегда сегментный, поэтому в команде при обращении 
  к памяти приходиться набирать имя сегментного регистра, часто одного и того 
  же. Директива assume позволяет избежать этого. Транслятор сопос-тавляет имя 
  массива данных и автоматически подставляет сегментный ре-гистр, заданный для 
  сегмента, в котором расположен данный массив. Сло-во nothing показывает, что 
  данный сегментный регистр не адресуется по умолчанию. Директива assume может 
  использоваться в программе при ка-ждом изменении сегмента для данного сегментного 
  регистра, но обяза-тельно в начале сегмента, где она задаёт по умолчанию сегментный 
  ре-гистр для сегмента кодов. Например, assume cs:code, ds:data1, es:nothing 
  Здесь code и data1 - имена сегментов кодов и данных, соответственно. </p>
</body>
</html>
