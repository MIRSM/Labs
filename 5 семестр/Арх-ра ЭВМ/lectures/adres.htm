<html>
<head>
<title>Адресация</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<link rel="stylesheet" href="../images/styles.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000">
<h1 align="center">Адресация в процессоре х86</h1>
<p>Процессор при обработке программы взаимодействует с оперативной памятью ОП, 
  которая представляется единым массивом однобайтных ячеек, обращение к которым 
  происходит по их номерам(физическим адресам). Число ячеек зависит от разрядности 
  шины адреса и составляет для процессора i8086 1Мбайт. Данные могут считываться 
  или сохранять в ОП байтами, указывая номер требуемой ячейки или словами (2 байта), 
  адрес котороых указывается по адресу младшего байта.</p>
<p>Для обращения к памяти процессор предварительно помещает адрес ячейки в один 
  из своих регистров, , очевидно, что шестнадцатиразрядный процессор i8086 не 
  может хранить в своих регистрах хдвадцатиразрядный адрес. Поэтому в нем применена 
  так называемая сегментацию памяти, которая заключается в том, что истинный, 
  физический адрес ячейки хранится в двух регистрах. Один из них - сегментный, 
  он хранит адрес начала блока памяти, который и называется сегментом. Если к 
  шестнадцати разрядам сегмента справа дописать четыре двоичных нуля (16+4=20), 
  то получим физический адрес начала сегмента в ОЗУ. Второй регистр хранит величину 
  смещения адреса требуемой ячейки от начала сегмента. Адрес ячейки памяти записывается 
  в виде двойного слова (4 байта): <b><сегмент>:<смещение>. </b>Сегмент всегда 
  начинается с ячейки, номер которой заканчивается на 4 двоичных нуля. Минимальная 
  длина сегмента 16 байтов (параграф). Максимальная длина определяется длиной 
  регистра, хранящего смещение и равна 64 Кбайта. Пара регистров CS:IPопределяют 
  адрес сле-дующей команды программы. Для адресации данных используются сегментные 
  регистры DS и ES, а в качестве регистров, хранящих смещение, используются регистры 
  общего назначения BX, SI, DI. Для работы с сегментом стека используют сегмент-ный 
  регистр SS и регистр BP. </p>
<p>Команды могут формировать адреса операндов различными способами. Реализованы 
  следующие режимы адресации:<br>
  <b>1. Регистровая прямая</b> - операнд находится в регистре.<br>
  Обозначение - <b>&lt;регистр&gt;,&lt; регистр &gt;</b> - АХ, ВХ, СХ, DX, SI, 
  DI, BP, SP, AL, BL, СL, DL, AH, BH, CH, DH.<br>
  Пример: (приведен операторами языка <a href="../library/asm1.1.1.pdf" target=_blank>ассемблера</a>)</p>
<h6> mov АХ,SI ; переслать содержимое регистра SI в регистр АХ.</h6>
<p> 2. <b>Непосредственная </b>- непосредственный операнд (константа) при-сутствует 
  в команде.<br>
  Обозначение - <b>&lt; константное выражение &gt; .</b><br>
  Пример:</p>
<h6> mov AX, 093Ah ; занести константу 093Ah в регистр АХ.</h6>
<p> 3. <b>Прямая </b>- исполнительный адрес операнда присутствует в коман-де.<br>
  Обозначение - <b>&lt; переменная &gt;+/-&lt; константное выражение &gt;.</b><br>
  Пример:</p>
<h6> mov AX, WW ; переслать в АХ слово памяти с именем WW<br>
  mov BX, WW+2 ; переслать в ВХ слово памяти отстоящее от переменной с именем 
  WW на 2 байта.</h6>
<p> 4. <b>Регистровая косвенная </b>- регистр содержит адрес операнда.<br>
  Обозначение - <b>[&lt; регистр &gt;], &lt; регистр &gt; </b>- ВХ. ВР. SI, DI.<br>
  Пример:</p>
<h6>mov [ BX ], CL ; переслать содержимое регистра CL по адресу, находящемуся 
  в регистре ВХ.</h6>
<p>5. <b>Регистровая относительная </b>- адрес операнда вычисляется как сумма 
  содержимого регистра и смещения. <br>
  Обозначение - <b>&lt; переменная &gt;[&lt; регистр &gt;] </b>или <b>[&lt; регистр 
  &gt;]&lt; константное выражение &gt;, &lt; регистр &gt;</b> - SI или DI индексная 
  адресация, ВХ или ВР - базовая адресация.<br>
  Пример:</p>
<h6>mov АХ, WW[SI] ; переслать в АХ слово из памяти, адрес которого вычисляется 
  как сумма содержимого регистра SI и смещения WW.</h6>
<p>6. <b>Индексно - базовая </b>- адрес операнда вычисляется как сумма со-держимых 
  базового и индексного регистров и смещения.<br>
  Обозначение - <b>[&lt; базов. регистр&gt;][&lt; индексн. регистр&gt;]</b> или 
  <b>&lt;переменная &gt;[&lt;базов. регистр &gt;][&lt; индекс. регистр &gt;]</b> 
  или <b>[&lt;базов. регистр &gt;][&lt; ин-декс. регистр &gt;]&lt; константное 
  выражение&gt;,</b><br>
  где &lt; индекс. регистр &gt; - SI или DI, &lt; базов. Регистр &gt; - ВХ или 
  ВР.<br>
  Пример:</p>
<h6>mov [BX+ SI+ 2], CL; переслать содержимое регистра CL по адресу, вычисляемому 
  как сумма содержимого регистров ВХ, SI и константы 2.</h6>
<p>7.<b>Стековая адресация</b> - , реализует неявное задание адреса операнда. 
  Хотя адрес обращения в стек отсутствует в команде, он формируется с помощью 
  указателя SP в котором автоматически при записи или чте-нии устанавливается 
  номер последней занятой ячейки стека.. <br>
  <br>
  <br>
</p>
<hr class=forhr align="center">
<div align="center">
  <table width="600">
    <tr> 
      <td> 
        <p align="center"><b><a href="cpu_86.htm"target="mainFrame">назад</a></b></p>
      </td>
      <td> 
        <p align="center"><b> <a href="cpu.htm"target="mainFrame">вначало</a></b></p>
      </td>
      <td> 
        <p align="center"><b><a href="istr0.htm"target="mainFrame">вперед</a></b></p>
      </td>
    </tr>
  </table>
</div>
<h1>&nbsp;</h1  >
<p><strong></strong> <strong><font color="#0000FF"></font></strong></p>
<h6>&nbsp; </h6>
</body>
</html>
