<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<meta http-equiv="Content-Language" content="ru">
<title>Введение</title>
<link rel="stylesheet" type="text/css" href="../main.css">
</head>

<body>

<hr width="745" align="left">
<table border="0" width="745" id="table3">
	<tr>
		<td>
<h2><a name="начало">Введение</a></h2>
		</td>
	</tr>
</table>
<table border="0" width="745" id="table4">
	<tr>
		<td>
<ol>
	<li><strong><a href="#как">Об ассемблере</a></strong></li>
	<li><strong><a href="#где">Синтаксис языка ассемблера</a></strong></li>
	<li><strong><a href="../index.htm">Главная страница</a></strong></li>
</ol>
		</td>
	</tr>
</table>
<hr align="left" width="745">
<table border="0" width="745" id="table2">
	<tr>
		<td>
<h3><a name="как">Об ассемблере</a></h3></td>
	</tr>
</table>
<table border="0" width="745" id="table1">
	<tr>
		<td>
<p align="justify" style="text-indent: 15px">Если коротко, то <em>язык 
ассемблера</em> — это символическое представление машинного языка. <br>
Все процессы в машине на самом низком, аппаратном уровне приводятся в действие 
только командами (инструкциями) машинного языка. Отсюда понятно, что, несмотря 
на общее название, язык ассемблера для каждого типа компьютера свой. Это 
касается и внешнего вида программ, написанных на ассемблере, и идей, отражением 
которых этот язык является.</p>
		<p align="justify" style="text-indent: 15px">Программист или любой 
		другой пользователь может использовать любые высокоуровневые средства, 
		вплоть до программ построения виртуальных миров и, возможно, даже не 
		подозревать, что на самом деле компьютер выполняет не команды языка, на 
		котором написана его программа, а их трансформированное представление в 
		форме скучной и унылой последовательности команд совсем другого языка — 
		машинного. А теперь представим, что у такого пользователя возникла 
		нестандартная проблема или просто что-то не заладилось. К примеру, его 
		программа должна работать с некоторым необычным устройством или 
		выполнять другие действия, требующие знания принципов работы аппаратуры 
		компьютера. И вот здесь-то и начинается <cite>совсем другая история...</cite>. 
		Каким бы умным ни был программист, каким бы хорошим ни был язык, на 
		котором он написал свою чудную программу, без знания ассемблера ему не 
		обойтись. И не случайно практически все компиляторы языков высокого 
		уровня содержат средства связи своих модулей с модулями на ассемблере 
		либо поддерживают выход на ассемблерный уровень программирования. </p>
		<p align="justify" style="text-indent: 15px">Внешне являясь полиглотом, 
		компьютер понимает только один язык — язык машинных команд. Конечно, для 
		общения и работы с компьютером, необязательно знать этот язык, но 
		практически любой профессиональный программист рано или поздно 
		сталкивается с необходимостью его изучения. К счастью, программисту не 
		нужно пытаться постичь значение различных комбинаций двоичных чисел, так 
		как еще в 50-е годы программисты стали использовать для программирования 
		символический аналог машинного языка, который назвали языком <em>
		ассемблера</em>. Этот язык точно отражает все особенности машинного 
		языка. Именно поэтому, в отличие от языков высокого уровня, язык 
		ассемблера для каждого типа компьютера свой. </p>
		<p align="justify" style="text-indent: 15px">Из всего вышесказанного 
		можно сделать вывод, что, так как язык ассемблера для компьютера 
		“родной”, то и самая эффективная программа может быть написана только на 
		нем (при условии, что ее пишет квалифицированный программист). Здесь 
		есть одно маленькое “но”: это очень трудоемкий, требующий большого 
		внимания и практического опыта процесс. Поэтому реально на ассемблере 
		пишут в основном программы, которые должны обеспечить эффективную работу 
		с аппаратной частью. Иногда на ассемблере пишутся критичные по времени 
		выполнения или расходованию памяти участки программы. Впоследствии они 
		оформляются в виде подпрограмм и совмещаются с кодом на языке высокого 
		уровня.</td>
	</tr>
</table>
<table border="0" width="745" id="table11">
	<tr>
		<td>
<h5><a href="#начало">Возврат в начало</a><span lang="en-us">|</span><strong><a href="../index.htm">Главная 
страница</a></strong></h5>
		</td>
	</tr>
</table>
<hr align="left" width="745">
<table border="0" width="745" id="table9">
	<tr>
		<td>
<h3><a name="где">Синтаксис языка ассемблера</a></h3>
		</td>
	</tr>
</table>
<table border="0" width="745" id="table5">
	<tr>
		<td>
<p align="justify" style="text-indent: 15px">Прежде чем двигаться дальше, 
обсудим синтаксис команд языка ассемблера. Мы должны выделить основные 
компоненты языка ассемблера, чтобы можно было затем обозначать эти компоненты с 
помощью стандартных терминов.</p>
		<p align="justify" style="text-indent: 15px">Команда языка ассемблера 
		состоит из четырех частей.<br>
		Типичная команда ассемблера Выглядит так: </p>
		<table border="1" width="745" id="table6">
			<tr bordercolor= #C0C0C0>
				<td>
				<p align="justify" style="text-indent: 15px">PART1:&nbsp;&nbsp;
				</td>
				<td>
				<p align="justify" style="text-indent: 15px">ADD&nbsp;&nbsp;
				</td>
				<td>
				<p align="justify" style="text-indent: 15px">AX,BX&nbsp;&nbsp;
				</td>
				<td>
				<p align="justify" style="text-indent: 15px">; Добавить к длине 
				буфера </td>
			</tr>
			<tr>
				<td>
				<p align="justify" style="text-indent: 15px">Метка&nbsp;&nbsp;
				</td>
				<td>
				<p align="justify" style="text-indent: 15px">ОпКод&nbsp;&nbsp;
				</td>
				<td>
				<p align="justify" style="text-indent: 15px">Операнды&nbsp;&nbsp;
				</td>
				<td>
				<p align="justify" style="text-indent: 15px">Комментарий</td>
			</tr>
		</table>
		<p align="justify" style="text-indent: 15px">&nbsp;Единственная 
		обязательная часть команды языка ассемблера - ОпКод (сокращение от 
		ОПерационный КОД).&nbsp; Программисты иногда называют машинные команды кодами 
		операций. Операционный код в утверждении языка ассемблера определяет, 
		какую операцию должен будет выполнить процессор, в нашем примере - 
		операцию сложения. </p>
		<p align="justify" style="text-indent: 15px">Поле операндов содержит 
		дополнительную информацию о команде, например, какие значения участвуют 
		в операции.&nbsp; Поле операндов определяется операционным кодом.&nbsp; Каждому 
		коду операции должно соответствовать определенное число операндов.&nbsp; Для 
		команды ADD требуется два операнда; операция перемены знака (NEG) 
		обходится лишь одним, а для некоторых команд, например, команды 
		десятичной коррекции DAA, операнды не нужны.&nbsp; В главе 4 описаны эти 
		команды и их операнды. </p>
		<p align="justify" style="text-indent: 15px">Метка и комментарий 
		необязательны&nbsp; в команде. Поле метки позволяет&nbsp; обозначить какое-либо&nbsp; 
		конкретное место&nbsp; в памяти компьютера. Использование меток - одна из 
		причин предпочтительности языка&nbsp; ассемблера&nbsp; перед&nbsp; машинным&nbsp;&nbsp;&nbsp; языком.&nbsp; 
		Превращением же символических имен в реальные адреса ведает ассемблер.
		</p>
		<p align="justify" style="text-indent: 15px">Поле комментариев служит 
		для удобства программиста. Программист может использовать это поле для 
		сообщения дополнительной информации о команде.&nbsp; Комментарий не 
		обязательно жестко связан с командой.&nbsp; Вы можете отвести под комментарий 
		целую строку, поставив в ее начале символ &quot;;&quot;.&nbsp; Это позволяет 
		программисту&nbsp;включить в листинг ассемблера блок собственной информации, 
		к примеру, описание используемого алгоритма. </td>
	</tr>
</table>
<table border="0" width="745" id="table10">
	<tr>
		<td>
<h5><a href="#начало">Возврат в начало</a><span lang="en-us">|</span><strong><a href="../index.htm">Главная 
страница</a><span lang="en-us">|</span></strong><a href="first.htm">Далее</a></h5>
		</td>
	</tr>
</table>
<hr align="left" width="745">
			<dl>
				<dd>
<h1 align="left"><font size="3">©&nbsp;ПГУ, 2004. Все права защищены.</font></h1>
				</dd>
			</dl>
			
</body>

</html>
