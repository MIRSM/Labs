<html>
<head>
<title>LOG(7)</title>
		    <style type="text/css">
TH.arial { font-family: Arial, Serif;}
P.topic { font-family: sans-serif;}
A.plain { text-decoration: none;}
A.topic01 { color: #006890;
font-family: sans-serif;
text-decoration: none;}
A.topic02 { color: #099771;
font-family: sans-serif;
text-decoration: none;}
A.topic03 { color: #719709;
font-family: sans-serif;
text-decoration: none;}
A.topic04 { color: #98650A;
font-family: sans-serif;
text-decoration: none;}
A.topic05 { color: #98340A;
font-family: sans-serif;
text-decoration: none;}
A.topic06 { color: #099607;
font-family: sans-serif;
text-decoration: none;}
A.topic07 { color: #9E1215;
font-family: sans-serif;
text-decoration: none;}
A.topic08 { color: #970941;
font-family: sans-serif;
text-decoration: none;}
A.topic09 { color: #950995;
font-family: sans-serif;
text-decoration: none;}
A.topic010 { color: #390A98;
font-family: sans-serif;
text-decoration: none;}
H1 { font-family: sans-serif;}
H2 { font-family: sans-serif;}
H3 { font-family: sans-serif;}
H4 { font-family: sans-serif;}
H5 { font-family: sans-serif;}
H6 { font-family: sans-serif;}
</style>
</head>
<body bgcolor="#FFFFFF" link="#006890" vlink="#003860" alink="#800000" text="#000000">
<table cellspacing=0 cellpadding=0 border=0 background="_pic_/header0.jpg" width="100%">
<tr><td align="center">
<table cellspacing=0 cellpadding=4 border=0 width="100%" background="">
<tr><td align="left">
<img src="_pic_/logo.gif" width=157 height=53 border=0 alt="Server for Information Technologies">
</td><td align="right">
<font size="-2">Сервер поддерживается<br><a class="plain" href="http://www.citmgu.ru">Центром Информационных Технологий</a><br>(095) 932-9212, 932-9213, 939-0783<br>E-mail: <a class=noneline href="mailto:info@citmgu.ru?Subject='From page topic CIT FORUM local copy'">info@citforum.ru</a></font>
</td></tr>
</table>
<table cellspacing=0 cellpadding=4 border=0 width="100%" background="">
<tr><td align="left">
<font size="-1">Сервер содержит море(!) аналитической информации</font>
</td><td align="right">
<font size="-1">CIT Forum CD-ROM</font>
</td></tr>
</table>
</td></tr>
</table>

<h3 align=center>LOG(7)</h3>
<p align=justify><b>НАЗВАНИЕ</b><br>
log  -  интерфейс  для регистрации ошибок и трассировки
событий псевдоустройств
<p align=justify><b>ОПИСАНИЕ</b><br>
Драйвер log обеспечивает интерфейс  для  процессов  регистрации  ошибок и трассировки событий псевдоустройств
[см. <a href=STRERR.htm>strerr(1M)</a>, <a href=STRACE.htm>strace(1M)</a>]. Log предоставляет два отдельных интерфейса: интерфейс вызова  функций  из ядра,
через который драйверы и модули псевдоустройств передают  сообщения для регистрации, а также набор команд для
системного вызова <a href=IOCTL.htm>ioctl(2)</a> для взаимодействия на  прикладном уровне с процессами регистрации и трассировки, а
также  для  процессов, которым требуется регистрировать
свои собственные сообщения.
<p align=justify><i>Вызов функций из ядра</i><br>
Сообщения передаются для регистрации  путем  вызова  из
ядра функции strlog:
<pre>
#include &lt;sys/stropts.h&gt;
#include &lt;sys/strlog.h&gt;
#include &lt;sys/log.h&gt;

strlog (mid, sid, level, flags, fmt, arg1, ...)
short mid, sid;
char level;
unsigned short flags;
char *fmt;
unsigned int arg1;
</pre><p align=justify>
Аргумент mid - это идентификатор модуля для модуля  или
драйвера,  посылающего сообщение для регистрации. Аргумент  sid  задает  дополнительный  внутренний  числовой
идентификатор,  обычно  используемый  для идентификации
младшего устройства в драйвере. Аргумент  level  -  это
уровень  приоритета трассировки, дающий возможность избирательной трассировки (пропуска  сообщений  с  низким
приоритетом).  Аргумент flags представляет собой комбинацию следующих значений:
<dl>
<dt>SL_ERROR 
<dd>Сообщение зарегистрировать, как ошибку.
<dt>SL_TRACE 
<dd>Трассировочное сообщение.
<dt>SL_FATAL 
<dd>Фатальная ошибка.
<dt>SL_NOTIFY 
<dd>Послать сообщение системному администратору  через
<a href=MAIL.htm>mail(1)</a>.
</dl>
<p align=justify>
Аргумент  fmt - это цепочка символов, задающая формат в
стиле <a href=PRINTF.htm>printf(3S)</a>, но спецификаторы %s, %e, %E, %g и  %G
не  обрабатываются.  Количество дополнительных числовых
аргументов (arg1, ...) ограничено величиной NLOGARGS (в
настоящий момент оно равно 3).
<p align=justify><i>Интерфейс пользователя</i><br>
Доступ  к  интерфейсу log обеспечивается путем открытия
устройства /dev/log через драйвер <a href=CLONE.htm>clone(7)</a>. Каждое открытие устройства /dev/log образует  отдельный  поток  к
драйверу log. Чтобы получать сообщения от драйвера log,
процесс  должен  оповестить  драйвер  с помощью команды
I_STR системного вызова <a href=IOCTL.htm>ioctl(2)</a> о своем желании  обрабатывать  сообщения об ошибках или трассировочные сообщения, указав в качестве третьего аргумента для системного вызова ioctl адрес структуры типа struct strioctl.
<pre>
struct strioctl {                               
  int  ic_cmd;     /* Команда */            
  int  ic_timout;  /* Таймаут */            
  int  ic_len;     /* Длина данных */       
  char *ic_dp;     /* Указатель на данные */
};                                              
</pre><p align=justify>
Для того, чтобы обрабатывать сообщения об ошибках,  необходимо  в поле ic_cmd передаваемой структуры записать
константу I_ERRLOG, в поле ic_len - 0, а в поле ic_dp NULL. Для того, чтобы обрабатывать трассировочные сообщения, необходимо в поле ic_cmd передаваемой  структуры
записать  константу I_TRCLOG, в поле ic_dp задать адрес
массива структур типа struct trace_ids, а в поле ic_len
- длину этого массива в байтах.
<pre>
struct trace_ids {
  short ti_mid;  
  short ti_sid;  
  char  ti_level;
};                
</pre><p align=justify>
Каждый  элемент  массива задает значения идентификатора
модуля, идентификатора устройства и уровня  принимаемых
сообщений.  Функция strlog будет выдавать только те сообщения, для которых значения идентификаторов модуля  и
устройства совпадают с указанными в массиве, а значение
уровня  не  превосходит  указанного  в массиве. Задание
значения -1 в любом из полей ti_mid,  ti_sid,  ti_level
означает отсутствие соответствующих ограничений.
<p align=justify>
В каждый момент времени только один процесс может обрабатывать сообщения об ошибках и только один процесс может обрабатывать трассировочные сообщения.
<p align=justify>
После того, как процесс  с  помощью  системного  вызова
ioctl об явил, что он будет обрабатывать сообщения, log
начинает  посылать  ему  все сообщения, удовлетворяющие
указанным ограничениям. Эти сообщения можно получить  с
помощью  системного  вызова  <a href=GETMSG.htm>getmsg(2)</a>.
<p align=justify>
Управляющая  область  сообщения содержит структуру типа
struct log_ctl, в которой указаны идентификаторы модуля
и устройства, уровень, флаги, время посылки сообщения в
тактах часов от последней загрузки системы, то же время
в секундах от 1 января 1970 года и порядковый номер.
<pre>
struct log_ctl {                                      
  short mid;                                       
  short sid;                                       
  char  level;                                     
  short flags;                                     
  long  ltime;  /* Время в тактах от загрузки */
  long  ttime;  /* Время в секундах от 1.01.1970 */
  long  seq_no; /* Порядковый номер */             
};                                                    
</pre><p align=justify>
Время в секундах от 1 января 1970  года  позволяет  узнать,  когда  было  послано сообщение, а время в тактах
позволяет получить информацию об интервалах между сообщениями. Поддерживаются два ряда последовательных номеров: для сообщений об ошибках и для трассировочных  сообщений.  Пропуски в порядковых номерах позволяют определить факт потери сообщений при чересчур  высокой  интенсивности обменов.
<p align=justify>
Область данных сообщения содержит формат - цепочку символов,  оканчивающуюся нулем, за которым следуют выровненные по границе слова NLOGARGS  слов,  представляющих
аргументы для этого формата.
<p align=justify>
Любой процесс, даже не являющийся  обработчиком  ошибок
или  трассировок,  может  посылать  сообщения  подобной
структуры драйверу log. При этом в управляющей  области
сообщения  в структуре log_ctl можно задать только поля
level и flags, остальные поля перед передачей на  обработку  заполняет сам драйвер log. Область данных должна
содержать формат, за которым,  выравненные  по  границе
слова, могут следовать до NLOGARGS слов, представляющих
аргументы.
<p align=justify>
Попытка задания команд I_ERRLOG или I_TRCLOG, когда уже
существует  процесс-обработчик того же типа, приводит к
ошибке с кодом ENXIO. Та же ошибка ENXIO выдается, если
для  команды  I_TRCLOG   не   задан   массив   структур
trace_ids, а также если третий аргумент в команде I_STR
некорректен.  Сообщения  для  драйвера log из программы
пользователя, которые имеют неправильную структуру, игнорируются без сообщений об ошибках.
<p align=justify><b>ПРИМЕРЫ</b>
<ol>
<li>Пример запроса на обработку сообщений об ошибках:
<pre>
     struct strioctl ioc;
     
     ic.ic_cmd = IERRLOG;
     ic.ic_timeout = 0;  /* Таймаут по умолчанию (15 с) */
     ic.ic_len = 0;
     ic.ic_dp = NULL;
     
     ioctl (log, I_STR, &ioc);
</pre>
<li>Пример запроса на обработку  трассировочных  сообщений:
<pre>
     struct strioctl ioc;
     struct trace_ids tid [2];
     
     tid[0].ti_mid = 2;
     tid[0].ti_sid = 0;
     tid[0].ti_level = 1;
     
     tid[1].ti_mid = 1002;
     tid[1].ti_sid = -1;     /* Любой */
     tid[1].ti_level = -1;   /* Любой */
     
     ic.ic_cmd = ITRCLOG;
     ic.ic_timeout = 0;
     ic.ic_len = 2 * sizeof (struct trace_ids);
     ic.ic_dp = (char *) tid;
     
     ioctl (log, I_STR, &ioc);
</pre>
<li>Пример передачи сообщений драйверу log (без аргументов):
<pre>
     struct strbuf ctl, dat;
     struct log_ctl lc;
     char *message = "I am waiting for you";
     
     ctl.len = ctl.maxlen = sizeof (lc);
     ctl.buf = (char *) &lc;
     
     dat.len = dat.maxlen = strlen (message) + 1;
     dat.buf = message;
     
     lc.level = 0;
     lc.flags = SL_ERROR | SL_NOTIFY;
     
     putmsg (log, &ctl, &dat, 0);
</pre>
</ol>
<p><b>ФАЙЛЫ</b>
<pre>
/dev/log
&lt;sys/stropts.h&gt;
&lt;sys/log.h&gt;
&lt;sys/strlog.h&gt;
</pre>
<p><b>СМ. ТАКЖЕ</b><br>
<a href=STRACE.htm>strace(1M)</a>, <a href=STRERR.htm>strerr(1M)</a>, <a href=CLONE.htm>clone(7)</a>.<br>
<a href=INTRO~1.htm>intro(2)</a>,  <a href=GETMSG.htm>getmsg(2)</a>, <a href=IOCTL.htm>ioctl(2)</a>, <a href=PUTMSG.htm>putmsg(2)</a> в Справочнике
программиста.
<table cellspacing=0 cellpadding=0 border=0 background="_pic_/footer0.jpg" width="100%">
<tr><td align="center">
<table cellspacing=0 cellpadding=4 border=0 width="100%" background="">
<tr><td align="right" valign="top" width="33%">
<font size="-2">Comments: <a class="plain" href="mailto:info@citmgu.ru?Subject='From bottom of CIT FORUM local copy'">info@citmgu.ru</a><br>
Designed by <a class="plain" href="mailto:andrey@novikov.com">Andrey Novikov</a><br>
Copyright &copy; <a class="plain" href="http://www.citmgu.ru/">CIT</a></font>
</td></tr>
</table>
</td></tr>
</table>
</body>
</html>
