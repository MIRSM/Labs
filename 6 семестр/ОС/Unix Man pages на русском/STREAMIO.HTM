<html>
<head>
<title>STREAMIO(7)</title>
		    <style type="text/css">
TH.arial { font-family: Arial, Serif;}
P.topic { font-family: sans-serif;}
A.plain { text-decoration: none;}
A.topic01 { color: #006890;
font-family: sans-serif;
text-decoration: none;}
A.topic02 { color: #099771;
font-family: sans-serif;
text-decoration: none;}
A.topic03 { color: #719709;
font-family: sans-serif;
text-decoration: none;}
A.topic04 { color: #98650A;
font-family: sans-serif;
text-decoration: none;}
A.topic05 { color: #98340A;
font-family: sans-serif;
text-decoration: none;}
A.topic06 { color: #099607;
font-family: sans-serif;
text-decoration: none;}
A.topic07 { color: #9E1215;
font-family: sans-serif;
text-decoration: none;}
A.topic08 { color: #970941;
font-family: sans-serif;
text-decoration: none;}
A.topic09 { color: #950995;
font-family: sans-serif;
text-decoration: none;}
A.topic010 { color: #390A98;
font-family: sans-serif;
text-decoration: none;}
H1 { font-family: sans-serif;}
H2 { font-family: sans-serif;}
H3 { font-family: sans-serif;}
H4 { font-family: sans-serif;}
H5 { font-family: sans-serif;}
H6 { font-family: sans-serif;}
</style>
</head>
<body bgcolor="#FFFFFF" link="#006890" vlink="#003860" alink="#800000" text="#000000">
<table cellspacing=0 cellpadding=0 border=0 background="_pic_/header0.jpg" width="100%">
<tr><td align="center">
<table cellspacing=0 cellpadding=4 border=0 width="100%" background="">
<tr><td align="left">
<img src="_pic_/logo.gif" width=157 height=53 border=0 alt="Server for Information Technologies">
</td><td align="right">
<font size="-2">Сервер поддерживается<br><a class="plain" href="http://www.citmgu.ru">Центром Информационных Технологий</a><br>(095) 932-9212, 932-9213, 939-0783<br>E-mail: <a class=noneline href="mailto:info@citmgu.ru?Subject='From page topic CIT FORUM local copy'">info@citforum.ru</a></font>
</td></tr>
</table>
<table cellspacing=0 cellpadding=4 border=0 width="100%" background="">
<tr><td align="left">
<font size="-1">Сервер содержит море(!) аналитической информации</font>
</td><td align="right">
<font size="-1">CIT Forum CD-ROM</font>
</td></tr>
</table>
</td></tr>
</table>

<h3 align=center>STREAMIO(7)</h3>
<p align=justify><b>НАЗВАНИЕ</b><br>
streamio - управление псевдоустройствами
<p><b>СИНТАКСИС</b>
<pre>
#include &lt;stropts.h&gt;

int ioctl (fildes, command, arg)
int fildes, command;
</pre>
<p align=justify><b>ОПИСАНИЕ</b><br>
Управление псевдоустройствами [см. <a href=INTRO~1.htm>intro(2)</a>]
<dd>выполняется с помощью системного вызова <a href=IOCTL.htm>ioctl(2)</a>, осуществляющего операции над потоками. Аргументы command и arg передаются  в поток, определяемый дескриптором файла fildes
и интерпретируются его  истоком.  Некоторые  комбинации
аргументов передаются далее модулям или драйверам потока.
<p align=justify>
Аргумент fildes - это дескриптор открытого файла, определяющий поток. Аргумент command задает выполняемую команду,  как  описано ниже. Аргумент arg задает дополнительные аргументы для этой команды. Тип  аргумента  arg
зависит от команды. Обычно это int или указатель на какую-либо структуру.
<p align=justify>
Поскольку  управление псевдоустройствами осуществляется
с помощью системного вызова <a href=IOCTL.htm>ioctl(2)</a>, ошибки, описанные
в <a href=IOCTL.htm>ioctl(2)</a>, относятся и к управлению  псевдоустройствами.  В  дополнение к этим ошибкам системный вызов может
закончиться неудачей, а переменная errno получит значение EINVAL, если поток, определяемый дескриптором  файла,  мультиплексируется,  либо  аргумент  command имеет
значение, не применимое к этому потоку.
<p align=justify>
Ошибки могут обнаруживаться модулями и драйверами псевдоустройств. В этом случае модуль или драйвер  посылает
сообщение,  содержащее код ошибки, истоку потока, переменной errno присваивается значение, равное  посланному
коду ошибки, а соответствующий системный вызов завершается неудачей.
<p align=justify>
Следующие  команды системного вызова <a href=IOCTL.htm>ioctl(2)</a> применимы
ко всем псевдоустройствам.
<dl>
<dt>I_PUSH
<dd>Помещает  модуль,  на имя которого указывает аргумент arg, на вершину потока,  определяемого  аргументом fildes, сразу под истоком. Затем вызывается
процедура открытия помещенного модуля. При неудаче
переменная  errno принимает одно из следующих значений:
<dl>
<dt>[EINVAL]
<dd>Некорректное имя модуля.
<dt>[EFAULT]
<dd>Аргумент arg указывает за пределы отведенного процессу адресного  пространства.
<dt>[ENXIO]
<dd>Ошибка в процедуре открытия помещенного
модуля.
<dt>[ENXIO]
<dd>В потоке произошло освобождение линии.
</dl>
<dt>I_POP
<dd>Удаляет  модуль,  расположенный  сразу под истоком
потока, определяемого аргументом fildes.  Аргумент
arg  должен  равняться  0.  При неудаче переменная
errno принимает одно из следующих значений:
<dl>
<dt>[EINVAL]
<dd>В потоке нет ни одного модуля.
<dt>[ENXIO]
<dd>В потоке произошло освобождение линии.
</dl>
<dt>I_LOOK
<dd>Извлекает имя модуля, расположенного сразу под истоком потока, определяемого аргументом  fildes,  и
помещает  его (как цепочку символов, завершающуюся
нулевым байтом) в буфер, на который указывает  аргумент arg. Этот буфер должен иметь длину не менее
FMNAMESZ + 1 байт. Требуется включаемый файл &lt;sys/
conf.h&gt;. При неудаче  переменная  errno  принимает
одно из следующих значений:
<dl>
<dt>[EFAULT]
<dd>Аргумент arg указывает за пределы отведенного процессу адресного  пространства.
<dt>[EINVAL]
<dd>В потоке нет ни одного модуля.
</dl>
<dt>I_FLUSH
<dd>Очищает входные или выходные очереди, в зависимости от значения аргумента arg. Допустимыми являются
следующие значения:
<dl>
<dt>FLUSHR 
<dd>Очистить входные очереди.
<dt>FLUSHW 
<dd>Очистить выходные очереди.
<dt>FLUSHRW 
<dd>Очистить входные и выходные очереди.
</dl>
При неудаче переменная  errno  принимает  одно  из
следующих значений:
<dl>
<dt>[EINVAL]
<dd>Аргумент arg некорректен.
<dt>[EAGAIN]
<dd>Не удалось захватить буфера для очистки
очередей.
<dt>[ENXIO]
<dd>В потоке произошло освобождение линии.
</dl>
<dt>I_SETSIG
<dd>Информирует  исток  потока о том, что пользователь
хочет, чтобы ядро послало ему сигнал SIGPOLL  [см.
<a href=SIGNAL.htm>signal(2)</a> и <a href=SIGSET.htm>sigset(2)</a>]
<dd>, когда в потоке, определяемом аргументом fildes, произойдет определенное событие.  Таким  образом  обеспечивается возможность
асинхронной работы с псевдоустройствами.  Значение
аргумента arg является битной маской, задающей события, при наступлении которых пользователю должен
быть послан сигнал. Маска представляет собой логическое ИЛИ следующих констант:
<dl>
<dt>S_INPUT 
<dd>В  очереди  на  чтение  истока, которая была до
этого пустой, появилось неприоритетное  сообщение.  Сообщения нулевой длины при этом тоже обрабатываются.
<dt>S_HIPRI 
<dd>В очереди на чтение истока появилось приоритетное сообщение. Сообщения нулевой длины при этом
тоже обрабатываются.
<dt>S_OUTPUT 
<dd>В очереди на запись  истока,  которая  была  до
этого  заполненной,  появилось свободное место.
Пользователь уведомляется о  возможность  посылать данные в поток.
<dt>S_MSG 
<dd>Следующим  в очереди на чтение истока стало сообщение, содержащее сигнал SIGPOLL.
</dl>
Пользовать может получать сигналы только при  поступлении  приоритетных сообщений, если он укажет в
качестве маски значение S_HIPRI.
<p>
Процессы, желающие получать сигнал SIGPOLL, должны
обязательно выдать команду I_SETSIG. Если несколько процессов запросило сигнализацию об одних и тех
же событиях одного и того же потока, при наступлении события сигналы будут посланы всем.
<p>
Если значение arg равно 0,  процесс  удаляется  из
списка  процессов,  которым  нужно посылать сигнал
SIGPOLL.
<p>
При неудаче переменная  errno  принимает  одно  из
следующих значений:
<dl>
<dt>[EINVAL]
<dd>Аргумент  arg  некорректен или аргумент
arg равен 0, но  процесс  до  этого  не
просил посылать ему сигнал SIGPOLL.
<dt>[EAGAIN]
<dd>Не  удалось  захватить буфера для обработки запроса.
</dl>
<dt>I_GETSIG
<dd>Возвращает событие, которое произошло в  потоке  и
по  поводу  которого  процессу  был  послан сигнал
SIGPOLL. События записываются в виде битной  маски
по адресу, на который указывает аргумент arg. Значения бит те же, что и в команде I_SETSIG [см. выше].
<p>
При неудаче переменная  errno  принимает  одно  из
следующих значений:
<dl>
<dt>[EINVAL]
<dd>Процесс  не  просил посылать ему сигнал
SIGPOLL.
<dt>[EFAULT]
<dd>Аргумент arg указывает за пределы отведенного процессу адресного  пространства.
</dl>
<dt>I_FIND
<dd>Сравнивает имена модулей, находящихся в потоке,  с
именем,  на  которое  указывает аргумент arg. Если
модуль с таким именем присутствует  в  потоке,  то
возвращается 1, если отсутствует - возвращается 0.
<p>
При неудаче переменная  errno  принимает  одно  из
следующих значений:
<dl>
<dt>[EFAULT]
<dd>Аргумент arg указывает за пределы отведенного процессу адресного  пространства.
<dt>[EINVAL]
<dd>Имя  модуля,  на которое указывает arg,
некорректно.
</dl>
<dt>I_PEEK
<dd>Дает возможность пользователю получить  информацию
о  первом сообщении в очереди на чтение истока потока без удаления самого сообщения из очереди. Аргумент arg  указывает  на  структуру  типа  struct
strpeek:
<pre>
   struct strpeek {         
     struct strbuf ctlbuf; 
     struct strbuf databuf;
     long          flags;  
   };                       
</pre>
Поля    ctlbuf.maxlen    и   databuf.maxlen   [см.
<a href=GETMSG.htm>getmsg(2)</a>] должны быть установлены  равными  количеству  извлекаемых  байт из управляющей области и
области данных  соответственно.  Если  поле  flags
имеет  значение RS_HIPRI, из очереди на чтение истока будут извлекаться только приоритетные сообщения.
<p>
Команда I_PEEK возвращает значение 1, если сообщение было извлечено. Результат равен 0, если в очереди не чтение истока нет сообщений или если установлен флаг RS_HIPRI, а в очереди на чтение истока
нет  приоритетных сообщений. Ожидание сообщений не
производится. При возврате поле ctlbuf задает  информацию  из управляющей области, databuf - из области  данных,  flags  содержит  значение  0   или
RS_HIPRI.
<p>
При  неудаче  переменная errno принимает следующее
значение:
<dl>
<dt>[EFAULT]
<dd>Аргумент  arg  или  компоненты структур
ctlbuf или databuf указывают за пределы
отведенного процессу  адресного  пространства.
</dl>
<dt>I_SRDOPT
<dd>Устанавливает режим чтения в соответствии со  значением аргумента arg. Допустимыми являются следующие значения:
<dl>
<dt>RNORM 
<dd>Байтный режим, по умолчанию.
<dt>RMSGD 
<dd>Режим сообщений со сбросом.
<dt>RMSGN 
<dd>Режим сообщений без сброса.
</dl>
Режимы чтения описаны в <a href=READ.htm>read(2)</a>.
<p>
При неудаче переменная errno  принимает  следующее
значение:
<dl>
<dt>[EINVAL]
<dd>Аргумент arg некорректен.
</dl>
<dt>I_GRDOPT
<dd>Возвращает текущее значение режима чтения, записывая  его  в целую переменную, на которую указывает
аргумент arg. Режимы чтения описаны в <a href=READ.htm>read(2)</a>.
<p>
При неудаче переменная errno  принимает  следующее
значение:
<dl>
<dt>[EFAULT]
<dd>Аргумент arg указывает за пределы отведенного процессу адресного  пространства.
</dl>
<dt>I_NREAD
<dd>Вычисляет  количество байт данных в первом сообщении из очереди на чтение истока и присваивает  вычисленное значение переменной, на которую указывает  аргумент  arg.  Сам системный вызов возвращает
значение, равное количеству сообщений в очереди на
чтение  истока.  Например,  если  переменной  *arg
присвоено  значение 0, а ioctl возвратил значение,
большее 0, значит, следующее сообщение  в  очереди
имеет нулевую длину.
<p>
При  неудаче  переменная errno принимает следующее
значение:
<dl>
<dt>[EFAULT]
<dd>Аргумент arg указывает за пределы отведенного процессу адресного  пространства.
</dl>
<dt>I_FDINSERT
<dd>Порождает сообщение, указанное пользователем,  добавляет  в него информацию о другом потоке и посылает сообщение вниз. Сообщение содержит  управляющую  область  и  может  содержать  область данных.
Пользователь передает команде содержимое управляющей области и области данных в разных буферах, как
описано ниже.
<p>
Аргумент arg указывает на  структуру  типа  struct
strfdinsert:
<pre>
   struct strfdinsert {         
     struct strbuf ctlbuf;
     struct strbuf databuf;
     long          flags; 
     int           fildes;
     int           offset;
   };                           
</pre>
Поле  ctlbuf.len [см. <a href=PUTMSG.htm>putmsg(2)</a>] должно иметь значение, равное размеру  указателя  плюс  количество
байт  в управляющей области сообщения. Поле fildes
задает  дескриптор  файла  другого  потока.   Поле
offset,  которое  должно быть выравнено по границе
слова, задает смещение от начала  управляющей  области ячейки памяти, куда команда I_FDINSERT занесет указатель на структуру очереди чтения драйвера
потока,  определяемого  fildes.  Поле  databuf.len
должно иметь значение, равное  количеству  байт  в
области данных сообщения, или значение 0, если область данных отсутствует.
<p>
Поле  flags задает тип посылаемого сообщения. Если
поле flags имеет значение 0, посылается  неприоритетное сообщение, а если поле flags имеет значение
RS_HIPRI,  посылается  приоритетное сообщение. Для
неприоритетных сообщений, в случае если очередь на
запись потока заполнена, команда I_FDINSERT заблокируется в ожидании свободного места. Для  приоритетных  сообщений блокировки в этом случае не происходит. Если для потока установлен флаг O_NDELAY,
то для неприоритетных  сообщений,  в  случае  если
очередь   на   запись  потока  заполнена,  команда
I_FDINSERT не блокируется, а завершается  неудачей
с присваиванием переменной errno значения EAGAIN.
<p>
Команда I_FDINSERT посылает сообщения только целиком,  и  может,  вне зависимости от приоритетности
сообщения и установки флага  O_NDELAY,  заблокироваться в ожидании свободных блоков для сообщения в
потоке  (если  при  этом  не происходит исчерпания
системных ресурсов).
<p>
При неудаче переменная  errno  принимает  одно  из
следующих значений:
<dl>
<dt>[EAGAIN]
<dd>Указано неприоритетное сообщение, в потоке установлен флаг O_NDELAY и очередь
потока на запись заполнена.
<dt>[EAGAIN]
<dd>Не удалось захватить буфера для посылки
сообщения.
<dt>[EFAULT]
<dd>Аргумент  arg  или  компоненты структур
ctlbuf или databuf указывают за пределы
отведенного процессу  адресного  пространства.
<dt>[EINVAL]
<dd>Или  поле fildes не является корректным
дескриптором открытого файла, или  значение  поля offset превосходит значение
ctlptr.len, или поле offset не выравнено по границе слова, или значение  поля
flags некорректно.
<dt>[ENXIO]
<dd>В потоке произошло освобождение линии.
<dt>[ERANGE]
<dd>Значение  поля  databuf.len  выходит за
пределы минимального или  максимального
размера сообщения, которые определяются
самым  верхним модулем потока, или превосходит максимум, заданный при генерации  системы,  или  значение   в   поле
ctlbuf.len превосходит максимум, заданный при генерации системы.
</dl>
<dt>I_STR
<dd>Порождает внутреннее управляющее сообщение из данных, указанных пользователем, и посылает сообщение
вниз.
<p>
Описываемая  команда предназначена для посылки управляющих сообщений для определенных  модулей  или
драйверов  потока.  Информация  передается вниз по
потоку до тех пор, пока не встретится модуль,  который  ее  обработает  и пошлет ответное сообщение
вверх. Команда I_STR блокируется до тех пор,  пока
не  придет  сообщение,  подтверждающее  выполнение
запрошенного действия или  отвергающее  его,  либо
истечет  определенный период времени. В случае истечения времени  команда  завершается  неудачей  с
присваиванием переменной errno значения ETIME.
<p>
Только  одна  команда  I_STR может быть активной в
потоке, все последующие команды I_STR  блокируются
до  тех  пор, пока ответ от активной команды I_STR
не дойдет до истока. Время ожидания  по  умолчанию
равен  15  секундам.  Наличие  флага O_NDELAY [см.
<a href=OPEN.htm>open(2)</a>] в этой команде игнорируется.
<p>
Аргумент arg должен указывать  на  структуру  типа
struct strioctl:
<pre>
   struct strioctl {
     int  ic_cmd;    /* Команда */
     int  ic_timout; /* Время ожидания */
     int  ic_len;    /* Длина данных */
     char *ic_dp;    /* Указатель на данные */
   };
</pre>
В поле ic_cmd задается внутренняя  команда,  предназначенная  модулю  или  драйверу  потока. В поле
ic_timeout задается время ожидания: -1 - бесконечное, 0 - по умолчанию, &gt; 0 - указанное  количество
секунд.  В поле ic_len задается длина передаваемых
данных, а в поле ic_dp - указатель на данные. Поле
ic_len используется для двух целей: на входе в нем
задается длина передаваемых данных, а на выходе  в
него  записывается длина ответа. Буфер, на который
указывает поле  ic_dp,  должен  иметь  достаточный
размер  для  приема любого ответа от любого модуля
или драйвера потока.
<p>
Исток преобразует информацию из структуры strioctl
в  формат внутреннего управляющего сообщения и посылает это сообщение вниз.
<p>
При неудаче переменная  errno  принимает  одно  из
следующих значений:
<dl>
<dt>[EAGAIN]
<dd>Не удалось захватить буфера для посылки
сообщения.
<dt>[EFAULT]
<dd>Аргумент  arg или поля ic_dp или ic_len
указывают за пределы  отведенного  процессу адресного пространства.
<dt>[EINVAL]
<dd>Значение  ic_len  меньше  0  или больше
максимума, заданного при генерации системы, или  значение  ic_timeout  меньше
-1.
<dt>[ENXIO]
<dd>В потоке произошло освобождение линии.
<dt>[ETIME]
<dd>Период  ожидания истек до получения ответа.
</dl>
Команда I_STR завершается  неудачей  без  ожидания
ответа,  если истоком получено сообщение об ошибке
или освобождении линии. Кроме того, в  положительном  или  отрицательном  ответе на сообщение может
также содержаться код ошибки. В этом случае  I_STR
завершается  неудачей, а значение переменной errno
устанавливается равным полученному коду ошибки.
<dt>I_SENDFD
<dd>Запрашивает посылку сообщения, содержащего  описатель некоторого файла, в исток потока, находящегося на другом конце конвейера, в который входит поток, определяемый аргументом fildes. Файл, об описателе  которого  идет  речь,  задается аргументом
arg, который должен быть целым числом - дескриптором открытого файла.
<p>
Команда  I_SENDFD  извлекает  системный  описатель
файла с дескриптором arg. Порождается сообщение, в
которое записывается этот описатель, а также идентификатор пользователя и идентификатор группы процесса,  выполняющего  команду  I_SENDFD. Сообщение
помещается непосредственно  в  очередь  на  чтение
[см.  <a href=INTRO~1.htm>intro(2)</a>] истока потока на другом конце конвейера, в который входит данный поток.
<p>
При неудаче переменная  errno  принимает  одно  из
следующих значений:
<dl>
<dt>[EAGAIN]
<dd>Не удалось захватить буфера для посылки
сообщения.
<dt>[EAGAIN]
<dd>Очередь на чтение истока заполнена и не
может  принять сообщение, сгенерированное по команде I_SENDFD.
<dt>[EBADF]
<dd>Аргумент  arg  не  является  корректным
дескриптором открытого файла.
<dt>[EINVAL]
<dd>Поток,  определяемый аргументом fildes,
не входит в конвейер.
<dt>[ENXIO]
<dd>В потоке произошло освобождение линии.
</dl>
<dt>I_RECVFD
<dd>Получает дескриптор файла по сообщению, посланному
командой I_SENDFD с другого конца конвейера. Аргумент  arg  указывает  на  структуру  типа   struct
strrecvfd:
<pre>
   struct strrecvfd {
     int            fd;
     unsigned short uid;
     unsigned short gid;
     char           fill [8];
   };
</pre>
В  поле  fd  возвращается дескриптор файла. В поля
uid и gid - идентификатор пользователя и идентификатор  группы   процесса,   выполнявшего   команду
I_SENDFD.
<p>
Если  отсутствует флаг O_NDELAY [см. <a href=OPEN.htm>open(2)</a>], команда I_RECVFD блокируется до  тех  пор,  пока  не
придет  какое-нибудь сообщение. Если флаг O_NDELAY
присутствует, а в истоке  нет  никаких  сообщений,
команда I_RECVFD завершается неудачей с присваиванием переменной errno значения EAGAIN.
<p>
Если полученное  сообщение  действительно  послано
командой  I_SENDFD,  образуется  новый  дескриптор
файла, описатель которого передан в сообщении. Новый дескриптор помещается в поле fd структуры типа
strrecvfd, на которую указывает аргумент arg.
<p>
При неудаче переменная  errno  принимает  одно  из
следующих значений:
<dl>
<dt>[EAGAIN]
<dd>В  потоке  установлен  флаг  O_NDELAY и
очередь потока на чтение пуста.
<dt>[EBADMSG]
<dd>Полученное сообщение послано не  командой I_SENDFD.
<dt>[EFAULT]
<dd>Аргумент arg указывает за пределы отведенного процессу адресного  пространства.
<dt>[EMFILE]
<dd>Уже имеется NOFILES дескрипторов открытых файлов.
<dt>[ENXIO]
<dd>В потоке произошло освобождение линии.
</dl>
</dl>
Следующие  две  команды используются для работы с мультиплексируемыми конфигурациями псевдоустройств:
<dl>
<dt>I_LINK
<dd>Соединить  два потока, где fildes - это дескриптор
файла для потока с мультиплексирующим драйвером, а
arg - дескриптор файла для потока с другим драйвером. Поток, заданный аргументом arg, присоединяется к мультиплексирующему драйверу. Команда  I_LINK
приводит  к посылке мультиплексирующим драйвером в
исток сообщения, говорящего о завершении  операции
присоединения.  Системный вызов при успехе возвращает идентификатор мультиплексора  (который  впоследствии   используется   для   отсоединения,  см.
I_UNLINK). При неудаче возвращается -1.
<p>
При неудаче переменная  errno  принимает  одно  из
следующих значений:
<dl>
<dt>[ENXIO]
<dd>В потоке произошло освобождение линии.
<dt>[ETIME]
<dd>Период  ожидания истек до получения ответа.
<dt>[EAGAIN]
<dd>Не  удалось захватить буфера для выполнения запроса.
<dt>[EBADF]
<dd>Аргумент  arg  не  является  корректным
дескриптором открытого файла.
<dt>[EINVAL]
<dd>Поток fildes не  поддерживает  мультиплексирования.
<dt>[EINVAL]
<dd>Аргумент  arg некорректен или поток arg
уже мультиплексируется.
<dt>[EINVAL]
<dd>Обнаружен "цикл"  в  мультиплексируемой
конфигурации,  например,  данный  исток
задан в нескольких местах конфигурации.
</dl>
Команда I_LINK завершается неудачей  без  ожидания
ответа,  если истоком потока fildes получено сообщение об ошибке или освобождении линии. Кроме  того,  в  положительном  или отрицательном ответе на
сообщение может также содержаться  код  ошибки.  В
этом случае команда I_LINK завершается неудачей, а
значение  переменной  errno устанавливается равным
полученному коду ошибки.
<dt>I_UNLINK
<dd>Раз единить   два   потока,  заданные  аргументами
fildes и arg. Аргумент  fildes  -  это  дескриптор
файла для потока с мультиплексирующим драйвером, а
arg  -  идентификатор  мультиплексора, который был
возвращен командой I_LINK при соединении  потоков.
Если  arg равен -1, от потока fildes отсоединяются
все присоединенные потоки. Так же  как  и  команда
I_LINK,  команда I_UNLINK приводит к посылке мультиплексирующим драйвером в исток сообщения,  говорящего о завершении операции отсоединения.
<p>
При  неудаче  переменная  errno  принимает одно из
следующих значений:
<dl>
<dt>[ENXIO]
<dd>В потоке произошло освобождение линии.
<dt>[ETIME]
<dd>Период  ожидания истек до получения ответа.
<dt>[EAGAIN]
<dd>Не удалось захватить буфера для посылки ответа.
<dt>[EINVAL]
<dd>Аргумент arg некорректен.
</dl>
Команда I_UNLINK завершается неудачей без ожидания
ответа, если истоком потока fildes получено  сообщение  об ошибке или освобождении линии. Кроме того, в положительном или  отрицательном  ответе  на
сообщение  может  также  содержаться код ошибки. В
этом случае команда I_UNLINK завершается неудачей,
а значение переменной errno устанавливается равным
полученному коду ошибки.
</dl>
<p><b>СМ. ТАКЖЕ</b><br>
<a href=INTRO~1.htm>intro(2)</a>,  <a href=CLOSE.htm>close(2)</a>,  <a href=FCNTL.htm>fcntl(2)</a>,  <a href=GETMSG.htm>getmsg(2)</a>,   <a href=IOCTL.htm>ioctl(2)</a>,
<a href=OPEN.htm>open(2)</a>,   <a href=POLL.htm>poll(2)</a>,   <a href=PUTMSG.htm>putmsg(2)</a>,   <a href=READ.htm>read(2)</a>,  <a href=SIGNAL.htm>signal(2)</a>,
<a href=SIGSET.htm>sigset(2)</a>, <a href=WRITE.htm>write(2)</a> в Справочнике программиста.
<p align=justify><b>ДИАГНОСТИКА</b><br>
Если не оговорено противное, то в случае успеха результат, возвращаемый системным вызовом ioctl, равен  0.  В
случае  неудачи  возвращается  -1,  а  переменной errno
присваивается код ошибки.
<table cellspacing=0 cellpadding=0 border=0 background="_pic_/footer0.jpg" width="100%">
<tr><td align="center">
<table cellspacing=0 cellpadding=4 border=0 width="100%" background="">
<tr><td align="right" valign="top" width="33%">
<font size="-2">Comments: <a class="plain" href="mailto:info@citmgu.ru?Subject='From bottom of CIT FORUM local copy'">info@citmgu.ru</a><br>
Designed by <a class="plain" href="mailto:andrey@novikov.com">Andrey Novikov</a><br>
Copyright &copy; <a class="plain" href="http://www.citmgu.ru/">CIT</a></font>
</td></tr>
</table>
</td></tr>
</table>
</body>
</html>
