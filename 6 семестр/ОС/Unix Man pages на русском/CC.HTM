<html>
<head>
<title>CC(1)</title>
		    <style type="text/css">
TH.arial { font-family: Arial, Serif;}
P.topic { font-family: sans-serif;}
A.plain { text-decoration: none;}
A.topic01 { color: #006890;
font-family: sans-serif;
text-decoration: none;}
A.topic02 { color: #099771;
font-family: sans-serif;
text-decoration: none;}
A.topic03 { color: #719709;
font-family: sans-serif;
text-decoration: none;}
A.topic04 { color: #98650A;
font-family: sans-serif;
text-decoration: none;}
A.topic05 { color: #98340A;
font-family: sans-serif;
text-decoration: none;}
A.topic06 { color: #099607;
font-family: sans-serif;
text-decoration: none;}
A.topic07 { color: #9E1215;
font-family: sans-serif;
text-decoration: none;}
A.topic08 { color: #970941;
font-family: sans-serif;
text-decoration: none;}
A.topic09 { color: #950995;
font-family: sans-serif;
text-decoration: none;}
A.topic010 { color: #390A98;
font-family: sans-serif;
text-decoration: none;}
H1 { font-family: sans-serif;}
H2 { font-family: sans-serif;}
H3 { font-family: sans-serif;}
H4 { font-family: sans-serif;}
H5 { font-family: sans-serif;}
H6 { font-family: sans-serif;}
</style>
</head>
<body bgcolor="#FFFFFF" link="#006890" vlink="#003860" alink="#800000" text="#000000">
<table cellspacing=0 cellpadding=0 border=0 background="_pic_/header0.jpg" width="100%">
<tr><td align="center">
<table cellspacing=0 cellpadding=4 border=0 width="100%" background="">
<tr><td align="left">
<img src="_pic_/logo.gif" width=157 height=53 border=0 alt="Server for Information Technologies">
</td><td align="right">
<font size="-2">Сервер поддерживается<br><a class="plain" href="http://www.citmgu.ru">Центром Информационных Технологий</a><br>(095) 932-9212, 932-9213, 939-0783<br>E-mail: <a class=noneline href="mailto:info@citmgu.ru?Subject='From page topic CIT FORUM local copy'">info@citforum.ru</a></font>
</td></tr>
</table>
<table cellspacing=0 cellpadding=4 border=0 width="100%" background="">
<tr><td align="left">
<font size="-1">Сервер содержит море(!) аналитической информации</font>
</td><td align="right">
<font size="-1">CIT Forum CD-ROM</font>
</td></tr>
</table>
</td></tr>
</table>

<h3 align=center>CC(1)</h3>
<p align=justify><b>НАЗВАНИЕ</b><br>
cc - компилятор языка C
<p><b>СИНТАКСИС</b>
<pre>
  cc  [-c] [-p] [-g] [-O] [-L каталог] [-l библиотека]
  [-W фаза,арг1[,арг2 ...] [-S] [-E] [-P] [-H] [-D имя] [-U имя]
  [-I каталог] [-B цепочка_символов] [-t [p012al]] [-w] [-#]
  файл ...
</pre>
<p align=justify><b>ОПИСАНИЕ</b><br>
 Команда cc является командой вызова  компилятора  языка
C, который генерирует ассемблерные инструкции.  Команда
cc принимает аргументы следующих типов:
<p align=justify>
Аргументы, оканчивающиеся на .c,  интерпретируются  как
имена файлов, содержащих исходные тексты  на  языке  C;
они компилируются, и каждый об ектный модуль помещается
в файл с именем, которое образуется из имени  исходного
файла замещением расширения .c на .o. Однако  об ектный
.o-файл обычно удаляется, если компилируется и одновременно загружается программа, состоящая из одного  модуля. Аналогично, аргументы, оканчивающиеся  на  .s,  интерпретируются как имена  файлов,  содержащих  исходные
тексты на языке ассемблера, и ассемблируются с  образованием об ектных .o-файлов.
<p align=justify>
Командой cc интерпретируются следующие опции [см. также
опции редактора связей <a href=LD.htm>ld(1)</a> и ассемблера <a href=AS.htm>as(1)</a>]:
<table>
<tr valign=top><td>-c<td>Отменить фазу редактирования  связей  и  создавать
об'ектный файл даже в случае программы,  состоящей
только из одного модуля.</tr>
<tr valign=top><td>-p<td>Сгенерировать  дополнительные команды для подсчета
числа обращений к каждой функции. Кроме того, если
имеет место фаза редактирования связей,  стандартная  подпрограмма  инициализации заменяется на такую,  которая   автоматически   вызывает   функцию
<a href=MONITOR.htm>monitor(3C)</a>  и обеспечивает запись файла mount.out
при  нормальном  завершении  об'ектной  программы.
Профиль  выполнения программы может быть затем получен при помощи команды <a href=PROF~1.htm>prof(1)</a>.</tr>
<tr valign=top><td>-g<td>Сгенерировать дополнительную информацию для отладчика <a href=SDB.htm>sdb(1)</a>.</tr>
<tr valign=top><td>-О<td>Включить оптимизацию об ектного кода.</tr>
<tr valign=top><td>-L каталог<td>
Дополнить каталогом список каталогов, которые  содержат об ектные библиотечные модули [для редактирования связей посредством <a href=LD.htm>ld(1)</a>].</tr>
<tr valign=top><td>-l библиотека<td>
Скомпоновать с об ектной библиотекой [для <a href=LD.htm>ld(1)</a>].</tr>
<tr valign=top><td>-W фаза,арг1[,арг2 ...]<td>
Передать аргумент(ы) заданной фазе компиляции, где
фаза - это  один  из  символов  [p012al],  которые
обозначают, соответственно,  препроцессор,  первый
проход компилятора, второй проход компилятора, оптимизатор, ассемблер, редактор  связей.  Например,
по опции -W,a,-m перед  вызовом  ассемблера  будет
вызван  макропрепроцессор <a href=M4.htm>m4(1)</a>. Такая опция имеет
смысл для файлов, содержащих ассемблерные вставки.</tr>
<tr valign=top><td>-S<td>Скомпилировать указанные C-программы  и  поместить
результат  на  языке  ассемблера в соответствующие
файлы  с  расширением  .s (в этом случае об ектные
модули не создаются).</tr>
<tr valign=top><td>-E<td>Указанные C-программы обработать только препроцессором <a href=CPP.htm>cpp(1)</a> и результат направить на  стандартный
вывод.</tr>
<tr valign=top><td>-P<td>Указанные C-программы обработать только препроцессором <a href=CPP.htm>cpp(1)</a> и результат поместить в соответствующие файлы с расширением .i.</tr>
<tr valign=top><td>-H<td>Выдать в стандартный протокол составные имена всех
участвующих в компиляции включаемых файлов.</tr>
<tr valign=top><td>-D имя<td>
Определить имя для  препроцессора.  Этот  механизм
используется в условных директивах  препроцессора,
так как позволяет определять  имена  за  пределами
исходного текста.</tr>
<tr valign=top><td>-U имя<td>
Сделать имя неопределенным для препроцессора.</tr>
<tr valign=top><td>-I каталог<td>
Изменить  алгоритм  поиска включаемых (посредством
директивы #include) файлов, имена которых не начинаются с символа /, а  именно:  сначала  искать  в
указанном  каталоге, а затем уже в каталогах стандартного списка. Так, включаемые файлы, чьи  имена
заданы  в двойных кавычках, сначала ищутся в каталоге, содержащем файл, затем в каталогах,  указанных  с  помощью  опции -I, а затем уже в каталогах
стандартного списка. Включаемые файлы,  чьи  имена
заданы  в  угловых  скобках, не ищутся в каталоге,
содержащем файл.</tr>
<tr valign=top><td>-B цепочка_символов<td>
Получать  составные  имена  программ,   заменяющих
препроцессор,  компилятор,  ассемблер  и  редактор
связей,  путем  конкатенации  цепочки_символов   с
окончаниями  cpp, c0, c1, optim, as и ld. Если цепочка_символов пуста, она трактуется как /lib/o.</tr>
<tr valign=top><td>-t [p012al]<td>
В файлах, имена которых заданы с помощью опции -B,
искать только требуемые  компилятор,  оптимизатор,
ассемблер и редактор связей. Если отсутствует  опция -B, то цепочка_символов берется равной /lib/n.
Указание опции -t "" эквивалентно -t p012.</tr>
<tr valign=top><td>-w<td>Подавить все предупреждающие сообщения.</tr>
<tr valign=top><td>-#<td>Внутренний флаг отладки; выдавать название  каждой
выполняемой фазы компиляции. Если флаг задан дважды, то фазы не выполняются, а только  распечатываются их названия.</tr>
</table><p align=justify>
Остальные аргументы рассматриваются как опции редактора
связей, имена об ектных модулей, совместимых с  C-программами (обычно эти модули получены в результате  предшествующих запусков компилятора), или, возможно, библиотек C-совместимых программ. Эти  программы,  вместе  с
результатами текущей компиляции, обрабатываются  редактором связей, и созданная выполняемая  программа,  если
не указана опция редактора связей -o, помещается в файл
a.out.
<p align=justify>
С  появлением  версии 5 операционной системы UNIX стандарт языка C был расширен. Теперь имена переменных  могут иметь произвольную длину. Этот стандарт поддерживается  на компьютерах семейства M68000. Опция -T заставляет компилятор обрезать длинные имена для  обеспечения
совместимости с более ранними версиями.
<p align=justify><b>ОКРУЖЕНИЕ</b>
<dl>
<dt>SHLIB
<dd>Если SHLIB имеет значение YES, будет использоваться разделяемая версия библиотеки libc.
<dt>STACKCHECK
<dd>Если STACKCHECK имеет значение ON, порождаются команды для контроля стека.
<dt>DBLALIGN
<dd>Если  DBLALIGN имеет значение YES, переменные размещаются с границы 32-битного  слова,  иначе  -  с
границы 16-битного слова.
<dt>STALIGN
<dd>Если  и STALIGN, и DBLALIGN имеют значение YES, то
компоненты структур будут  размещаться  с  границы
32-битного  слова (по умолчанию, с границы 16-битного слова).
<dt>FP
<dd>Если переменная FP имеет значение M68881, компилятор   генерирует   инструкции   для   сопроцессора
MC68881,  поддерживающего  арифметику вещественных
чисел. Если результат какой-либо функции  является
вещественным,  он  возвращается  только в регистре
%fp0. Если переменная FP равна M68881u, вещественные значения возвращаются еще и в  регистрах  %d0/
%d1 для совместимости со старыми библиотеками.
</dl>
<p align=justify>
Компилятор выбирает  соответствующие  версии  библиотек
libc  и libm согласно значениям переменных окружения FP
и SHLIB.
<p align=justify><b>ФАЙЛЫ</b>
<pre>
файл.c            Исходный файл.
файл.o            Об ектный файл.
файл.s            Ассемблерный файл.
a.out             Результат работы редактора связей.
/usr/tmp/ctm*     Временные файлы.
/lib/cpp          Препроцессор.
/lib/c[01]        Две фазы компиляции.
/lib/optim        Оптимизатор.
/bin/as           Ассемблер <a href=AS.htm>as(1)</a>.
/bin/ld           Редактор связей <a href=LD.htm>ld(1)</a>.
/lib/crt1.o
/lib/crtn.o       Стандартная программа инициализации.
/lib/mcrt0.o      Программа  инициализации профилирования.
/lib/libc.a       Стандартная библиотека, см. раздел 3.
/lib/libm.a       Математическая библиотека, см. раздел 3.
/lib/lib*_s.a     Разделяемые версии библиотек.
/lib/lib*881.a    Версии   библиотек  для  сопроцессора
                   арифметики вещественных чисел.
/lib/lib*881u.a   Универсальные версии библиотек.
/usr/lib/libp/*.a Версии библиотек для профилирования.
</pre>
<p align=justify><b>СМ. ТАКЖЕ</b><br>
<a href=AS.htm>as(1)</a>, <a href=CPP.htm>cpp(1)</a>, <a href=LD.htm>ld(1)</a>, <a href=PROF~1.htm>prof(1)</a>, <a href=SDB.htm>sdb(1)</a>.
<p align=justify><b>ДИАГНОСТИКА</b><br>
Диагностика, вырабатываемая компилятором языка C, может
быть иногда не очень ясной. Некоторые  сообщения  могут
быть выданы ассемблером или редактором связей.
<p align=justify><b>ПРЕДОСТЕРЕЖЕНИЯ</b><br>
По умолчанию значение, возвращаемое из C-программы, является  абсолютно  случайным.  Есть  только два способа
возвратить определенное значение - явно воспользоваться
системным вызовом exit [см. <a href=EXIT.htm>exit(2)</a>] или выйти из функции main( ) с помощью конструкции return выражение.
<table cellspacing=0 cellpadding=0 border=0 background="_pic_/footer0.jpg" width="100%">
<tr><td align="center">
<table cellspacing=0 cellpadding=4 border=0 width="100%" background="">
<tr><td align="right" valign="top" width="33%">
<font size="-2">Comments: <a class="plain" href="mailto:info@citmgu.ru?Subject='From bottom of CIT FORUM local copy'">info@citmgu.ru</a><br>
Designed by <a class="plain" href="mailto:andrey@novikov.com">Andrey Novikov</a><br>
Copyright &copy; <a class="plain" href="http://www.citmgu.ru/">CIT</a></font>
</td></tr>
</table>
</td></tr>
</table>
</body>
</html>
