<html>
<head>
<title>TERMIO(7)</title>
		    <style type="text/css">
TH.arial { font-family: Arial, Serif;}
P.topic { font-family: sans-serif;}
A.plain { text-decoration: none;}
A.topic01 { color: #006890;
font-family: sans-serif;
text-decoration: none;}
A.topic02 { color: #099771;
font-family: sans-serif;
text-decoration: none;}
A.topic03 { color: #719709;
font-family: sans-serif;
text-decoration: none;}
A.topic04 { color: #98650A;
font-family: sans-serif;
text-decoration: none;}
A.topic05 { color: #98340A;
font-family: sans-serif;
text-decoration: none;}
A.topic06 { color: #099607;
font-family: sans-serif;
text-decoration: none;}
A.topic07 { color: #9E1215;
font-family: sans-serif;
text-decoration: none;}
A.topic08 { color: #970941;
font-family: sans-serif;
text-decoration: none;}
A.topic09 { color: #950995;
font-family: sans-serif;
text-decoration: none;}
A.topic010 { color: #390A98;
font-family: sans-serif;
text-decoration: none;}
H1 { font-family: sans-serif;}
H2 { font-family: sans-serif;}
H3 { font-family: sans-serif;}
H4 { font-family: sans-serif;}
H5 { font-family: sans-serif;}
H6 { font-family: sans-serif;}
</style>
</head>
<body bgcolor="#FFFFFF" link="#006890" vlink="#003860" alink="#800000" text="#000000">
<table cellspacing=0 cellpadding=0 border=0 background="_pic_/header0.jpg" width="100%">
<tr><td align="center">
<table cellspacing=0 cellpadding=4 border=0 width="100%" background="">
<tr><td align="left">
<img src="_pic_/logo.gif" width=157 height=53 border=0 alt="Server for Information Technologies">
</td><td align="right">
<font size="-2">Сервер поддерживается<br><a class="plain" href="http://www.citmgu.ru">Центром Информационных Технологий</a><br>(095) 932-9212, 932-9213, 939-0783<br>E-mail: <a class=noneline href="mailto:info@citmgu.ru?Subject='From page topic CIT FORUM local copy'">info@citforum.ru</a></font>
</td></tr>
</table>
<table cellspacing=0 cellpadding=4 border=0 width="100%" background="">
<tr><td align="left">
<font size="-1">Сервер содержит море(!) аналитической информации</font>
</td><td align="right">
<font size="-1">CIT Forum CD-ROM</font>
</td></tr>
</table>
</td></tr>
</table>

<h3 align=center>TERMIO(7)</h3>
<p align=justify><b>НАЗВАНИЕ</b><br>
termio - общий терминальный интерфейс
<p align=justify><b>ОПИСАНИЕ</b><br>
Все асинхронные порты связи используют один  и  тот  же
общий  интерфейс, вне зависимости от подключенной аппаратуры.
<p align=justify>
Обычно при открытии файла, соответствующего  терминалу,
процесс  ожидает  установления  соединения. На практике
пользовательские программы редко сами  открывают  такие
файлы; они открываются программой <a href=GETTY.htm>getty(1M)</a> и становятся  пользовательским стандартным вводом, выводом и протоколом. Самый первый из терминальных файлов, не  ассоциированных с группой процессов, при открытии его лидером группы становится управляющим терминалом для данной
группы. Управляющий терминал играет особую роль при обработке  сигналов выхода и прерывания, как это обсуждается ниже. Управляющий терминал наследуется  процессом,
порожденным  посредством системного вызова <a href=FORK.htm>fork(2)</a>. Изменением своей  группы  [с  помощью  системного  вызова
<a href=SETPGRP.htm>setpgrp(2)</a>] процесс может разорвать эту связь.
<p align=justify>
Терминалы работают в полностью  дуплексном  (двустороннем)  режиме. Символы можно вводить в любой момент времени, даже когда происходит вывод. Потеря символов происходит только в двух случаях: когда переполняется системный буфер вводимых символов (что случается  довольно
редко)  или  когда пользователь накопил максимально допустимое число вводимых символов, а  никакая  программа
их не прочитала. В текущей версии этот предел равен 256
символам.  Если предел ввода достигнут, буфер сбрасывается и все сохраненные  символы  теряются  без  всякого
уведомления.
<p align=justify>
Обычно  терминальный  ввод  обрабатывается   построчно.
Строка  ограничивается символами перевода строки, конца
файла или конца строки. Это означает, что  при  попытке
чтения  процесс  приостанавливается до тех пор, пока не
будет введена вся строка.  При  чтении,  независимо  от
числа запрошенных символов, будет выдано не более одной
строки,  однако не обязательно всю строку читать сразу:
можно запросить любое количество символов (даже один) и
информация не будет потеряна.
<p align=justify>
Во  время  ввода  обычно выполняется обработка символов
забоя и уничтожения. По умолчанию символ  #  "забивает"
последний введенный символ (но не далее начала строки).
Символ  @ уничтожает всю вводимую строку и, быть может,
выдает перевод строки.  Оба  этих  управляющих  символа
воздействуют  только на входной буфер. Так, после ввода
табуляции, развернутой в несколько  пробелов,  удаление
последнего  символа приведет к удалению табуляции в буфере, но на экране будет удален лишь последний из  пробелов.
<p align=justify>
При вводе некоторые символы выполняют специальные функции.  Ниже  перечислены  эти  функции и соответствующие
подразумеваемые символы:
<dl>
<dt>INTR  (символ DEL в кодировке ASCII) 
<dd>Генерирует  сигнал прерывания (SIGINT), посылаемый
всем процессам, для которых данный терминал  является управляющим. Обычно каждый такой процесс терминируется, но есть средства, позволяющие проигнорировать  этот сигнал или обработать его по-своему
[см. <a href=SIGNAL.htm>signal(2)</a>].
<dt>QUIT  (CTRL+\, или символ FS в кодировке ASCII) 
<dd>Генерирует сигнал выхода (SIGQUIT), при  стандартной  реакции на который процесс не только терминируется, но и в текущем каталоге создается  файл  с
образом памяти процесса [см. <a href=CORE.htm>core(4)</a>].
<dt>SWTCH  (CTRL+Z, или символ SUB в кодировке ASCII) 
<dd>Используется менеджером семейства shell'ов  <a href=SHL.htm>shl(1)</a>
для переключения между экземплярами shell'а.
<dt>ERASE  (#) 
<dd>Забивает  предыдущий  символ,  но  не далее начала
строки, отделенного символами NL, EOF или EOL.
<dt>KILL  (@) 
<dd>Уничтожает всю строку,  выделенную  символами  NL,
EOF или EOL.
<dt>EOF  (CTRL+D, или символ EOT в кодировке ASCII) 
<dd>Может быть использован для генерации признака конца файла при вводе с терминала. При получении этого  символа  все буферизованные символы, не ожидая
перевода строки, передаются процессу, а сам символ
EOF отбрасывается. Таким образом,  если  буферизованных  символов нет, то есть EOF встретился в начале строки, в процесс будет передано 0  символов,
что и является стандартным обозначением конца файла.
<dt>NL  (символ LF в кодировке ASCII) 
<dd>Стандартный разделитель  строк  (перевод  строки).
Его нельзя изменить или экранировать.
<dt>EOL  (символ NUL в кодировке ASCII) 
<dd>Дополнительный разделитель строк, аналогичный  NL.
Обычно не используется.
<dt>EOL2
<dd>Еще один дополнительный разделитель строк.
<dt>STOP (CTRL+S, или символ DC3 в кодировке ASCII)
<dd>Обычно используется для временной приостановки вывода, когда нужно прочитать текст на экране терминала. Если вывод приостановлен, символы STOP игнорируются и не читаются.
<dt>START  (CTRL+Q, или символ DC1 в кодировке ASCII) 
<dd>Используется для возобновления вывода, приостановленного с помощью символа STOP. Если вывод не приостановлен, то символы START игнорируются и не читаются. Символы START и STOP нельзя  изменить  или
экранировать.
</dl><p align=justify>
Для выполнения функций INTR, QUIT, SWTCH, ERASE,  KILL,
EOF и EOL можно назначить символы, отличные от подразумеваемых [см. <a href=STTY~1.htm>stty(1)</a>]. Символы ERASE, KILL и EOF можно
экранировать,  то  есть  лишить их специальных функций,
если поместить перед ними символ \.
<p align=justify>
Если  пропала  несущая,  то всем процессам, для которых
данный терминал является управляющим, посылается сигнал
освобождения линии (SIGHUP). Если не предусмотрено  обработки  этого  сигнала,  то  его возникновение вызовет
терминирование процесса. Если сигнал освобождения игнорируется, то все последующие операции чтения возвращают
признак конца файла. Таким образом процессы, читающие с
терминала и проверяющие конец файла, могут соответствующим образом завершиться в случае разрыва связи.
<p align=justify>
При выполнении записи одного или более символов они передаются  терминалу только тогда, когда вывод символов,
записанных  ранее,  завершен.  Эхоотображение  вводимых
символов выполняется посредством их постановки, по мере
поступления, в очередь вывода. Если  процесс  порождает
символы  быстрее, чем они могут быть выведены, его приостановят, когда размер очереди вывода превысит некоторый предел. При уменьшении очереди до некоторого  порогового значения выполнение программы возобновляется.
<p align=justify>
С помощью системного вызова <a href=IOCTL.htm>ioctl(2)</a> над  терминальными
файлами можно выполнять различные управляющие действия.
Как правило, при этом используется следующая структура,
описанная во включаемом файле &lt;termio.h&gt;:
<pre>
#define NCC 8
struct termio {
  unsigned short c_iflag;  /* Режимы ввода */
  unsigned short c_oflag;  /* Режимы вывода */
  unsigned short c_cflag;  /* Управляющие режимы */
  unsigned short c_lflag;  /* Локальные режимы */
  char           c_line;   /* Режим работы с линией */
  unsigned char  c_cc[NCC];/* Управляющие символы */
};
</pre><p align=justify>
Соответствие  управляющих функций и символов задается в
массиве c_cc. Ниже приведены номера, приписанные  функциям, и подразумеваемые символы:
<table>
<tr><td>0<td>VINTR<td>DEL</tr>
<tr><td>1<td>VQUIT<td>FS</tr>
<tr><td>2<td>VERASE<td>#</tr>
<tr><td>3<td>VKILL<td>@</tr>
<tr><td>4<td>VEOF (VMIN)<td>EOT</tr>
<tr><td>5<td>VEOL (VTIME)<td>NUL</tr>
<tr><td>6<td>VEOL2</tr>
<tr><td>7<td>VSWTCH<td>SUB</tr>
</table><p>
Поле c_iflag описывает основные параметры терминального
ввода:
<table>
<tr><th>IGNBRK<td>0000001<td>Игнорировать ошибки протокола.</tr>
<tr><th>BRKINT<td>0000002<td>При ошибках протокола генерировать сигнал прерывания.</tr>
<tr><th>IGNPAR<td>0000004<td>Игнорировать символы с ошибками четности.</tr>
<tr><th>PARMRK<td>0000010<td>Отмечать ошибки четности.</tr>
<tr><th>INPCK<td>0000020<td>Разрешить контроль четности.</tr>
<tr><th>ISTRIP<td>0000040<td>Отбрасывать старший бит.</tr>
<tr><th>INLCR<td>0000100<td>Преобразовывать перевод строки в  возврат каретки.</tr>
<tr><th>IGNCR<td>0000200<td>Игнорировать возвраты каретки.</tr>
<tr><th>ICRNL<td>0000400<td>Преобразовывать возврат каретки в перевод строки.</tr>
<tr><th>IUCLC<td>0001000<td>Преобразовывать большие буквы в малые.</tr>
<tr><th>IXON<td>0002000<td>Разрешить  старт/стопное управление выводом.</tr>
<tr><th>IXANY<td>0004000<td>Разрешить любому  символу  возобновлять вывод.</tr>
<tr><th>IXOFF<td>0010000<td>Разрешить старт/стопное управление вводом.</tr>
</table><p align=justify>
Если  установлен бит IGNBRK, то символы с ошибками протокола и четности игнорируются (то есть не поступают  в
очередь  ввода).  В противном случае, при установленном
бите BRKINT, получение блока данных, содержащего только
нули, (нажатие клавиши прерывания) приведет к генерации
сигнала прерывания и опустошению очередей ввода/вывода.
<p align=justify>
Если установлен бит PARMRK, то символы с ошибкой протокола или четности (если они не игнорируются) вводятся в
виде последовательности из трех байт: 0377, 0, x, где x
- это данные, полученные при возникновении ошибки. Чтобы  избежать  в  этом  случае двусмысленности (если бит
ISTRIP не установлен) символ  0377  вводится  как  пара
0377,  0377. Если бит PARMRK не установлен, то при возникновении ошибки (которая  не  игнорируется)  вводится
символ NUL (0).
<p align=justify>
Если  установлен  бит INPCK, то действует контроль четности при вводе, в противном случае контроль  выключен.
Это  позволяет  формировать  четность вывода без ошибок
четности при вводе.
<p align=justify>
Если установлен бит ISTRIP, то  у  допустимых  вводимых
символов сначала отбрасывается старший бит; в противном
случае обрабатываются все 8 бит.
<p align=justify>
Если установлен бит INLCR, то вводимые символы перевода
строки преобразуются в возврат каретки. Если установлен
бит IGNCR, то символы возврата каретки игнорируются (не
вводятся); в  противном  случае,  если  установлен  бит
ICRNL, символы возврата каретки преобразуются в перевод
строки.
<p align=justify>
Если  установлен бит IUCLC, то большие буквы преобразуются в соответствующие малые буквы.
<p align=justify>
Если установлен бит IXON,  то  разрешено  старт/стопное
управление выводом. Полученный символ STOP приостановит
вывод, а символ START его возобновит. Все старт/стопные
символы  игнорируются,  то есть не вводятся. Если установлен бит IXANY, то любой введенный символ  возобновит
приостановленный вывод.
<p align=justify>
Если  установлен бит IXOFF, то система будет передавать
старт/стопные символы, когда очередь ввода почти пуста/
заполнена.
<p>
В начальном состоянии все биты поля c_iflag равны 0.
<p>
Поле c_oflag определяет системную обработку вывода:
<table>
<tr><th>OPOST<td>0000001<td>Постпроцессировать вывод.</tr>
<tr><th>OLCUC<td>0000002<td>Преобразовывать малые буквы в большие.</tr>
<tr><th>ONLCR<td>0000004<td>Преобразовывать  перевод  строки в пару (перевод строки, возврат каретки).</tr>
<tr><th>OCRNL<td>0000010<td>Преобразовывать возврат каретки в перевод строки.</tr>
<tr><th>ONOCR<td>0000020<td>Не выдавать возврат каретки  в  нулевой колонке.</tr>
<tr><th>ONLRET<td>0000040<td>Перевод  строки выполняет функции возврата каретки.</tr>
<tr><th>OFILL<td>0000100<td>Использовать для задержки передачу символов-заполнителей.</tr>
<tr><th>OFDEL<td>0000200<td>Символом-заполнителем  является DEL (по умолчанию - NUL).</tr>
<tr valign=top rowspan=3><th>NLDLY<td>0000400<td>Выбрать задержку для перевода строки:</tr>
<tr><td>NL0<td>0</tr>
<tr><td>NL1<td>0000400</tr>
<tr valign=top rowspan=5><th>CRDLY<td>0003000<td>Выбрать задержку для возврата каретки:</tr>
<tr><td>CR0<td>0</tr>
<tr><td>CR1<td>0001000</tr>
<tr><td>CR2<td>0002000</tr>
<tr><td>CR3<td>0003000</tr>
<tr valign=top rowspan=5><th>TABDLY<td>0014000<td>Выбрать задержку для горизонтальной табуляции:</tr>
<tr><td>TAB0<td>0</tr>
<tr><td>TAB1<td>0004000</tr>
<tr><td>TAB2<td>0010000</tr>
<tr><td>TAB3<td>0014000 Разворачивать  табуляцию в пробелы.</tr>
<tr valign=top rowspan=3><th>BSDLY<td>0020000<td>Выбрать задержку для возврата на шаг:</tr>
<tr><td>BS0<td>0</tr>
<tr><td>BS1<td>0020000</tr>
<tr valign=top rowspan=3><th>VTDLY<td>0040000<td>Выбрать задержку для вертикальной табуляции:</tr>
<tr><td>VT0<td>0</tr>
<tr><td>VT1<td>0040000</tr>
<tr valign=top rowspan=3><th>FFDLY<td>0100000<td>Выбрать задержку для перехода  к  новой странице:</tr>
<tr><td>FF0<td>0</tr>
<tr><td>FF1<td>0100000</tr>
</table><p align=justify>
Если  установлен бит OPOST, то выводимые символы  постпроцессируются, иначе они передаются  на  терминал  без
обработки.  Характер  обработки определяется остальными
битами режима вывода.
<p align=justify>
Если установлен бит OLCUC, то малые буквы преобразуются
при  выводе в большие. Данный режим обычно используется
вместе с IUCLC.
<p align=justify>
Если установлен бит ONLCR, то перевод строки преобразуется в пару символов (перевод строки, возврат каретки).
Если установлен бит OCRNL, то возврат каретки  преобразуется  в перевод строки. Если установлен бит ONOCR, то
в колонке 0 (первая позиция строки) возврат каретки  не
выводится. Если установлен бит ONLRET, то предполагается,  что  перевод строки выполняет функции возврата каретки; номер колонки становится  нулевым,  используются
задержки,  определенные для возврата каретки. В противном случае предполагается, что  перевод  строки  служит
только  для  перехода  к новой строке: номер колонки не
изменяется. Если передается сам символ возврата  каретки, номер колонки становится нулевым.
<p align=justify>
Биты задержки определяют время, на которое прекращается
передача. Задержка позволяет выполнить механическое или
иное  перемещение, вызванное посылкой на терминал некоторых символов. В любом случае  0  означает  отсутствие
задержки.  Если установлен бит OFILL, то вместо временной задержки будет использоваться передача символов-заполнителей. Подобный режим полезен для высокоскоростных
терминалов, когда нужна минимальная задержка. Если  установлен  бит  OFDEL, то символом-заполнителем является
DEL, в противном случае NUL.
<p align=justify>
Длительность задержки для  вертикальной  табуляции  или
перехода  к новой странице составляет примерно 2 секунды.
<p align=justify>
Задержка  для перевода строки равна примерно 0.1 секунды. Если установлен бит ONLRET, то вместо задержки  для
перевода  строки используется задержка для возврата каретки. Если установлен бит  OFILL,  будут  передаваться
два символа-заполнителя.
<p align=justify>
Задержка типа 1 для возврата каретки зависит от текущей
колонки, для типа 2 длится примерно  0.1  секунды,  для
типа  3  -  0.15 секунды. Если установлен бит OFILL, то
при задержке типа 1 передаются два символа-заполнителя,
при задержке типа 2 - четыре символа.
<p align=justify>
При горизонтальной табуляции задержка типа 1 зависит от
текущей колонки. Для типа 2 она длится около 0.1 секунды. Тип 3 специфицирует, что табуляции должны развертываться в пробелы. Если установлен бит OFILL, то для задержки любого типа передаются два символа-заполнителя.
<p align=justify>
Задержка для возврата на шаг длится около 0.05 секунды.
Если установлен бит OFILL, то будет  передаваться  один
символ-заполнитель.
<p align=justify>
Фактические задержки зависят от скорости линии связи  и
загруженности системы.
<p>
В начальном состоянии все биты поля c_oflag равны 0.
<p align=justify>
Поле  c_cflag описывает аппаратные характеристики линии
и терминала:
<table>
<tr><th rowspan=19 valign=top>CBAUD<td>0000017<td colspan=2>Скорость передачи:</tr>
<tr><td>B0<td>0<td>Освобождение линии.</tr>
<tr><td>B50<td>0000001<td>50 бод.</tr>
<tr><td>B75<td>0000002<td>75 бод.</tr>
<tr><td>B110<td>0000003<td>110 бод.</tr>
<tr><td>B134<td>0000004<td>134 бода.</tr>
<tr><td>B150<td>0000005<td>150 бод.</tr>
<tr><td>B200<td>0000006<td>200 бод.</tr>
<tr><td>B300<td>0000007<td>300 бод.</tr>
<tr><td>B600<td>0000010<td>600 бод.</tr>
<tr><td>B1200<td>0000011<td>1200 бод.</tr>
<tr><td>B1800<td>0000012<td>1800 бод.</tr>
<tr><td>B2400<td>0000013<td>2400 бод.</tr>
<tr><td>B4800<td>0000014<td>4800 бод.</tr>
<tr><td>B9600<td>0000015<td>9600 бод.</tr>
<tr><td>B19200<td>0000016<td>19200 бод.</tr>
<tr><td>EXTA<td>0000016<td>Внешний A.</tr>
<tr><td>B38400<td>0000017<td>38400 бод.</tr>
<tr><td>EXTB<td>0000017<td>Внешний B.</tr>
<tr><th valign=top rowspan=5>CSIZE<td>0000060<td colspan=2>Размер символа:</tr>
<tr><td>CS5<td>0<td>5 бит.</tr>
<tr><td>CS6<td>0000020<td>6 бит.</tr>
<tr><td>CS7<td>0000040<td>7 бит.</tr>
<tr><td>CS8<td>0000060<td>8 бит.</tr>
<tr><th>CSTOPB<td>0000100<td colspan=2>Посылать два стоп-бита, иначе один.</tr>
<tr><th>CREAD<td>0000200<td colspan=2>Разрешить прием символов.</tr>
<tr><th>PARENB<td>0000400<td colspan=2>Контролировать четность.</tr>
<tr><th>PARODD<td>0001000<td colspan=2>Проверка  на  нечетность, иначе на четность.</tr>
<tr><th>HUPCL<td>0002000<td colspan=2>Освобождение линии при последнем закрытии.</tr>
<tr><th>CLOCAL<td>0004000<td colspan=2>Локальная линия связи, иначе коммутируемая.</tr>
<tr><th>RCV1EN<td>0010000</tr>
<tr><th>XMT1EN<td>0020000</tr>
<tr><th>LOBLK<td>0040000<td colspan=2>Блокировать вывод экземпляра shell'а.</tr>
</table><p align=justify>
Биты CBAUD определяют скорость передачи данных. Нулевая
скорость  передачи,  B0,  используется  для прекращения
связи и освобождения линии. При нулевой скорости не будет выставляться сигнал готовности терминала к обработке данных, что обычно ведет к разрыву связи. Для любого
вида аппаратуры игнорируются не поддерживаемые ею изменения скорости.
<p align=justify>
Биты CZISE задают размер символа в битах как для  передачи, так и для приема данных. В этом размере не учитывается  бит четности, если он есть. Если установлен режим CSTOPB, то используется два стоп-бита, в  противном
случае  один.  Например, при скорости 110 бод требуется
два стоп-бита.
<p align=justify>
Если установлен режим PARENB, то действует как контроль
четности, так и добавление к каждому символу бита  четности. Если при этом установлен бит PARODD, выполняется
проверка  на  нечетность,  в противном случае - на четность.
<p align=justify>
Если установлен бит CREAD, то разрешен прием данных,  в
противном случае символы приниматься не будут.
<p align=justify>
Если установлен бит HUPCL, то линия связи  будет  освобождена,  когда последний процесс, открывавший ее, закроет линию или завершится. В результате  сигнал  готовности терминала к обработке данных пропадет.
<p align=justify>
Если  установлен  бит  CLOCAL,  то считается, что линия
связи локальная, с прямым соединением без модемного управления. В противном  случае  предполагается  модемное
управление.
<p align=justify>
Если  установлен  бит  LOBLK,  то   вывод   экземпляров
shell'а, не являющихся текущими, будет блокироваться. В
противном  случае  вывод разных экземпляров будет мультиплексироваться.
<p align=justify>
После открытия терминального  файла  будут  установлены
следующие  аппаратные характеристики: B300, CS8, CREAD,
HUPCL.
<p align=justify>
Поле  c_lflag структуры termio используется для детализации режима работы с терминальной линией. Базовый  режим (0) обеспечивает следующие возможности:
<table>
<tr><th>ISIG<td>0000001<td>Разрешить сигналы.</tr>
<tr><th>ICANON<td>0000002<td>Канонический ввод  (обработка  забоя  и
уничтожения).</tr>
<tr><th>XCASE<td>0000004<td>Каноническое  представление больших/малых букв.</tr>
<tr><th>ECHO<td>0000010<td>Разрешить эхо.</tr>
<tr><th>ECHOE<td>0000020<td>Отображать  символ  забоя  как  тройку:
возврат на шаг, пробел, возврат на шаг.</tr>
<tr><th>ECHOK<td>0000040<td>Выдавать  перевод  строки после символа
уничтожения.</tr>
<tr><th>ECHONL<td>0000100<td>Отображать перевод строки.</tr>
<tr><th>NOFLSH<td>0000200<td>Запретить сброс  после  прерывания  или
выхода.</tr>
</table><p align=justify>
Если  установлен  бит  ISIG,  то каждый вводимый символ
сравнивается  со  специальными  управляющими  символами
INTR, SWTCH и QUIT. В случае совпадения выполняется соответствующая  функция. Если бит ISIG не установлен, то
никакой проверки не производится. Таким образом, выполнение упомянутых  специальных  функций  ввода  возможно
только  при  установленном бите ISIG. Эти функции могут
быть отключены по отдельности, с помощью  смены  управляющего символа на маловероятное или невозможное значение (например, 0377).
<p align=justify>
Если  установлен  бит ICANON, то разрешена каноническая
обработка ввода. Это означает разрешение функций редактирования [забоя (ERASE) и уничтожения (KILL)], об единения вводимых символов в строки, разделенные символами
NL, EOF и EOL. Если бит ICANON не установлен, то запросы на чтение удовлетворяются прямо  из  очереди  ввода.
Запрос на чтение не будет удовлетворен до тех пор, пока
не поступит по крайней мере MIN символов или не истечет
время  задержки  TIME  между поступлениями символов (то
есть время TIME начинает отсчитываться после  поступления первого символа). Такой подход позволяет эффективно
читать во время вспышек активности ввода и в то же время  разрешает  посимвольный ввод. Нулевое значение TIME
трактуется как бесконечная задержка, то есть запрос  на
чтение  будет  удовлетворен,  только  когда поступит по
крайней мере MIN символов. Значения MIN и TIME хранятся
соответственно в позициях для символов EOF и  EOL  (см.
включаемый файл &lt;sys/termio.h&gt;). Время задается в десятых долях секунды.
<p align=justify>
Если установлены биты XCASE и ICANON, то при вводе буква  воспринимается  как  большая, когда перед ней стоит
символ \, и выводится в виде пары символов,  первый  из
которых  есть  \.  В  этом режиме следующие управляющие
последовательности генерируются при выводе и  воспринимаются при вводе:
<table>
<tr><th>для ввода символа:<th>используйте:</tr>
<tr><td>`<td>\'</tr>
<tr><td>|<td>\!</tr>
<tr><td>~<td>\^</tr>
<tr><td>{<td>\(</tr>
<tr><td>}<td>\)</tr>
<tr><td>\<td>\\</tr>
</table>
Например, A вводится как \a, \n как \\n, а \N как \\\n.
<p align=justify>
Если установлен бит ECHO, то при получении символа происходит его эхоотображение.
<p align=justify>
Когда установлен бит ICANON, возможны следующие функции
эхоотображения. Если установлены биты ECHO и ECHOE,  то
символ  забоя  отображается  как  тройка ASCII-символов
(BS, SP, BS), в результате чего последний из  введенных
перед  этим символов исчезнет с экрана. Если установлен
бит ECHOE, а ECHO нет, то символ забоя отображается как
пара (SP BS). Если установлен бит ECHOK, то после  символа  уничтожения  будет  выведен  перевод строки (NL),
чтобы подчеркнуть факт уничтожения. Заметим, что символы забоя и уничтожения могут  быть  экранированы,  если
перед  ними поместить \, и тогда они теряют специальный
смысл. Если установлен бит ECHONL,  то  перевод  строки
будет отображаться даже в том случае, когда не установлен  бит  ECHO,  что полезно для терминалов с локальным
эхоотображением (так называемых полудуплексных). Символ
конца файла (EOF) не отображается, если  только  он  не
экранирован.  Так  как  подразумеваемым признаком конца
файла служит ASCII-символ EOT (конец  передачи),  эхоотображение  конца файла привело бы к освобождению линии
терминалами, отвечающими на EOT.
<p align=justify>
Если  установлен  бит  NOFLSH,  то не будет выполняться
обычно применяемый сброс очередей ввода  и  вывода  при
получении символов выхода, переключения и прерывания.
<p>
В начальном состоянии все биты поля c_lflag равны 0.
<p align=justify>
Основные  системные  вызовы  <a href=IOCTL.htm>ioctl(2)</a>  для терминальных
файлов имеют вид:
<pre>
     ioctl (fildes, command, arg)
     struct termio *arg;
</pre>
Подобный вид имеют следующие команды:
<dl>
<dt>TCGETA 
<dd>Получить параметры, ассоциированные с данным  терминалом и поместить их в структуру типа termio, на
которую указывает аргумент arg.
<dt>TCSETA 
<dd>Присвоить  параметрам,  ассоциированным  с  данным
терминалом, значения из структуры, на которую указывает аргумент arg.
<dt>TCSETAW 
<dd>Дождаться окончания вывода, прежде чем  устанавливать  новые параметры. Эту форму следует применять
при изменении параметров, влияющих на вывод.
<dt>TCSETAF 
<dd>Дождаться окончания вывода, затем сбросить очередь
ввода и установить новые параметры.
</dl>
Дополнительные вызовы <a href=IOCTL.htm>ioctl(2)</a> имеют вид:
<pre>
     ioctl (fildes, command, arg)
     int arg;
</pre>
Этот вид имеют следующие команды:
<dl>
<dt>TCSBRK 
<dd>Подождать окончания вывода; затем, если arg  равен
нулю,  вызвать нарушение протокола (в течение 0.25
секунды посылать нулевые биты).
<dt>TCXONC 
<dd>Старт/стопное управление. Если arg равен нулю,  то
приостановить вывод; если 1, то возобновить приостановленный вывод.
<dt>TCFLSH 
<dd>Если arg равен 0, то сбросить очередь ввода;  если
1, то сбросить очередь вывода; если 2, то сбросить
обе очереди.
</dl>
<p><b>ФАЙЛЫ</b>
<pre>
/dev/tty*
&lt;sys/termio.h&gt;
</pre>
<p><b>СМ. ТАКЖЕ</b><br>
<a href=STTY~1.htm>stty(1)</a> в Справочнике пользователя.<br>
<a href=FORK.htm>fork(2)</a>,  <a href=IOCTL.htm>ioctl(2)</a>, <a href=SETPGRP.htm>setpgrp(2)</a>, <a href=SIGNAL.htm>signal(2)</a> в Справочнике
программиста.
<table cellspacing=0 cellpadding=0 border=0 background="_pic_/footer0.jpg" width="100%">
<tr><td align="center">
<table cellspacing=0 cellpadding=4 border=0 width="100%" background="">
<tr><td align="right" valign="top" width="33%">
<font size="-2">Comments: <a class="plain" href="mailto:info@citmgu.ru?Subject='From bottom of CIT FORUM local copy'">info@citmgu.ru</a><br>
Designed by <a class="plain" href="mailto:andrey@novikov.com">Andrey Novikov</a><br>
Copyright &copy; <a class="plain" href="http://www.citmgu.ru/">CIT</a></font>
</td></tr>
</table>
</td></tr>
</table>
</body>
</html>
