<html>
<head>
<title>SDB(1) </title>
		    <style type="text/css">
TH.arial { font-family: Arial, Serif;}
P.topic { font-family: sans-serif;}
A.plain { text-decoration: none;}
A.topic01 { color: #006890;
font-family: sans-serif;
text-decoration: none;}
A.topic02 { color: #099771;
font-family: sans-serif;
text-decoration: none;}
A.topic03 { color: #719709;
font-family: sans-serif;
text-decoration: none;}
A.topic04 { color: #98650A;
font-family: sans-serif;
text-decoration: none;}
A.topic05 { color: #98340A;
font-family: sans-serif;
text-decoration: none;}
A.topic06 { color: #099607;
font-family: sans-serif;
text-decoration: none;}
A.topic07 { color: #9E1215;
font-family: sans-serif;
text-decoration: none;}
A.topic08 { color: #970941;
font-family: sans-serif;
text-decoration: none;}
A.topic09 { color: #950995;
font-family: sans-serif;
text-decoration: none;}
A.topic010 { color: #390A98;
font-family: sans-serif;
text-decoration: none;}
H1 { font-family: sans-serif;}
H2 { font-family: sans-serif;}
H3 { font-family: sans-serif;}
H4 { font-family: sans-serif;}
H5 { font-family: sans-serif;}
H6 { font-family: sans-serif;}
</style>
</head>
<body bgcolor="#FFFFFF" link="#006890" vlink="#003860" alink="#800000" text="#000000">
<table cellspacing=0 cellpadding=0 border=0 background="_pic_/header0.jpg" width="100%">
<tr><td align="center">
<table cellspacing=0 cellpadding=4 border=0 width="100%" background="">
<tr><td align="left">
<img src="_pic_/logo.gif" width=157 height=53 border=0 alt="Server for Information Technologies">
</td><td align="right">
<font size="-2">Сервер поддерживается<br><a class="plain" href="http://www.citmgu.ru">Центром Информационных Технологий</a><br>(095) 932-9212, 932-9213, 939-0783<br>E-mail: <a class=noneline href="mailto:info@citmgu.ru?Subject='From page topic CIT FORUM local copy'">info@citforum.ru</a></font>
</td></tr>
</table>
<table cellspacing=0 cellpadding=4 border=0 width="100%" background="">
<tr><td align="left">
<font size="-1">Сервер содержит море(!) аналитической информации</font>
</td><td align="right">
<font size="-1">CIT Forum CD-ROM</font>
</td></tr>
</table>
</td></tr>
</table>

<h3 align=center>SDB(1) </h3>
<p align=justify><b>НАЗВАНИЕ</b><br>
sdb - символьный отладчик
<p><b>СИНТАКСИС</b>
<pre>
	sdb  [-W] [-w] [объектный_файл [образ_памяти [список_каталогов]]]
</pre>
<p align=justify><b>ОПИСАНИЕ</b><br>
По команде sdb запускается символьный  отладчик,  предназначенный для отладки программ на языках C и  Фортран
77. Его можно использовать для анализа объектных файлов
и образа памяти, а также для  выполнения  программ  под
управлением пользователя.
<p align=justify>объектный_файл - это файл с выполняемой программой, откомпилированной с опцией -g (отладка). Если она не была
компилирована с опцией -g, возможности  символьной  отладки ограничиваются, но объектный_файл можно  анализировать, равно как можно отлаживаться на уровне машинных
команд и процедур. По умолчанию объектный_файл - a.out.
<p align=justify>Образ_памяти - это файл с  образом  памяти,  полученный
после завершения выполнения объектного_файла. По  умолчанию имя образа_памяти есть core. Образ_памяти не обязан присутствовать; знак - на его месте ведет к игнорированию образа.
<p align=justify>Список_каталогов, в котором отдельные каталоги разделены двоеточием, используется для поиска файлов с  исходными текстами отлаживаемой программы.
<p align=justify>Команда sdb обрабатывает следующие опции:
<table>
<tr valign=top><th>-W  <td> Если файлы с исходными  текстами  отсутствуют  или
оказываются новее,  чем  объектный_файл,  выдается
предупреждение. Опция -W подавляет проверку и, соответственно, выдачу предупреждения.
<tr valign=top><th>-w <td>  Разрешение изменять объектный_файл и образ_памяти.
</table>
<p align=justify>В каждый момент времени определены текущая строка и текущий файл. Если образ_памяти существует и не игнорируется, то первоначально  текущими  становятся  строка  и
файл с исходным текстом, содержащим последний выполнявшийся оператор. Если образа_памяти нет, текущими становятся первая строка процедуры  main  и  соответствующий
файл. Текущую строку и текущий файл можно изменить посредством команд анализа содержимого исходных файлов.
<p align=justify>При отладке имена переменных пишутся точно так же,  как
в языках C или Фортран 77. Доступ к переменным, локальным для некоторой процедуры, осуществляется посредством
конструкции процедура:переменная. Если имя процедуры не
указано,  используется  процедура,  содержащая  текущую
строку. Можно ссылаться на  элемент  структуры  как  на
структура.элемент; или, посредством указателей, как  на
указатель->элемент; ссылка на элемент массива  выглядит
как массив[номер]. Переход от  указателя  к  указуемому
объекту записывается как указатель[0]. Допускаются комбинации этих конструкций. Доступ к переменным из  общих
блоков Фортрана осуществляется аналогично  обращению  к
элементам структур с заменой имени структуры на имя общего блока. Переменные из непоименованного общего блока
записываются в виде .переменная.
<p align=justify>Можно также указывать переменную, задав ее  адрес.  Допускается использование всех видов целых констант, принятых в языке C, так что адреса могут задаваться в  десятичном, восьмеричном и шестнадцатеричном виде.
<p align=justify>Если адрес указан на месте имени  структурной  переменной, то шаблоном структуры будет  шаблон  последней  из
структур, к которой выполнялся доступ посредством  sdb.
Вообще, sdb рассматривает структуру как набор  переменных; при указании имени структуры выводятся все ее элементы. Исключение составляет вывод  адресов:  выводится
адрес начала структуры, а не отдельных ее элементов.
<p align=justify>Элементы  многомерных  массивов  записываются  в   виде
массив[номер][номер]...,  или  массив[номер,номер,...].
На месте номера может употребляться  также  конструкция
номер;номер, задающая диапазон изменения индекса  ("вырезку" из массива); * обозначает весь допустимый диапазон данного индекса. Если символы * являются последними
в списке индексов, их можно опустить. При выдаче  адресов, как и в случае структур,  сообщается  адрес  всего
массива или вырезки, но не адрес каждого из  элементов.
Многомерные  массивы-аргументы  подпрограмм  на   языке
Фортран 77 не могут быть выведены как массивы, так  как
они являются указателями, значения которых есть  адреса
массивов. Сам массив может быть получен в символическом
виде из вызывающей функции. Кроме того, следует  учитывать, что sdb отсчитывает индексы от нуля.
<p align=justify>Ссылка на конкретный экземпляр переменной из стека  делается в виде процедура:переменная,номер. При этом  могут использоваться все описанные ранее способы  доступа
к элементам структур и массивов. Номер - это номер  появления процедуры в стеке, считая ближайший  к  вершине
экземпляр первым. Если процедура не указана,  используется та, что выполняется в данный момент.
<p align=justify>Номера строк в исходном тексте задаются в виде имя_файла:номер или процедура:номер.  В  обоих  случаях  номер
отсчитывается от начала файла. По умолчанию используется текущий файл. Если не указан номер  строки,  то  используется первая строка файла или процедуры.
<p align=justify>Можно оперировать не только со строками исходного текста, но и с адресами, используя конструкцию адрес:.
<p align=justify>Пока под управлением sdb выполняется процесс (см.  ниже
команды r и k), все адреса относятся к  программе  процесса; в другие моменты они относятся к объектному_файлу или образу_памяти.
<p align=justify><b>   Адресация в файле </b><br>
Отладчик sdb позволяет работать с двумя файлами -  об ектным и образом памяти. При этом адрес_в_файле получается из указанного пользователем  адреса с помощью отображения, ассоциированного с  каждым  из  двух  файлов.
Отображение задается двумя тройками (b1, e1, f1) и (b2,
e2, f2). Адрес_в_файле вычисляется следующим образом:
<pre>
	если b1 &lt;= адрес &lt; e1 то
	  адрес_в_файле = адрес + f1 - b1
	иначе если b2 &lt;= адрес &lt; e2 то
	  адрес_в_файле = адрес + f2 - b2
	иначе адрес некорректен
</pre>
<p align=justify>Изначально оба отображения  настроены  на  файлы  типов
a.out(4) и <a href=CORE.htm>core(4)</a> соответственно. Если  какой-либо  из
указанных в командной строке файлов имеет  неподходящий
тип, b1 и f1 устанавливаются равными 0,  e1  полагается
равным максимально допустимому размеру файлов; тем  самым можно обращаться к произвольному  месту  файла  без
преобразования адреса.
<p align=justify>Для того, чтобы sdb мог работать  с  большими  файлами,
элементы троек хранятся как 32-разрядные целые числа со
знаком.
<p align=justify><b>   Команды </b><br>
Команды для просмотра данных 
<dl>
<dt>t <dd>   Вывести стек вызовов завершившейся или остановленной программы.
<p><dt>T <dd>   Вывести вершину стека вызовов.
<p><dt>переменная/clm <dd>
Вывести значение переменной с  учетом  длины  l  и
формата m. Число c - счетчик, означающий, что  содержимое области памяти,  начинающейся  по  адресу
указанной переменной, будет выведено как  c  переменных заданного типа. Спецификаторы длины:
<table>
<tr valign=top><td>   b <td>   Один байт.
<tr valign=top><td>   h  <td>  Два байта (полуслово).
<tr valign=top><td>   l  <td>  Четыре байта (слово).
</table>
Спецификаторы формата:<br>
<table>
<tr valign=top><td>   c  <td>  Символ.
<tr valign=top><td>   d  <td>  Десятичное целое.
<tr valign=top><td>   u  <td>  Десятичное целое без знака.
<tr valign=top><td>   o  <td>  Восьмеричное целое.
<tr valign=top><td>   x  <td>  Шестнадцатеричное целое.
<tr valign=top><td>   f  <td>  32-разрядное  вещественное число одинарной точности.
<tr valign=top><td>   g  <td>  64-разрядное  вещественное  число  двойной точности.
<tr valign=top><td>   s  <td>  Переменная  есть указатель на цепочку символов; выводятся символы этой цепочки.
<tr valign=top><td>   a  <td>  Вывести цепочку символов, начиная с адреса  переменной; нельзя использовать с  регистровыми переменными.
<tr valign=top><td>   p  <td>  Указатель на процедуру.
<tr valign=top><td>   i  <td>  Дизассемблировать машинную команду  и  вывести указанные в ней адреса в числовом  и символическом виде.
<tr valign=top><td>   I  <td>  Дизассемблировать машинную команду  и  вывести указанные в ней адреса только в числовом виде.
</table>
<p align=justify>Спецификатор длины может использоваться  только  с
форматами c, d, u, o и x.  Любая  из  спецификаций
clm может быть опущена. Если опущены все  спецификации, то sdb подбирает подходящую длину и  формат
в соответствии с типом  переменной.  Если  указана
спецификация m, то для вывода используется  заданный формат. Задание спецификации l может  привести
к усечению выводимых данных. Счетчик c задает  количество единиц памяти, начиная от адреса переменной, которые надлежит вывести. Количество  байт  в
этой единице определяется  спецификатором  l  или,
если он не указан, размером указанной  переменной.
Если  счетчик  указан со спецификаторами формата s
или a, то он определяет количество выводимых  символов;  иначе  цепочка выводится до нулевого байта
или до 128  символов  включительно.  Последнюю  из
просматривавшихся переменных можно повторно вывести  командой  ./. Если просматривалась структурная
переменная, по команде ./ выводится только последний элемент структуры.
<p align=justify>Метасимволы языка <a href=SH.htm>sh(1)</a> * и ? могут использоваться
в шаблонах имен процедур и переменных. Таким образом в ограниченном виде  предоставляются  средства
сопоставления с шаблонами.  Если  не  указано  имя
процедуры, то шаблон сравнивается с глобальными  и
локальными для данной процедуры  именами  переменных; если имя процедуры задано - то только с  именами ее локальных переменных. Для сравнения только
с именами глобальных переменных используйте  форму
:шаблон.
<p><dt>номер_строки?lm
<br>переменная:?lm <dd>
Вывести содержимое области памяти, начинающейся  с
адреса, заданного  номером_строки  или  переменной
(именем процедуры), по формату lm. Формат по умолчанию - i.
<p><dt>переменная=lm
<br>номер_строки=lm
<br>число=lm <dd>
Вывести адрес переменной, номера_строки или значение числа по  формату,  заданному  lm.  Формат  по
умолчанию - lx. Последний вариант команды  используется для перевода чисел из одной системы счисления в другую.
<p><dt>переменная!значение <dd>
Присвоить  переменной указанное значение. Значение
может быть числом, символьной константой или переменной. Значение должно быть  определено;  выражения, результатом которых является несколько значений  (например, структуры) недопустимы. Символьные
константы записываются в виде 'символ. Числа рассматриваются как целые; только если есть десятичная
точка или показатель степени, число рассматривается как  вещественное  двойной  точности.  Регистры
рассматриваются  как  целые. Переменная может быть
выражением, которое означает более чем одну  переменную (например, имя массива или структуры). Если
указан адрес переменной, то считается, что эта переменная  имеет тип int. Если для присваивания необходимо преобразование типов, используются соглашения языка C.
<p><dt>x <dd>   Вывести содержимое машинных  регистров  и  текущую
машинную команду.
<p><dt>X <dd>   Вывести текущую машинную команду.
</dl>
<p align=justify><b>Команды для просмотра файлов с исходными текстами </b><br>
<dl>
<dt>e процедура
<br>e имя_файла
<br>e каталог/
<br>e каталог имя_файла <dd>
Первые две формы команды об являют  текущим  файл,
содержащий процедуру или  называющийся  имя_файла.
Текущей строкой становится первая строка в указанной процедуре или в файле. Исходный  файл  берется
из указанного каталога (по умолчанию  из  текущего
каталога). Последние две  формы  команды  изменяют
текущий каталог. По команде e без  аргументов  выдаются имена текущей процедуры и текущего файла.
<p><dt>/регулярное_выражение/ <dd>
Поиск строки, содержащей цепочку символов,  сопоставляющуюся  с  регулярным_выражением   в   смысле
<a href=ED.htm>ed(1)</a>. Поиск выполняется в прямом направлении, начиная с текущей строки.
<p><dt>?регулярное_выражение? <dd>
То же, что и предыдущая команда, только поиск  выполняется в обратном направлении.
<p><dt>p  <dd>  Вывести текущую строку.
<p><dt>z  <dd>  Вывести текущую строку и следующие за ней 9 строк.
Текущей станет последняя выведенная строка.
<p><dt>w  <dd>  Окно. Вывести 10 строк вокруг текущей строки.
<p><dt>номер <dd>
Сделать  текущей  строку с указанным номером и вывести ее.
<p><dt>число+ <dd>
Продвинуться вперед на заданное число строк и  вывести новую текущую строку.
<p><dt>число- <dd>
Переместиться назад на заданное число строк и  вывести новую текущую строку.
</dl>
<p align=justify><b>Команды управления выполнением программы </b><br>
<dl>
<dt>счетчик r аргументы
<br>счетчик R <dd>
Начать выполнение программы с заданными аргументами. Команда r без аргументов запускает программу с
предыдущим набором аргументов, а R - действительно
без аргументов. Аргументы, начинающиеся с < или >,
означают переназначение стандартного ввода или вывода соответственно.  Если  счетчик  задан,  будет
проигнорировано (счетчик-1) точек прерывания.
<p><dt>номер_строки c счетчик
<br>номер_строки C счетчик <dd>
Продолжить выполнение после точки  прерывания  или
настоящего прерывания. Если счетчик  задан,  будет
проигнорировано (счетчик-1) точек  прерывания.  По
команде C выполнение будет продолжено с  возбуждения сигнала, вызвавшего приостановку программы,  а
по команде c  этот  сигнал  проигнорируется.  Если
указан номер_строки, то перед началом выполнения в
заданную строку будет  вставлена  временная  точка
прерывания, которая после завершения команды будет
удалена.
<p><dt>номер_строки g счетчик <dd>
Продолжить выполнение после точки прерывания,  начиная со строки с заданным номером.  Если  счетчик
задан,  будет  проигнорировано  (счетчик-1)  точек
прерывания.
<p><dt>s счетчик
<br>S счетчик <dd>
Пошаговое выполнение программы. Счетчик  указавает
количество строк,  выполняемых  за  один  шаг;  по
умолчанию выполняется одна строка.  По  команде  S
отлаживается только текущая процедура - строки вызываемых процедур не учитываются.
<p><dt>i 
<br>I  <dd>  Пошаговое выполнение машинных команд. По команде I
выполнение будет продолжено с возбуждения сигнала,
вызвавшего приостановку программы, а по команде  i
этот сигнал игнорируется.
<p><dt>переменная$m счетчик
<br>адрес:m счетчик <dd>
Аналогично s, но выполняется до тех пор,  пока  по
указанному адресу не будет занесено  новое  значение. Переменная должна быть  доступна  из  текущей
процедуры. Если счетчик не указан, его можно  считать бесконечно большим. Так  как  данная  команда
выполняется программно, она работает  крайне  медленно.
<p><dt>уровень v <dd>
Задать полноту выводимой информации при выполнении
команд s, S, m. Если уровень опущен, то  выводится
только название подпрограммы  и  исходного  файла.
Если уровень 1 или больше, то при выполнении выводится также исходная строка. Если  уровень  2  или
больше, то также выводятся все команды ассемблера,
соответствующие данной строке.
<p><dt>k <dd>   Терминировать  процесс,  выполняющий  отлаживаемую
программу.
<p><dt>процедура(арг1, арг2, ... )
<br>процедура(арг1, арг2, ... )/m <dd>
Выполнить указанную процедуру с заданными аргументами. Аргументы могут быть целыми числами,  символами,  цепочками  символов или именами переменных,
доступных из текущей процедуры. Во втором варианте
результат выполнения процедуры выводится в формате
m (по умолчанию d). Выполнить отдельную  процедуру
можно, лишь если редактирование связей осуществлялось командой cc -g.
<p><dt>номер_строки b команды_отладчика <dd>
Установить точку прерывания на  указанную  строку.
Если указано имя процедуры без номера_строки (например, proc:), точка прерывания устанавливается на
первую строку процедуры, даже если она  компилировалась без опции -g. Если номер_строки не  указан,
то точка  прерывания  устанавливается  на  текущую
строку. Если команды_отладчика не указаны, то  выполнение приостанавливается перед точкой  прерывания и управление возвращается sdb. Иначе при  достижении точки прерывания выполняются указанные команды_отладчика и работа  программы  продолжается.
Если команд несколько, они  разделяются  точкой  с
запятой. Если в качестве команды  используется  k,
то управление передается sdb.
<p><dt>B   <dd> Вывести список точек прерывания.
<p><dt>номер_строки d <dd>
Снять точку прерывания с заданной строки. Если номер_строки не указан, то запрашивается подтверждение на удаление каждой точки прерывания:  выдается
ее местоположение и читается ответ (со стандартного ввода). Если ответ начинается с  y  или  d,  то
точка прерывания снимается.
<p><dt>D  <dd>  Удалить все точки прерывания.
<p><dt>l  <dd>  Вывести последнюю выполненную строку.
<p><dt>номер_строки a <dd>
Оповещение. Если номер_строки имеет  вид  процедура:номер, то выполняется команда номер_строки b l.
Если номер_строки имеет вид процедура:, то  выполняется команда процедура: b T.
</dl>
<p align=justify><b>Прочие команды </b><br>
<dl>
<dt>!команда <dd>
Команда интерпретируется shell'ом [см. <a href=SH.htm>sh(1)</a>].
<p><dt>перевод_строки <dd>
Если предыдущая команда выводила  строку  исходной
программы, то после нажатия клавиши "перевод строки"  будет  выведена  следующая  строка  исходного
текста, которая и станет текущей. Если  предыдущая
команда выводила содержимое ячейки памяти, то  выводится содержимое следующей ячейки.
<p><dt>CTRL+D <dd>
"Прокрутить". Вывести следующие 10 строк исходного
текста, команд или данных в зависимости  от  того,
что выводилось в последний раз.
<p><dt>&lt;имя_файла <dd>
Читать команды из указанного файла; по  достижении
его конца читать команды  со  стандартного  ввода.
Эта команда не может быть вложенной.
<p><dt>M   <dd> Вывести тройки, управляющие отображениями адресов.
<p><dt>М [?/] [*] b e f <dd>
Изменить тройку, управляющую отображением адресов.
Аргументы ? и / указавают на отображения, ассоциированные с объектным_файлом и образом_памяти соответственно. Если не указана *, то изменяется  первая тройка (b1, e1, f1), иначе - вторая. Если  задано меньше трех значений, то оставшиеся  элементы
тройки остаются неизменными.
<p><dt>"строка <dd>
Вывести указанную строку. Разрешается использовать
управляющие последовательности  языка  C  \символ,
где символ не есть цифра.
<p><dt>q <dd>   Выйти из отладчика.
</dl>
<p align=justify><b>Команды отладки отладчика </b><br>
<dl>
<dt>V <dd>   Вывести версию отладчика.
<p><dt>Q  <dd>  Вывести список отлаживаемых файлов и процедур.
<p><dt>Y <dd>   Переключить режим выдачи внутренней отладочной информации.
</dl>
<p align=justify><p><b>ФАЙЛЫ</b>
<pre>
	a.out
	core
</pre>
<p><b>СМ. ТАКЖЕ</b><br>
<a href=CC.htm>cc(1)</a>, <a href=F77.htm>f77(1)</a>, <a href=SH.htm>sh(1)</a>.<br>
a.out(4), <a href=CORE.htm>core(4)</a>, <a href=SYMS.htm>syms(4)</a> в Справочнике программиста.
<p align=justify><b>ПРЕДОСТЕРЕЖЕНИЯ</b><br>
При выводе значения внешней переменной, для которой отсутствует отладочная информация, перед ее значением выводится предупреждение. Ее типом по умолчанию считается
int.
<p align=justify>Данные, хранящиеся в секции команд, недоступны из функций.
<p align=justify>Если функция была оптимизирована, то информация о номерах строк может  не  соответствовать  действительности.
Более того, часть информации может быть потеряна.
<p align=justify><b>СЮРПРИЗЫ</b><br>
Если процедура вызвана, когда программа не остановилась
на точке прерывания (например, при отладке образа памяти), то перед началом выполнения процедуры все переменные  инициализируются. Это делает невозможным использование процедур, которые  осуществляют  форматный  вывод
данных из образа памяти.
<p align=justify>Отладчик  sdb  плохо  приспособлен  для  отладки  Фортран-программ. Трудно получить доступ к элементам  общих
блоков и формальным  аргументам,  элементы  многомерных
массивов нумеруются по строкам, а не по столбцам. Кроме
того, sdb несовместим с компилятором <a href=SVS.htm>svs(1)</a>. Рекомендуем пользоваться отладчиком КРОТ.
<table cellspacing=0 cellpadding=0 border=0 background="_pic_/footer0.jpg" width="100%">
<tr><td align="center">
<table cellspacing=0 cellpadding=4 border=0 width="100%" background="">
<tr><td align="right" valign="top" width="33%">
<font size="-2">Comments: <a class="plain" href="mailto:info@citmgu.ru?Subject='From bottom of CIT FORUM local copy'">info@citmgu.ru</a><br>
Designed by <a class="plain" href="mailto:andrey@novikov.com">Andrey Novikov</a><br>
Copyright &copy; <a class="plain" href="http://www.citmgu.ru/">CIT</a></font>
</td></tr>
</table>
</td></tr>
</table>
</body>
</html>
