<html>
<head>
<title>CPP(1)</title>
		    <style type="text/css">
TH.arial { font-family: Arial, Serif;}
P.topic { font-family: sans-serif;}
A.plain { text-decoration: none;}
A.topic01 { color: #006890;
font-family: sans-serif;
text-decoration: none;}
A.topic02 { color: #099771;
font-family: sans-serif;
text-decoration: none;}
A.topic03 { color: #719709;
font-family: sans-serif;
text-decoration: none;}
A.topic04 { color: #98650A;
font-family: sans-serif;
text-decoration: none;}
A.topic05 { color: #98340A;
font-family: sans-serif;
text-decoration: none;}
A.topic06 { color: #099607;
font-family: sans-serif;
text-decoration: none;}
A.topic07 { color: #9E1215;
font-family: sans-serif;
text-decoration: none;}
A.topic08 { color: #970941;
font-family: sans-serif;
text-decoration: none;}
A.topic09 { color: #950995;
font-family: sans-serif;
text-decoration: none;}
A.topic010 { color: #390A98;
font-family: sans-serif;
text-decoration: none;}
H1 { font-family: sans-serif;}
H2 { font-family: sans-serif;}
H3 { font-family: sans-serif;}
H4 { font-family: sans-serif;}
H5 { font-family: sans-serif;}
H6 { font-family: sans-serif;}
</style>
</head>
<body bgcolor="#FFFFFF" link="#006890" vlink="#003860" alink="#800000" text="#000000">
<table cellspacing=0 cellpadding=0 border=0 background="_pic_/header0.jpg" width="100%">
<tr><td align="center">
<table cellspacing=0 cellpadding=4 border=0 width="100%" background="">
<tr><td align="left">
<img src="_pic_/logo.gif" width=157 height=53 border=0 alt="Server for Information Technologies">
</td><td align="right">
<font size="-2">Сервер поддерживается<br><a class="plain" href="http://www.citmgu.ru">Центром Информационных Технологий</a><br>(095) 932-9212, 932-9213, 939-0783<br>E-mail: <a class=noneline href="mailto:info@citmgu.ru?Subject='From page topic CIT FORUM local copy'">info@citforum.ru</a></font>
</td></tr>
</table>
<table cellspacing=0 cellpadding=4 border=0 width="100%" background="">
<tr><td align="left">
<font size="-1">Сервер содержит море(!) аналитической информации</font>
</td><td align="right">
<font size="-1">CIT Forum CD-ROM</font>
</td></tr>
</table>
</td></tr>
</table>

<h3 align=center>CPP(1)</h3>
<p align=justify><b>НАЗВАНИЕ</b><br>
cpp - препроцессор для языка C
<p><b>СИНТАКСИС</b>
<pre>
LIBDIR/cpp  [-P] [-C] [-U имя] [-D имя[=значение]] [-T] [-I каталог]
  [-Y каталог] [-H] [входной_файл [выходной_файл]]
</pre>
<p align=justify><b>ОПИСАНИЕ</b><br>
Cpp - это препроцессор языка C,  который  вызывается  в
качестве первого прохода при любой  компиляции  C-программ командой <a href=CC.htm>cc(1)</a>. Формат результатов работы cpp позволяет использовать их в качестве исходных  данных  для
следующего прохода C-компилятора. Поскольку язык C развивается, cpp и остальные команды  пакета  C-компиляции
будут модифицироваться, чтобы следовать изменениям языка. Поэтому использование  команды  cpp,  минуя  <a href=CC.htm>cc(1)</a>,
чревато неприятностями: в один прекрасный день cpp  может заработать совсем иначе. См. также <a href=M4.htm>m4(1)</a> -  универсальный макропроцессор.
<p align=justify>
При вызове cpp в качестве аргументов могут быть указаны
два имени файла - входной_файл и выходной_файл  препроцессора. По умолчанию вместо них используются стандартный ввод и стандартный вывод.
<p>
Опции:
<table>

-P   Препроцессировать входной файл без  генерации  уп   равляющей информации о номерах строк, используемой
   следующими проходами C-компилятора.

-C   Копировать в выходной файл все комментарии за иск   лючением комментариев в директивах cpp. По умолча   нию cpp подавляет C-языковые комментарии.

-U имя
   Удалить начальное  определение  зарезервированного
   имени. Перечень таких имен зависит от  конкретного
   препроцессора.  Текущий  перечень  (он  разбит  на
   группы, отвечающие смыслу зарезервированных имен):

   операционная система:  unix, dmert, gcos, ibm, os,
                  tss
   аппаратура:            interdata,   pdp11,   u370,
                  u3b,  u3b5,  u3b2,  u3b20d,
                  vax, m68k
   вариант системы UNIX:  RES, RT
   утилита <a href=LINT.htm>lint(1)</a>:       lint

-D имя
-D имя[=значение]
   Определить имя;  действие  эквивалентно  директиве
   #define. Если =значение не указано, имя  определя   ется как 1. Опция -D имеет более низкий приоритет,
   чем -U. Это означает, что если одно и  то  же  имя
   встретилось в обеих опциях, оно окажется неопреде   ленным, независимо от порядка перечисления опций.

-T   Длина имен в препроцессоре  теперь  не  ограничена
   восемью  символами  (исключение - PDP-11). Если же
   задана опция -T, значимыми считаются только первые
   восемь символов. Предыдущие  версии  препроцессора
   поступали  с  длинными  именами  так же; в текущую
   версию данная  опция  включена  для  совместимости
   "назад".

-I каталог
   Изменить  алгоритм поиска включаемых файлов по ди   рективе #include: файлы, имена которых  начинаются
   не  с /, перед поиском в каталогах из стандартного
   списка искать в указанном каталоге. При  использо   вании данной опции включаемые файлы, имена которых
   заключены  в кавычки, сначала ищутся в том катало   ге, где находится аргумент входной_файл,  затем  в
   каталогах,  указанных  в опции, и в последнюю оче   редь в каталогах из стандартного списка. Для вклю   чаемых файлов, имена которых заключены в &lt;&gt;, поиск
   в каталоге с входным_файлом не производится.

-Y каталог
   При поиске включаемых файлов использовать  указан   ный каталог вместо каталогов из стандартного спис   ка.

-H   Выдавать в стандартный протокол, по одному в стро   ке, составные имена включаемых файлов.

</table><p align=justify>
Выделено два специальных имени. Имя __LINE__ определено
как номер текущей строки с точки зрения cpp (десятичное
целое число), __FILE__ - имя текущего файла  (C-цепочка
символов).  Данные  имена  могут  использоваться  всюду
(включая макросы) как и другие имена, получившие  определения.
<p align=justify>
Все директивы cpp начинаются со строк, первым  символом
в которых является #. Между # и  собственно  директивой
допускается любое число пробелов и символов  табуляции.
Имеются следующие директивы:
<dl>
<dt>#define имя цепочка_лексем
<dd>Заменить последующие вхождения имени на  цепочку_лексем.
<dt>#define имя( арг, ..., арг ) цепочка_лексем
<dd>Заменить последующие вхождения конструкций, состоящих из имени, открывающей скобки,  списка  разделенных запятыми лексем и закрывающей  скобки,  цепочкой_лексем, в которой каждое вхождение арг  заменено соответствующей лексемой из  списка.  Заметим, что пробелов между именем и открывающей скобкой быть не  должно.  После  того,  как  выполнена
подстановка цепочки_лексем, cpp вновь просматривает ее в поисках имен, подлежащих макроподстановке.
<dt>#undef имя
<dd>Забыть с данного момента определение  имени  (если
оно имелось). После имени запрещается  располагать
другие лексемы.
<dt>#ident "цепочка_символов"
<dd>Поместить цепочку_символов в  секцию  комментариев
об'ектного файла.
<dt>#include "файл"<br>
<dd>#include &lt;файл&gt;
Вставить в данное место содержимое файла  (которое
будет затем обработано cpp). Если используется запись  &lt;файл&gt;, файл ищется только в стандартных каталогах. Дополнительную информацию см. выше в описании опций -I и -Y. После закрывающих символов  "
и &gt; запрещается располагать другие лексемы.
<dt>#line целая_константа "файл"
<dd>Сформировать управляющую информацию для следующего
прохода C-компилятора. Целая_константа -  это  номер,  который  получает   следующая  строка,  файл
- приписываемое  строке  имя файла. Если "файл" не
задан, текущее имя файла не изменяется. После необязательного аргумента файл  запрещается  располагать другие лексемы.
<dt>#endif
<dd>Завершает группу строк,  которая  начата  условной
директивой (#if, #ifdef или #ifndef).  Каждой  условной директиве должна соответствовать  директива
#endif. После #endif запрещается располагать  другие лексемы.
<dt>#ifdef имя
<dd>Следующие строки копируются в выходной файл,  если
имя в настоящий  момент  определено.  После  имени
запрещается располагать другие лексемы.
<dt>#ifndef имя
<dd>Следующие строки не копируются  в  выходной  файл,
если имя в настоящий момент определено. После имени запрещается располагать другие лексемы.
<dt>#if константное_выражение
<dd>Следующие строки копируются в выходной файл,  если
значение  константного_выражения  не  равно  0.  В
констант-  ном_выражении  допустимы  все  бинарные
операции  языка  C  (кроме присваивания), операция
?:, унарные операции -, ! и ~. Приоритеты операций
такие же, что и в C. Определена еще  одна  унарная
операция, которая может использоваться в константном_выражении  в  двух  формах:  defined(имя)  или
defined имя.  Благодаря  этой  операции  #ifdef  и
#ifndef  являются частными случаями директивы #if.
В константном_выражении  могут  быть  использованы
только  эти  операции,  целочисленные  константы и
имена, которые известны cpp. В частности, недопустима операция sizeof.
<p>
Чтобы проверить, определено ли  хотя  бы  одно  из
двух имен, foo и fum, следует воспользоваться  директивой
<pre>
   #if defined(foo) || defined(fum)
</pre>
<dt>#elif константное_выражение
<dd>Допускается произвольное число директив #elif между #if, #ifdef, #ifndef с одной  стороны  и  #else
или #endif с другой. Следующие после #elif  строки
копируются в выходной файл,  если  проверка  предшествующих условий дала результат  "ложь"  (0),  а
значение константного_выражения оказалось отличным
от нуля. В этом случае последующие директивы #elif
и #else игнорируются. После #elif  допускаются  те
же константные_выражения, что и после #if.
<dt>#else
<dd>Следующие после #else строки копируются в выходной
файл, если проверка  предшествующих  условий  дала
результат "ложь" (0). После #else запрещается располагать другие лексемы.
</dl>
<p align=justify>
Условные директивы и необязательные директивы #else могут быть вложены.
<p align=justify><b>ФАЙЛЫ</b>
<pre>
INCDIR          Стандартный список каталогов для поиска
             включаемых файлов, обычно /usr/include.
LIBDIR          Обычно это /lib.
</pre>
<p align=justify><b>СМ. ТАКЖЕ</b><br>
<a href=CC.htm>cc(1)</a>, <a href=LINT.htm>lint(1)</a>, <a href=M4.htm>m4(1)</a>.
<p align=justify><b>ДИАГНОСТИКА</b><br>
Сообщения  об  ошибках, формируемые cpp, не нуждаются в
пояснениях.  Вместе  с  диагностикой  печатаются  номер
строки и имя файла, где встретилась ошибка.
<p align=justify><b>ПРИМЕЧАНИЯ</b><br>
Когда в списке аргументов раскрываемых макроопределений
встречались символы перевода строки, предыдущие  версии
cpp, раскрывая макроопределения, эти символы подставляли. Текущая версия cpp заменяет символы перевода строки
на пробелы, чтобы смягчить проблемы, с которыми сталкивались предыдущие версии.
<p align=justify>
Неподдерживаемая опция -W позволяет использовать директивы #class. Если такая директива встретилась в  файле,
cpp, выполнив другие директивы, завершается с кодом 27.
Опция задумана для реализации классов в языке C.
<p align=justify>
Поскольку в разных окружениях стандартные каталоги  для
включаемых файлов могут быть различными, директиву
<pre>
#include &lt;file.h&gt;
</pre>
следует предпочесть явному указанию полного имени:
<pre>
#include "/usr/include/file.h"
</pre><p align=justify>
В случае использования полных имен cpp  выдает  предупреждения.
<table cellspacing=0 cellpadding=0 border=0 background="_pic_/footer0.jpg" width="100%">
<tr><td align="center">
<table cellspacing=0 cellpadding=4 border=0 width="100%" background="">
<tr><td align="right" valign="top" width="33%">
<font size="-2">Comments: <a class="plain" href="mailto:info@citmgu.ru?Subject='From bottom of CIT FORUM local copy'">info@citmgu.ru</a><br>
Designed by <a class="plain" href="mailto:andrey@novikov.com">Andrey Novikov</a><br>
Copyright &copy; <a class="plain" href="http://www.citmgu.ru/">CIT</a></font>
</td></tr>
</table>
</td></tr>
</table>
</body>
</html>
