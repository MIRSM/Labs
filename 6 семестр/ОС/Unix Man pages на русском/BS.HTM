<html>
<head>
<title>BS(1)</title>
		    <style type="text/css">
TH.arial { font-family: Arial, Serif;}
P.topic { font-family: sans-serif;}
A.plain { text-decoration: none;}
A.topic01 { color: #006890;
font-family: sans-serif;
text-decoration: none;}
A.topic02 { color: #099771;
font-family: sans-serif;
text-decoration: none;}
A.topic03 { color: #719709;
font-family: sans-serif;
text-decoration: none;}
A.topic04 { color: #98650A;
font-family: sans-serif;
text-decoration: none;}
A.topic05 { color: #98340A;
font-family: sans-serif;
text-decoration: none;}
A.topic06 { color: #099607;
font-family: sans-serif;
text-decoration: none;}
A.topic07 { color: #9E1215;
font-family: sans-serif;
text-decoration: none;}
A.topic08 { color: #970941;
font-family: sans-serif;
text-decoration: none;}
A.topic09 { color: #950995;
font-family: sans-serif;
text-decoration: none;}
A.topic010 { color: #390A98;
font-family: sans-serif;
text-decoration: none;}
H1 { font-family: sans-serif;}
H2 { font-family: sans-serif;}
H3 { font-family: sans-serif;}
H4 { font-family: sans-serif;}
H5 { font-family: sans-serif;}
H6 { font-family: sans-serif;}
</style>
</head>
<body bgcolor="#FFFFFF" link="#006890" vlink="#003860" alink="#800000" text="#000000">
<table cellspacing=0 cellpadding=0 border=0 background="_pic_/header0.jpg" width="100%">
<tr><td align="center">
<table cellspacing=0 cellpadding=4 border=0 width="100%" background="">
<tr><td align="left">
<img src="_pic_/logo.gif" width=157 height=53 border=0 alt="Server for Information Technologies">
</td><td align="right">
<font size="-2">Сервер поддерживается<br><a class="plain" href="http://www.citmgu.ru">Центром Информационных Технологий</a><br>(095) 932-9212, 932-9213, 939-0783<br>E-mail: <a class=noneline href="mailto:info@citmgu.ru?Subject='From page topic CIT FORUM local copy'">info@citforum.ru</a></font>
</td></tr>
</table>
<table cellspacing=0 cellpadding=4 border=0 width="100%" background="">
<tr><td align="left">
<font size="-1">Сервер содержит море(!) аналитической информации</font>
</td><td align="right">
<font size="-1">CIT Forum CD-ROM</font>
</td></tr>
</table>
</td></tr>
</table>

<h3 align=center>BS(1)</h3>
<p align=justify><b>НАЗВАНИЕ</b><br>
bs - компилятор/интерпретатор программ умеренных размеров
<p><b>СИНТАКСИС</b>
<pre>
bs  [файл [аргумент ...]]
</pre>
<p align=justify><b>ОПИСАНИЕ</b><br>
Язык  bs - отдаленный потомок Бейсика и Снобола-4 с некоторыми дополнениями из языка C. Язык  bs  создан  для
тех  задач программирования, в которых время разработки
так же важно, как и полученная  в  результате  скорость
выполнения.  Формальности об явления данных и манипуляции с файлами и процессами  минимизированы.  Построчная
отладка,  операторы trace и dump, а также подробные сообщения об  ошибках  выполнения  упрощают  тестирование
программ.  Более  того,  можно отлаживать незавершенные
программы; внутренние функции  могут  тестироваться  до
того, как написаны внешние функции, и наоборот.
<p align=justify>
Если в командной строке указан аргумент файл, ввод  начинается из него и продолжается с терминала. По умолчанию, операторы, прочитанные из файла, компилируются для
последующего выполнения. Операторы, введенные с  терминала, обычно выполняются немедленно (см. ниже операторы
compile и execute). Если последняя операция - не  присваивание, результат оператора-выражения печатается.
<p align=justify>
Программы на языке bs состоят из строк.  Символом  продолжения является \  в  конце  строки.  Язык  допускает
строки следующего вида:
<pre>
     оператор
     метка  оператор
</pre><p align=justify>
Метка  - это имя (см. ниже), за которым следует двоеточие. Метки и переменные могут иметь одни и те же имена.
<p align=justify>
Оператор языка bs - это выражение или  ключевое  слово,
за которым следует 0  или  более  выражений.  Некоторые
ключевые слова (clear, compile,  !,  execute,  include,
ibase, obase и run) всегда выполняются, как только  они
откомпилированы.
<p align=justify><i>Синтаксис операторов</i>
<dl>
<dt>выражение
<dd>Целью выполнения выражения являются  его  побочные
эффекты (значение, присваивание  или  вызов  функции). Детали приводятся ниже, после описания типов
операторов.
<dt>break
<dd>Выйти из самого внутреннего for/while цикла.
<dt>clear
<dd>Выполняется немедленно. Очистить  таблицу  имен  и
удалить скомпилированные операторы.
<dt>compile [выражение]
<dd>Выполняется немедленно. Откомпилировать  последующие операторы (не принимая во внимание установленный режим немедленного выполнения). Необязательное
выражение вычисляется и  используется  в  качестве
имени файла для последующего  ввода.  В  последнем
случае выполняется clear.
<dt>continue
<dd>Перейти к следующей  итерации  текущего  for/while
цикла.
<dt>dump [имя]
<dd>Напечатать имена и текущие значения всех нелокальных переменных. Если указана опция имя, сообщается
только о данной переменной. После ошибки или  прерывания выводится  номер  последнего  оператора  и
(возможно) трассировка пользовательских функций.
<dt>exit [выражение]
<dd>Вернуться на системный уровень. Выражение  возвращается в качестве кода завершения.
<dt>execute
<dd>Изменить режим выполнения на немедленный (прерывание дает аналогичный эффект). Эта команда не вызывает выполнения запомненных операторов  (см.  ниже
команду run).
<dt>for имя = выражение выражение оператор<br>
for имя = выражение выражение<br>
 ...<br>
next<br>
<br>
for выражение, выражение, выражение  оператор<br>
for выражение, выражение, выражение<br>
 ...<br>
next
Циклически выполнять оператор (первая  форма)  или
группу операторов (вторая форма)  под  управлением
переменной с указанным именем. Переменная принимает значение первого выражения, затем она  увеличивается на единицу в каждом цикле, пока не превзойдет значения второго выражения. Третьей и  четвертой формам требуются  три  выражения,  разделенные
запятыми. Первое из них - инициализация, второе  
<dd>условие (если истинно, то продолжать), и третье  
<dd>действие при переходе к следующей итерации (обычно
приращение).
<dt>fun f([a, ...]) [v, ...]<br>
 ...<br>
nuf
<dd>Определить имя, аргументы и  локальные  переменные
написанной пользователем функции.  Допускается  до
10 аргументов и локальных переменных. Эти имена не
могут быть массивами, а также не могут быть связаны по вводу и выводу. Определения функций не могут
быть вложенными.
<dt>freturn
<dd>Сигнализировать о неудачном  завершении  пользовательской  функции.  См.  ниже операцию опроса (?).
Если опрос отсутствует, freturn возвращает 0. Когда опрос активен,  freturn  возвращается  к  соответствующему выражению (возможно, выполняя возвраты из вложенных функций).
<dt>goto имя
<dd>Передать управление на хранящийся в памяти  оператор с соответствующей меткой.
<dt>ibase N
<dd>Установить  основание  системы счисления при вводе
чисел равным N.  Поддерживаются  только  следующие
значения  N: 8, 10 (по умолчанию) и 16. Шестнадцатеричные значения 10-15 вводятся как  a-f.  Первой
должна  стоять  цифра (то есть f0a следует вводить
как 0f0a). Ibase (и, ниже, obase) выполняются  немедленно.
<dt>if выражение оператор<br>
if выражение<br>
 ...<br>
 [else<br>
 ...]<br>
fi
<dd>Выполнить оператор (первая форма) или группу  операторов  (вторая форма), если результат вычисления
выражения ненулевой. Цепочки символов 0 и "" (пустая) считаются нулевыми. Во второй форме  допускается  дополнительная  группа  операторов,  которая
должна выполняться, когда  не  выполняется  первая
группа. Единственный оператор, допустимый в той же
строке, что и else, - это if; только другие fi могут быть в той же строке, что и fi. Поддерживается
сокращение  else и if в elif. Чтобы закрыть последовательность if ... elif ... [ else ... ], требуется только одно fi.
<dt>include выражение
<dd>Выражение должно определять имя файла. Файл должен
содержать bs-операторы. Такие операторы становятся
частью компилируемой программы. Операторы  include
не могут быть вложенными.
<dt>obase N
<dd>Установить основание системы счисления при  выводе
чисел равным N (см. выше ibase).
<dt>onintr метка<br>
onintr
<dd>Программная обработка прерываний. В  первой  форме
после прерывания управление передается на  указанную метку, в точности так, как если  бы  в  момент
прерывания был выполнен оператор goto. После начала обработки прерывания установленная реакция  отменяется. Во второй форме прерывание вызывает  завершение выполнения.
<dt>return [выражение]
<dd>Вычислить выражение и возвратить  его  значение  в
качестве результата вызова функции. Если выражение
не указано, возвращается 0.
<dt>run  Перезапустить генератор случайных чисел.  Передать
управление на  первый  скомпилированный  оператор.
Если оператор run содержится в  файле,  он  должен
быть последним оператором.
<dt>stop 
Прекратить выполнение скомпилированных операторов.
Bs возвращается в режим немедленного выполнения.
<dt>trace [выражение]
<dd>Управление трассировкой функций. Если выражение не
указано (или имеет нулевое значение),  трассировка
выключается; в противном случае печатается  протокол вызовов пользовательских функций  и  возвратов
из них. Каждый возврат уменьшает на единицу значение выражения, указанного в операторе trace.
<dt>while выражение  оператор<br>
while выражение<br>
 ...<br>
next
<dd>Оператор while аналогичен for за исключением того,
что указывается условие продолжения цикла.
<dt>! команда shell'а
<dd>Выполнить команду shell'а.
<dt># ...
<dd>Этот оператор игнорируется.  Он  используется  для
включения в программу комментариев.
</dl>
<p align=justify><i>Синтаксис выражений</i>
<dl>
<dt>имя
Имя  используется для того, чтобы указать переменную. Имена состоят из буквы (прописной или  строчной),  за  которой  могут следовать буквы и цифры.
Только первые шесть символов в имени являются значащими. За исключением имен, об явленных в  операторах  fun, все имена являются глобальными. Значениями имен могут быть числа (вещественные  двойной
точности) и цепочки символов;  кроме  того,  имена
могут  быть  связаны  по  вводу/выводу  (см.  ниже
встроенную функцию open).
<dt>имя ([выражение [, выражение] ...])
<dd>К функциям можно обращаться по имени,  за  которым
следуют аргументы в скобках, разделенные запятыми.
За исключением встроенных функций  (описанных  ниже), имя должно быть определено при помощи  оператора fun. Аргументы функций передаются  по  значению.
<dt>имя [выражение [, выражение] ...]
<dd>Такой  синтаксис используется для обращения к массивам или таблицам (см. ниже  описание  встроенных
функций для работы с таблицами). Для массивов каждое  выражение  урезается до целого и используется
как спецификатор для имени. Результирующее обращение синтаксически эквивалентно имени (то есть  может употребляться в тех же местах, что и имя); записи  a[1,2]  и  a[1][2]  обозначают одно и то же.
Значения урезанных выражений должны быть в  пределах от 0 до 32767.
<dt>число
<dd>Число используется для представления  константного
значения. Число записывается в  стиле  Фортрана  и
содержит цифры, десятичную точку (не  обязательно)
и, возможно, масштабный  множитель,  состоящий  из
символа e, за которым может следовать  характеристика со знаком.
<dt>цепочка_символов
<dd>Цепочки_символов ограничиваются знаками ". Знак  \
позволяет вставлять в цепочку  следующие  символы:
кавычка (\"), перевод строки (\n), возврат каретки
(\r), пробел (\b) и табуляция  (\t).  В  остальных
случаях символ \ обозначает сам себя.
<dt>(выражение)
<dd>Скобки используются для того, чтобы изменить порядок вычислений.
<dt>(выражение, выражение [, выражение ...]) [выражение]
<dd>Последнее выражение используется как индекс, чтобы
выбрать один элемент из взятого в  круглые  скобки
списка  выражений,  разделенных запятыми. Элементы
списка нумеруются слева, начиная с  нуля.  Выражение:
<dt>(False, True)[a == b]
<dt>     имеет значение True, если a равно b.
<dt>? выражение
<dd>Операция опроса проверяет "успех" вычисления выражения, а не его значение. Ее целесообразно использовать для проверки выхода на конец файла (см. ниже   ПРИМЕРЫ),  результата  вычисления  встроенной
функции и для проверки  возврата  из  определенных
пользователем  функций  (см. freturn). "Реакция на
прерывание",  устанавливаемая   данной   операцией
(например,  конец  файла), приводит к немедленному
переходу к самому последнему  опросу  с  возможным
пропуском  операторов  присваивания  или переходом
через уровни вложенности функций.
<dt>- выражение
<dd>Результатом является значение выражения с обратным
знаком.
<dt>++ имя
<dd>Увеличивает на единицу  значение  переменной  (или
элемента массива). Результатом является новое значение.
<dt>-- имя
<dd>Уменьшает на единицу значение переменной.  Результатом является новое значение.
<dt>! выражение
<dd>Логическое отрицание  значения  выражения.  Будьте
осторожны, такое выражение может  быть  воспринято
как запрос на выполнение команды shell'а.
<dt>выражение операция выражение
<dd>Обращения к общеупотребимым функциям двух аргументов обозначаются двумя аргументами, которые разделяются операцией, указывающей функцию. За исключением присваивания, конкатенации и операций сравнения, перед тем, как выполняется операция, оба операнда преобразуются к целому типу.
</dl>
<p align=justify><i>Бинарные операции (упорядочены по возрастанию приоритета):</i>
<dl>
<dt>=
<dd>Операция присваивания. Левый операнд  должен  быть
именем или элементом массива. Результатом является
правый операнд. Последовательные присваивания  выполняются справа налево;  все  другие     операции
- слева направо.
<dt>_    (подчеркивание).
<dd>Операция конкатенации.
<dt>& |  
<dd>Результатом & (логическое и) является 0, если  какой-нибудь из ее аргументов - 0;  результат  равен
1, если оба  аргумента  ненулевые;  результатом  |
(логическое или) является 0,  если  оба  аргумента
равны нулю; результат равен 1,  если  какой-нибудь
из аргументов  ненулевой.  Обе  операции  трактуют
пустую цепочку символов как 0.
<dt>&lt;  &lt;=  &gt;  &gt;=  ==  !=
<dd>Операции  сравнения  (меньше,  меньше  или  равно,
больше, больше или равно, равно, не равно) возвращают  1,  если  их аргументы находятся в указанном
отношении. В противном случае  они  возвращают  0.
Допустимы  выражения,  подобные a&gt;b&gt;c (что эквивалентно a&gt;b & b&gt;c). Если оба аргумента являются цепочками символов,  проверяется  лексикографическая
упорядоченность.
<dt>+ <dd>Сложение и вычитание.
<dt>*  /  %
<dd>Умножение, деление и остаток.
<dt>^
<dd>Возведение в степень.
</dl>
<p align=justify><b>Встроенные функции</b><br>
<i>Работа с аргументами</i>
<dl>
<dt>arg(i)
<dd>Значение  i-го  фактического  аргумента   текущего
уровня вызова  функции.  На  нулевом  уровне   arg
возвращает i-ый аргумент командной строки (arg (0)
возвращает bs).
<dt>narg( )
<dd>Возвращает число переданных аргументов. На нулевом
уровне  возвращается  число  аргументов  командной
строки.
</dl>
<p align=justify><i>Математические функции</i>
<dl>
<dt>abs(x)
<dd>Абсолютная величина  x.
<dt>atan(x)
<dd>Арктангенс x. Значение между - П/2 и  П/2.
<dt>ceil(x)
<dd>Минимальное целое, не меньшее x.
<dt>cos(x)
<dd>Косинус x (Углы задаются в радианах).
<dt>exp(x)
<dd>Экспонента x.
<dt>floor(x)
<dd>Наибольшее целое число, не превосходящее x.
<dt>log(x)
<dd>Натуральный логарифм x.
<dt>rand( )
<dd>Равномерно распределенное между 0  и  1  случайное
число.
<dt>sin(x)
<dd>Синус x.
<dt>sqrt(x)
<dd>Квадратный корень из x.
</dl>
<p align=justify><i>Операции с цепочками символов</i>
<dl>
<dt>size(s)
<dd>Размер (длина в байтах) цепочки s.
<dt>format(f, a)
<dd>Возвращает отформатированное значение a. Предполагается, что f - это спецификация формата в  смысле
<a href=PRINTF.htm>printf(3S)</a>. Рекомендуется использовать только следующие типы спецификаторов формата: %...f, %...e и
%...s.
<dt>index(x, y)
<dd>Номер первого символа в x, совпадающего с   каким
<dd>либо символом из y. Если такого нет,  возвращается
0.
<dt>trans(s, f, t)
<dd>Сопоставляет символы источника s с символами f,  и
заменяет их на символы, стоящие в той  же  позиции
цепочки t. Символы источника, которые не  встречаются в f, копируются в результат. Если f  длиннее,
чем t, символы источника, которые сопоставляются с
избыточной частью f, не помещаются в результат.
<dt>substr(s, начало, ширина)
<dd>Подцепочка s с заданными началом и шириной.
<dt>match(цепочка_символов, шаблон)<br>
mstring(n)
<dd>Шаблон имеет синтаксис, аналогичный регулярным выражениям  команды <a href=ED.htm>ed(1)</a>. Символы ., [, ] (внутренние скобки), ^, * и $ являются специальными. Функция  mstring  возвращает  n-ую (1 n 10) подцепочку
обрабатываемой цепочки_символов,  которая  успешно
сопоставлена  с  фрагментом  шаблона, заключенного
между парами символов \( и \), из последнего обращения к match. Шаблоны  сопоставляются  с  началом
цепочки_символов  (как  если бы все они начинались
символом ^). Функция match возвращает число успешно сопоставленных символов. Пример:
<pre>
match("a123ab123", ".*\([a-z]\)") == 6
mstring(1) == "b"
</pre></dl>
<p align=justify><i>Работа с файлами</i>
<dl>
<dt>open(имя, файл, тип)<br>
close(имя)
<dd>Аргумент имя должен быть именем переменной в смысле bs (переданным как цепочка символов). При обращении  к  функции  open  в качестве аргумента файл
можно задавать:
<ol>
<li>0,  1,  или  2,  что означает стандартный ввод,
стандартный вывод и стандартный протокол  соответственно.
<Li>Цепочку символов, представляющую имя файла.
<li>Цепочку  символов  с ! в начале, представляющую
команду, которая должна  быть  выполнена  (посредством sh -c).
</ol>Аргумент тип должен быть  одним  из  следующих:  r
(читать), w (писать), W (писать без перевода строки), a (добавлять). После того как выполнена функция  close, имя становится обычной переменной. Начальные связывания таковы:
<pre>
open("get", 0, "r")
open("put", 1, "w")
open("puterr", 2, "w")
</pre>
Примеры приведены ниже.
<dt>access(s, m)
<dd>Выполняет вызов <a href=ACCESS.htm>access(2)</a>.
<dt>ftype(s)
<dd>Возвращает  односимвольный индикатор типа файла: f
для обычного файла, p для именованного  канала,  d
для  каталога,  b  для  блочного устройства, c для
символьного устройства.
</dl>
<p align=justify><i>Таблицы</i>
<dl>
<dt>table(имя, размер)
<dd>Таблица в bs - это одномерный массив с ассоциативным доступом. "Индексами" (их называют также  ключами)  являются цепочки символов (числа преобразуются в цепочки). Аргумент имя должен  быть  именем
переменной  в  смысле  bs  (переданным как цепочка
символов). Аргумент размер устанавливает минимальное число элементов, которое должно быть  размещено.  Bs  печатает  сообщение об ошибке и завершает
работу, когда таблица переполняется.
<dt>item(имя, номер)<br>
key( )
<dd>Функция  item осуществляет доступ к элементам таблицы по их номерам (обычно множество значений ключей не допускает систематического перебора). После
того, как функция item возвратит значение элемента
таблицы, результатом функции  key  будет  "индекс"
(ключ) этого элемента. Аргумент имя нельзя брать в
кавычки. Так как точные размеры таблицы не определены, надо использовать операцию опроса, чтобы обнаружить конец таблицы, например:
<pre>
table("t", 100)
 ...
 
# Если значением переменной word является слово,
# следующее выражение добавляет единицу
# к счетчику этого слова:
++t[word]
 ...
 
# Напечатать пары ключ/значение:
for i = 0, ?(s = item(t, i)), ++i  if key() \
 put = key()_":"_s
</pre>
<dt>iskey(имя, слово)
<dd>Проверяет, есть ли ключ слово в таблице имя; возвращает 1, если есть, и 0, если нет.
</dl>
<p align=justify><i>Прочие функции</i>
<dl>
<dt>eval(цепочка_символов)
<dd>Вычисляет свой аргумент как выражение в смысле bs.
Эта функция  удобна  для  преобразования  числовых
строк во внутреннюю числовую форму. Eval также может использоваться как грубый метод косвенной  адресации. Например, после выполнения операторов
<pre>
name = "xyz"
eval("++"_name)
</pre>
значение переменной xyz увеличится на 1. Кроме того, функция eval с предшествующей операцией опроса
позволяет управлять обработкой ошибочных ситуаций.
Результатом выполнения оператора
<pre>
?eval("open(\"X\", \"XXX\", \"r\")")
</pre>
будет 0, если файла с  именем  "XXX"  нет  (вместо
аварийного  завершения  программы   пользователя).
Следующий фрагмент выполняет переход  на  метку  L
(если она существует):
<pre>
label="L"
if !(?eval("goto "_label)) puterr = "no label"
</pre>
<dt>plot(запрос, аргументы) 
<dd>Формирует вывод для устройств, которые поддерживаются  программой  <a href=TPLOT.htm>tplot(1G)</a>.  Допустимы  следующие
запросы:
<dl>
<dt>plot(0, терминал)
<dd>Определяет, что дальнейший вывод программы plot
должен направляться программе <a href=TPLOT.htm>tplot(1G)</a> с аргументом -Tтерминал.
<dt>plot(4)
<dd>"Очищает" плоттер.
<dt>plot(2, метка)
<dd>Ставит метку на текущую точку.
<dt>plot(3, x1, y1, x2, y2)
<dd>Рисует отрезок между (x1,y1) и (x2,y2).
<dt>plot(4, x, y, r)
<dd>Рисует круг с центром (x,y) и радиусом r.
<dt>plot(5, x1, y1, x2, y2, x3, y3)
<dd>Рисует дугу с центром (x1,y1) и концами (x2,y2)
и (x3,y3).
<dt>plot(6)
<dd>Не реализован.
<dt>plot(7, x, y)
<dd>Делает точку (x,y) текущей.
<dt>plot(8, x, y)
<dd>Рисует отрезок из текущей точки в (x,y).
<dt>plot(9, x, y)
<dd>Рисует точку в (x,y).
<dt>plot(10, режим)
<dd>Устанавливает заданный режим проведения линий.
<dt>plot(11, x1, y1, x2, y2)
<dd>Устанавливает левый нижний угол области рисования в (x1,y1), а правый верхний - в (x2,y2).
<dt>plot(12, x1, y1, x2, y2)
<dd>Определяет, что соответствующие x (y) координаты должны умножаться на x1 (y1) и затем складываться с x2 (y2)  перед тем, как они  изображаются.  Первоначальный  масштаб  - plot(12, 1.0,
1.0, 0.0, 0.0).
</dl>
Некоторые запросы применимы не ко всем  плоттерам.
Все запросы, кроме 0 и 12, реализованы  на  основе
передачи символов программе <a href=TPLOT.htm>tplot(1G)</a>. Чтобы получить дополнительную информацию, см. <a href=PLOT.htm>plot(4)</a>.
<dt>last( ) 
<dd>В режиме немедленного выполнения  возвращает  последнее вычисленное значение.
</dl>
<p align=justify><b>ПРИМЕРЫ</b><ol>
<li>Использование bs в качестве калькулятора:
<pre>
$ bs
#  Расстояние (в дюймах), которое свет
#  проходит за наносекунду.
186000 * 5280 * 12 / 1e9
11.78496

#  Сложный процент (из 6% за 5 лет
#  с 1000 долларов).
int = .06 / 4
bal = 1000
for i = 1 5*4  bal = bal + bal*int
bal - 1000
346.855007

<dd>exit
</pre>
<li>Общий вид типичных bs-программ:
<pre>
#  Инициализация:
var1 = 1
open("read", "infile", "r")
...

#  Вычисление:
while  ?(str = read)
...
next
#  Завершение
close("read")
...

#  Последний выполняемый оператор (exit или stop):
exit
#  Последняя входная строка
run
</pre>
<li>Примеры ввода/вывода:
<pre>
#  Копировать "oldfile" в "newfile".
open("read", "oldfile", "r")
open("write", "newfile", "w")
...
while ?(write = read) ...
...
# закрыть "read" и "write":
close("read")
close("write")

#  Канал между командами.
open("ls", "!ls *", "r")
open("pr", "!pr -2 -h 'List'", "w")
while ?(pr = ls)  ...
...

#  Закрыть файлы:
close("ls")
close("pr")
</pre></ol>
<p align=justify><b>СМ. ТАКЖЕ</b><br> 
<a href=ED.htm>ed(1)</a>, <a href=SH.htm>sh(1)</a>, <a href=TPLOT.htm>tplot(1G)</a>.<br>
<a href=ACCESS.htm>access(2)</a>, <a href=PRINTF.htm>printf(3S)</a>, <a href=STDIO.htm>stdio(3S)</a>, <a href=PLOT.htm>plot(4)</a> в Справочнике
программиста.
<p align=justify>
Более полное описание математических функций см. в разделе 3M Справочника программиста (для возведения в степень используется функция pow, описанная в <a href=EXP.htm>exp(3M)</a>; пакет ввода/вывода используется стандартный.
<p align=justify><b>СЮРПРИЗЫ</b><br>
"Индексами" неинициализированных элементов таблицы  являются  цепочки из двух символов с восьмеричными кодами
43 и 300, поэтому приведенный пример печати пар ключ/значение будет работать неверно.
<p align=justify>
В цепочке символов нельзя употребить знак #,  поскольку
он служит началом комментария.
<table cellspacing=0 cellpadding=0 border=0 background="_pic_/footer0.jpg" width="100%">
<tr><td align="center">
<table cellspacing=0 cellpadding=4 border=0 width="100%" background="">
<tr><td align="right" valign="top" width="33%">
<font size="-2">Comments: <a class="plain" href="mailto:info@citmgu.ru?Subject='From bottom of CIT FORUM local copy'">info@citmgu.ru</a><br>
Designed by <a class="plain" href="mailto:andrey@novikov.com">Andrey Novikov</a><br>
Copyright &copy; <a class="plain" href="http://www.citmgu.ru/">CIT</a></font>
</td></tr>
</table>
</td></tr>
</table>
</body>
</html>
