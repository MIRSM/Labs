<html>
<head>
<title>CTRACE(1)</title>
		    <style type="text/css">
TH.arial { font-family: Arial, Serif;}
P.topic { font-family: sans-serif;}
A.plain { text-decoration: none;}
A.topic01 { color: #006890;
font-family: sans-serif;
text-decoration: none;}
A.topic02 { color: #099771;
font-family: sans-serif;
text-decoration: none;}
A.topic03 { color: #719709;
font-family: sans-serif;
text-decoration: none;}
A.topic04 { color: #98650A;
font-family: sans-serif;
text-decoration: none;}
A.topic05 { color: #98340A;
font-family: sans-serif;
text-decoration: none;}
A.topic06 { color: #099607;
font-family: sans-serif;
text-decoration: none;}
A.topic07 { color: #9E1215;
font-family: sans-serif;
text-decoration: none;}
A.topic08 { color: #970941;
font-family: sans-serif;
text-decoration: none;}
A.topic09 { color: #950995;
font-family: sans-serif;
text-decoration: none;}
A.topic010 { color: #390A98;
font-family: sans-serif;
text-decoration: none;}
H1 { font-family: sans-serif;}
H2 { font-family: sans-serif;}
H3 { font-family: sans-serif;}
H4 { font-family: sans-serif;}
H5 { font-family: sans-serif;}
H6 { font-family: sans-serif;}
</style>
</head>
<body bgcolor="#FFFFFF" link="#006890" vlink="#003860" alink="#800000" text="#000000">
<table cellspacing=0 cellpadding=0 border=0 background="_pic_/header0.jpg" width="100%">
<tr><td align="center">
<table cellspacing=0 cellpadding=4 border=0 width="100%" background="">
<tr><td align="left">
<img src="_pic_/logo.gif" width=157 height=53 border=0 alt="Server for Information Technologies">
</td><td align="right">
<font size="-2">Сервер поддерживается<br><a class="plain" href="http://www.citmgu.ru">Центром Информационных Технологий</a><br>(095) 932-9212, 932-9213, 939-0783<br>E-mail: <a class=noneline href="mailto:info@citmgu.ru?Subject='From page topic CIT FORUM local copy'">info@citforum.ru</a></font>
</td></tr>
</table>
<table cellspacing=0 cellpadding=4 border=0 width="100%" background="">
<tr><td align="left">
<font size="-1">Сервер содержит море(!) аналитической информации</font>
</td><td align="right">
<font size="-1">CIT Forum CD-ROM</font>
</td></tr>
</table>
</td></tr>
</table>

<h3 align=center>CTRACE(1)</h3>
<p align=justify><b>НАЗВАНИЕ</b><br>
ctrace - отладчик C-программ
<p><b>СИНТАКСИС</b>
<pre>
  ctrace  [-f функция ...] [-v функция ...] [-o] [-x] [-u] [-е]
  [-lчисло_операторов] [-s] [-tчисло_переменных] [-P] [-b]
  [-pцепочка_символов] [-rфайл] [файл]
</pre>
<p align=justify><b>ОПИСАНИЕ</b><br>
Команда ctrace позволяет отслеживать выполнение C-программ, от оператора к оператору. Это напоминает исполнение процедуры shell'а с опцией -x. Отладчик ctrace  читает C-программу из файла (или со  стандартного  ввода,
если файл не задан), вставляет  функции  печати  текста
каждого исполняемого оператора и значений всех  используемых или модифицируемых переменных, и пишет  измененную программу на стандартный  вывод.  Результат  работы
команды ctrace следует поместить во временный файл, так
как команда <a href=CC.htm>cc(1)</a> не позволяет использовать каналы. Затем временный файл нужно скомпилировать и выполнить.
<p align=justify>
Перед выполнением оператора  отладчик  выводит  его  на
терминал вместе с именами и значениями всех  используемых переменных, затем оператор выполняется, после  чего
выдаются имена и значения переменных,  модифицированных
этим оператором. Отладчик обнаруживает циклы и выключает трассировку до тех пор, пока не происходит выход  из
цикла или не выполняется другая последовательность действий внутри цикла. Через каждые 1000 итераций выводятся предупреждающие сообщения, чтобы  помочь  обнаружить
бесконечные циклы. Трассировочная печать идет на  стандартный вывод, следовательно, ее можно направить в  некоторый файл для последующей обработки с помощью редактора или команд <a href=BFS.htm>bfs(1)</a> или <a href=TAIL.htm>tail(1)</a>.
<p>
Обычно используемые опции:
<dl>
<dt>-f функция ...
<dd>Отслеживать только указанные функции.
<dt>-v функция ...
<dd>Отслеживать все функции, кроме указанных.
</dl><p align=justify>
Имеются  стандартные  и  дополнительные  форматы вывода
значений переменных. Длинные целые и  указатели  всегда
распечатываются  как целые со знаком. Указатели на массивы символов, если это нужно по смыслу, распечатываются еще и как цепочки символов. Символьные, короткие целые и целые значения распечатываются как целые со  знаком  и,  если  нужно,  как  символы. Плавающие значения
двойной  точности  распечатываются  в  экспоненциальном
формате. Можно потребовать, чтобы значения распечатывались  еще  и в дополнительном формате, указав следующие
опции:
<table>
<tr><td>-o<td>Восьмеричный формат.</tr>
<tr><td>-x<td>Шестнадцатеричный формат.</tr>
<tr><td>-u<td>Беззнаковый формат.</tr>
<tr><td>-е<td>Формат вещественных чисел.</tr>
</table>
<p>Следующие опции используются только в специальных  случаях:
<dl>
<dt>-lчисло_операторов 
<dd>Контролировать  заданное число последовательно выполняемых операторов на предмет цикла трассировки,
а не 20, как считается по  умолчанию.  Чтобы  полностью трассировать циклы, используйте значение 0.
<dt>-s
<dd>Отменить ненужную трассировку  простых  операторов
присваивания и вызовов функций копирования цепочек
символов. Эта опция может скрыть ошибки, вызванные
использованием операции = вместо ==.
<dt>-tчисло_переменных 
<dd>Отслеживать заданное число_переменных для  каждого
оператора, а не 10, как по умолчанию (максимальным
значением  n  является  20). В разделе ДИАГНОСТИКА
об ясняется, когда нужно использовать эту опцию.
<dt>-P
<dd>Перед выполнением трассировщика запустить  препроцессор языка C. Можно использовать также опции -D,
-I и -U препроцессора <a href=CPP.htm>cpp(1)</a>.
</dl><p align=justify>
Следующие опции используются для обеспечения трассировки программ, которые будут выполняться не в среде  операционной системы UNIX:
<dl>
<dt>-b
<dd>Использовать для трассировки только базовые  функции, то есть функции,  описанные  в  статьях  <a href=CTYPE.htm>ctype(3C)</a>, <a href=PRINTF.htm>printf(3S)</a> и <a href=STRING.htm>string(3C)</a>. Эти функции  есть
даже в кросскомпиляторах для микропроцессоров. Опция -b необходима,  в  частности,  при  выполнении
трассируемых программ в  операционной  системе,  в
которой   нет   функций   <a href=SIGNAL.htm>signal(2)</a>,   <a href=FFLUSH.htm>fflush(3S)</a>,
<a href=LONGJMP.htm>longjmp(3C)</a> или <a href=SETJMP.htm>setjmp(3C)</a>.
<dt>-pцепочка_символов 
<dd>Изменить подразумеваемое  значение  трассировочной
функции   печати   printf(.   Например,   указание
-p'fprintf(stderr,' приведет к тому, что  отладочная печать пойдет в стандартный протокол.
<dt>-rфайл 
<dd>Использовать файл вместо пакета функций трассировки runtime.c.  Это  позволяет  полностью  изменить
функцию  печати,  а не только ее название и первые
аргументы, как в случае опции -p.
</dl>
<p align=justify><b>ПРИМЕР</b><br>
Пусть файл lc.c содержит следующую C-программу:
<pre>
1 #include &lt;stdio.h&gt;
2 main()   /* Подсчет числа вводимых строк */
3 {
4   int c,nl;
5
6   nl = 0;
7   while ((c=getchar()) != EOF)
8     if (c = '\n')
9       ++nl;
10  printf ("%d\n",nl);
11}
</pre>
и Вы вводите такие команды и тестовые данные:
<pre>
cc lc.c
a.out
1
CTRL+D
</pre><p align=justify>
Программа будет откомпилирована и выполнена.  Результатом работы программы будет число 2, но это неверный результат, так как тестовые данные содержат  только  одну
строку. Ошибка в этой программе банальная, но коварная.
Если Вы вызовете отладчик ctrace с помощью команд
<pre>
ctrace lc.c &gt; temp.c
cc temp.c
a.out
</pre>
то результат будет таким:
<pre>
 2 main()  
 6   nl = 0;  
/* nl == 0 */  
 7   while ((c=getchar()) != EOF)  
</pre>
Теперь программа ждет ввода. Если Вы вводите те же тестовые данные, что и ранее, получится следующее:
<pre>
/* c == 49 or '1' */
 8     if (c = '\n')
  /* c == 10 or '\n' */
 9       ++nl;
    /* nl == 1 */
 7   while ((c=getchar()) != EOF)
/* c == 10 or '\n' */
 8     if (c = '\n')
  /* c == 10 or '\n' */
 9       ++nl;
    /* nl == 2 */
/* repeating */
/* repeated &lt; 1 time */
 7   while ((c=getchar()) != EOF)
</pre>
Если теперь ввести символ конца файла, получится  окончательный результат:
<pre>
/* c == -1 */
10   printf ("%d\n",nl);
/* nl == 2 */ 2

/* return */
</pre><p align=justify>
Обратите внимание на печать значения переменной nl сразу  после  трассировки оператора printf. Также обратите
внимание на комментарий /* return */,  добавленный  отладчиком  ctrace  в  конце трассировки. Он указывает на
неявный выход  из  функции  по  достижении  закрывающей
скобки.
<p align=justify>
Трассировочная  печать  показывает,  что  переменной  c
присваивается значение '1' в строке 7, а в строке 8 она
уже имеет значение '\n'. Раз Вы  обратили  внимание  на
оператор if в строке 8, то Вы, скорее  всего,  догадаетесь, что использовали оператор присваивания  =  вместо
сравнения ==. Во время простого просмотра текста  программы эту ошибку легко пропустить.
<p align=justify><i>Управление трассировкой во время выполнения</i><br>
Стандартный режим трассировки охватывает всю программу,
если только не заданы опции -f или -v  для  трассировки
избранных функций. Стандартное использование  отладчика
ctrace не дает  возможности  пооператорного  управления
трассировкой, не позволяет выключать и включать трассировку во время выполнения отлаживаемой программы.
<p align=justify>
Вставляя    в   программу   вызовы  функций ctroff( ) и
ctron( ), можно, соответственно, выключать или включать
трассировку  во  время выполнения. Тем самым, используя
операторы if языка C, можно  реализовать  сколь  угодно
сложный  способ  управления  трассировкой. На основании
того факта, что ctrace определяет переменную препроцессора CTRACE, реализуется  условная  вставка  операторов
управления трассировкой, например
<pre>
#ifdef CTRACE
  if (c == '!" && i &gt; 1000)
 ctron ();
#endif
</pre>
Если программа  оттранслирована  с  опцией  -g, функции
включения/выключения трассировки можно вызвать  из  отладчика <a href=SDB.htm>sdb(1)</a>. Например, чтобы отслеживать  выполнение
всех строк главной программы, кроме интервала  строк  с
седьмой по десятую, введите следующие команды:
<pre>
sdb a.out
main:7b ctroff()
main:11b ctron()
r
</pre><p align=justify>
Допускается также выключение  и  включение  трассировки
установкой значения переменной tr_ct_ в 0 или  1  соответственно. Такой способ целесообразен, если  используется отладчик,  который  не  предоставляет  возможности
вызвать функции ctroff( ) и ctron( ) непосредственно.
<p align=justify><b>ФАЙЛЫ</b>
<dl><dt><tt>/usr/lib/ctrace/runtime.c</tt>
<dd>Трассировочное окружение времени выполнения.
</dl>
<p align=justify><b>СМ. ТАКЖЕ</b><br> 
<a href=BFS.htm>bfs(1)</a>, <a href=TAIL.htm>tail(1)</a>.<br>
<a href=SIGNAL.htm>signal(2)</a>,     <a href=CTYPE.htm>ctype(3C)</a>,    <a href=FCLOSE.htm>fclose(3S)</a>,    <a href=PRINTF.htm>printf(3S)</a>,
<a href=SETJMP.htm>setjmp(3C)</a>, <a href=STRING.htm>string(3C)</a> в Справочнике программиста.
<p align=justify><b>ДИАГНОСТИКА</b><br>
В этом разделе  поясняются  диагностические  сообщения,
выдаваемые как трассировщиком ctrace, так и  компилятором <a href=CC.htm>cc(1)</a>, поскольку трассиривочные действия часто приводит к каким-то предупреждающим сообщениям от компилятора <a href=CC.htm>cc(1)</a>. В редких случаях появляются и сообщения  об
ошибках, но их можно избежать.
<p align=justify><i>Диагностика отладчика ctrace</i>
<dl>
<dt>warning: some variables are not traced in this statement 
<dd>В каждом операторе отслеживаются только  10  переменных,  чтобы  избежать ошибки C-компилятора "out
of tree  space;  simplify  expression"  (исчерпано
пространство для дерева, упростите выражение). Для
увеличения  числа отслеживаемых переменных используйте опцию -t.
<dt>warning: statement too long to trace 
<dd>Оператор имеет длину  более  400  символов.  Чтобы
уменьшить длину, используйте для выделения  отступов символы табуляции, а не пробелы.
<dt>cannot handle preprocessor code, use -P option 
<dd>Обычно это происходит, когда в середине C-оператора есть директивы препроцессора #ifdef/#endif  или
в конце директивы препроцессора #define стоит символ точки с запятой.
<dt>'if...else if' sequence too long 
<dd>Упростите конструкцию, удалив ключевое слово  else
из середины.
<dt>possible syntax error, try -P option 
<dd>Попробуйте использовать опцию -P для обработки исходного файла с соответствующими  опциями  препроцессора -D, -I, или -U. Если диагностическое сообщение  не исчезло, посмотрите разделы предупреждений ниже.
</dl>
<p><i>Диагностика компилятора cc</i>
<dl>
<dt>warning: illegal combination of pointer and integer<br>
warning: statement not reached<br>
warning: sizeof returns 0 
<dd>Не обращайте внимания.
<dt>compiler takes size of function 
<dd>См. выше сообщение отладчика ctrace "possible syntax error".
<dt>yacc stack overflow 
<dd>См. выше сообщение  отладчика  ctrace  "'if...else
if' sequence too long".
<dt>out of tree space; simplify expression 
<dd>Используйте опцию -t для уменьшения, по  сравнению
с подразумеваемым значением 10, количества  отслеживаемых в одном операторе переменных. Не обращайте внимания на предупреждающее сообщение  "ctrace:
too many variables to trace", которое Вы  получите
теперь.
<dt>redeclaration of signal 
<dd>Либо исправьте описание  функции  <a href=SIGNAL.htm>signal(2)</a>,  либо
удалите его и включите в текст файл &lt;signal.h&gt;.
</dl>
<p align=justify><b>ПРЕДОСТЕРЕЖЕНИЯ</b><br>
Вы получите сообщение от отладчика ctrace  о  синтаксической ошибке, если опустите точку с запятой после последнего элемента описания записи или  об единения,  непосредственно перед правой скобкой }. Некоторые  C-компиляторы не требуют этой точки с запятой.
<p align=justify>
Определение функции с таким же именем, что и у  системной функции, может привести  к  синтаксической  ошибке,
если изменено количество аргументов. Используйте  лучше
другое имя.
<p align=justify>
Отладчик ctrace предполагает, что BADMAG является  макросом препроцессора и что EOF и NULL являются  константами, определенными с помощью директивы #define. Описание любого из этих об ектов  как  переменной,  например
int EOF;, вызовет синтаксическую ошибку.
<p align=justify><b>СЮРПРИЗЫ</b><br>
Отладчик  ctrace  не  имеет  информации  о  компонентах
структур данных таких, как записи, об единения и массивы. Он не в состоянии выбрать формат, чтобы распечатать
компоненты структуры данных, когда происходит  присваивание значения всей структуре.  Отладчик  может  вместо
структуры распечатать ее адрес или использовать  неверный формат (например, 1.23456e-123 для записи  с  двумя
целыми компонентами).
<p align=justify>
Указатели всегда трактуются как  указатели  на  цепочки
символов.
<p align=justify>
Отслеживание циклов трассировки  производится  отдельно
для каждого файла многофайловой программы. В результате
функция, вызываемая в цикле, может продолжать трассироваться, или же некоторая функция не будет трассироваться до вызова другой функции из того же файла.
<p align=justify>
Опция -l не работает; ctrace все равно использует  подразумеваемое значение 20.
<table cellspacing=0 cellpadding=0 border=0 background="_pic_/footer0.jpg" width="100%">
<tr><td align="center">
<table cellspacing=0 cellpadding=4 border=0 width="100%" background="">
<tr><td align="right" valign="top" width="33%">
<font size="-2">Comments: <a class="plain" href="mailto:info@citmgu.ru?Subject='From bottom of CIT FORUM local copy'">info@citmgu.ru</a><br>
Designed by <a class="plain" href="mailto:andrey@novikov.com">Andrey Novikov</a><br>
Copyright &copy; <a class="plain" href="http://www.citmgu.ru/">CIT</a></font>
</td></tr>
</table>
</td></tr>
</table>
</body>
</html>
