<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>New Page 1</title>
<meta name="Microsoft Theme" content="canvas 0001">
</head>

<body background="../_themes/canvas/cnvbkgnd.jpg" bgcolor="#FFFFFF" text="#000000" link="#0066CC" vlink="#006666" alink="#996699"><!--mstheme--><font face="Arial, Arial, Helvetica"><font FACE="Arial" SIZE="2">
<p ALIGN="left">&nbsp;</p>
<blockquote>
  <blockquote>
    <h1 ALIGN="left"><!--mstheme--><font color="#336666">Chapter <a name="8">8</a> - PLUS: The <u>P</u>rogramming
    <u>L</u>anguage <u>U</u>nder <u>S</u>imulation<!--mstheme--></font></h1>
  </font>
     <font SIZE="2">
    <p ALIGN="left">A GPSS World Model is a sequence of Model Statements. A
    Model Statement may be either a GPSS Statement or a PLUS Procedure
    definition.</p>
    <p ALIGN="left">PLUS Expressions can exist as operands in GPSS Statements
    as well as within PLUS Procedures. Expressions can contain Procedure Calls
    which invoke either built-in or user defined PLUS Procedures. In addition,
    all the Stream Input/Output operations are available as built-in library
    procedures. This means that you can read from and write to files using GPSS
    Blocks or by calling the corresponding library procedures, or by using a
    mixture of both. Not only that, but now you can invoke external programs
    that exist on your system in EXE or DLL files by using the new Dynamic Call
    Procedures.</p>
    <p ALIGN="left">This chapter contains reference information on the PLUS
    language, and on the built-in procedure libraries you can access through it.</p>
    <p ALIGN="left">&nbsp;</p>
  </font><b><font FACE="Arial" SIZE="4">
  <p align="left">How this Chapter Describes Syntax</p>
  </font></b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">The valid form of individual PLUS Statements and Procedure
  invocations is indicated in a syntax line at the beginning of the statement
  description. Completing a PLUS Statement is similar to filling in the blanks
  of a form. The syntax line describes the constant and variable parts of the
  statement. It is up to you to &quot;instantiate&quot; the variable part of the
  statement in order to make it do what you want it to.</p>
  <p ALIGN="left">The items in the syntax line tell you how to code the
  statement. The following rules are observed:</p>
  <p ALIGN="left">1. Keywords are shown in the syntax line as all caps bold.
  These words, and unitalicized parentheses, must be entered as given. However,
  when you code the statement, capitalization of keywords is optional. For
  example,</p>
  <blockquote>
  </font><b><i><font FACE="Arial">
  <p ALIGN="left">ReturnString</font></i><font FACE="Arial"> = LEFT( <i>SourceString</i>,
  <i>MaxCount </i>)</p>
  </blockquote>
  </font></b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">contains the Procedure Name &quot;Left&quot; in all caps.
  Although you can change the case of the letters any way you like, you must
  still include the word &quot;Left&quot; and the parentheses when you invoke
  the Procedure. When used as a PLUS Assignment Statement, a semicolon
  terminator must be added.</p>
  <p ALIGN="left">2. The data type of the result of a Procedure invocation is
  given in the syntax line to the left of an equal (=) sign. Procedures can be
  invoked from a PLUS Procedure Call Statement, in which case the unassigned
  result is discarded. In a PLUS Assignment Statement, an &quot;lvalue&quot;
  (named value or matrix element) is required to the left of the equal sign. It
  receives the result of the Procedure invocation.</p>
  <p ALIGN="left">3. Arguments are given in the syntax line as capitalized
  bold italic semantic variables. They indicate that you must make a selection
  from a class of possibilities. The definition of each argument follows the
  grammar line. That’s where the arguments are defined, and the possible
  choices for instantiation by you are given in one or more non-bold italic
  syntactic variables, such as in ‘Must be <i>ParenthesizedExpression&quot;</i>.
  That means that you are to use a valid PLUS Expression enclosed in parentheses
  when you code the statement. Syntactic variables are defined formally in the
  Appendix.</p>
  <p ALIGN="left">The valid forms you are to use in the instantiation of
  syntactic variables is described in the next few sections. The statement and
  Procedure descriptions follow that.</p>
  <p ALIGN="left">&nbsp;</p>
 </font>
  <h2 ALIGN="left"><font face="Arial" size="5">&nbsp;&nbsp;&nbsp; <a name="8.1"></a>8.1.
  Defining PLUS Procedures</font></h2>
  <font FACE="Arial" SIZE="2">
  <p ALIGN="left">Procedures are commonly used in two different ways. They
  can be used for their effects on global variables and named values or to
  return a value to an expression.</p>
  <p ALIGN="left">If you simply wish to update a global variable or change a
  named value, no Return Statement is needed. In all cases where the result of a
  PLUS Procedure will be used where the Procedure was called (e.g.. in an
  operand or another PLUS expression), a Return Statement is necessary.</p>
  <p ALIGN="left">It’s easy to define a PLUS Procedure. All you have to do
  is to place a valid PROCEDURE Statement in a Model File and Translate it with
  the model, or send a PROCEDURE Statement to an existing simulation.
  Thereafter, you can invoke your Procedure in an Expression evaluation or a
  PLUS Assignment Statement just like any other Library Procedure.</p>
  <p ALIGN="left">As a simple example, consider the following PROCEDURE
  Statement: </font><b><font FACE="Arial">PROCEDURE SetPop(Pop_Level) Foxes =
  Pop_Level ;</p>
  </font></b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">Although most Procedures are more complex, this is all that
  is needed to define one. It doesn’t even declare a return value, so a value
  of 0 would be used by default. The sole purpose of this Procedure is to use
  the value, Pop_Level, that is passed to the Procedure and set the named value,
  Foxes, equal to that value. This, or any other PROCEDURE Statement, could even
  be sent to an existing simulation to define or redefine a Procedure named
  &quot;SetPop&quot;. Then, any PLUS Expression in the simulation could include
  a Procedure call such as</p>
  <blockquote>
    <blockquote>
    </font><b><font FACE="Arial">
    <p align="left">SetPop(Rabbits/10);</p>
    </font></b><font FACE="Arial" SIZE="2">
    </blockquote>
  </blockquote>
  <p ALIGN="left">to assign a value to the user variable </font><b><font FACE="Arial">Foxes</font></b><font FACE="Arial" SIZE="2">.
  Of course, here we assume that the User Variable RABBITS has already been
  given a value.</p>
  <p ALIGN="left">You can define temporary Matrix Entities and temporary User
  Variables that exist only throughout an invocation of a Procedure. This is
  done using the TEMPORARY Statement in the Procedure Definition.</p>
  <p ALIGN="left">When a PLUS Procedure is invoked by a Procedure Call, one
  statement in the invoked Procedure is &quot;performed&quot; or
  &quot;executed&quot; after another. Most Procedures are defined as an outer
  Compound Statement containing a Statement List. Normal execution of a
  Statement List is to perform each Statement in succession. Compound
  Statements, IF Statements, IF-ELSE Statements, WHILE Statements and GOTO
  Statements may alter the normal sequence of execution. If a RETURN Statement
  is executed, the Procedure invocation is terminated and any memory used by it
  is released.</p>
  <p ALIGN="left">You do not really need a RETURN Statement in a PLUS
  Procedure. If, during an invocation of your Procedure, processing ever reaches
  the end of the Procedure’s Statement List, the invocation of the Procedure
  is terminated and a value of 0 is returned. Something is always used as a
  return value, in case one is needed in an Expression evaluation. If you do not
  specify an Expression in your RETURN Statement, or if your last statement in
  the Statement List is completed, a zero result is used.</p>
  <p ALIGN="left">If you have PLUS Procedures you use in more than one model,
  you can keep them in a source file, called a User Procedure Library. You can
  then use the INCLUDE Command to bring in your Library into each model that
  needs it.</p>
  <p ALIGN="left">The remainder of this chapter discusses all the features of
  the PLUS language, and all the built-in Procedures available for your use
  within a simulation.</p>
  <p ALIGN="left">&nbsp;</p>
 </font>
  <h2 ALIGN="left"><font face="Arial" size="5">&nbsp;&nbsp;&nbsp; <a name="8.2"></a>8.2.
  The Language</font></h2>
  <font FACE="Arial" SIZE="2">
  <p ALIGN="left">You can incorporate either PLUS Expressions or PLUS
  Procedures and Experiments, built using the PLUS Language, into your GPSS
  World models. To do so, you must be familiar with both the building blocks of
  the language, and how to put them together. These are the topics of the
  remainder of this chapter.</p>
  <h3 ALIGN="left"><!--mstheme--><font color="#336666">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a name="8.2.1">8.2.1</a>.
  The Character Set<!--mstheme--></font></h3>
  <p ALIGN="left">The GPSS World character set consists of naming characters
  and special characters. Naming characters include the uppercase letters </font><b><font FACE="Arial">A-Z</font></b><font FACE="Arial" SIZE="2">,
  the Lower case letters </font><b><font FACE="Arial">a-z</font></b><font FACE="Arial" SIZE="2">,
  the digits </font><b><font FACE="Arial">0-9</font></b><font FACE="Arial" SIZE="2">,
  and the underscore character (</font><b><font FACE="Arial" SIZE="4"> _ </font></b><font FACE="Arial" SIZE="2">).</p>
  <p ALIGN="left">The special characters are used to denote operators and
  punctuation. They are:</font><b><font face="Arial" size="4">&nbsp;&nbsp;</font></b><font FACE="Arial" SIZE="2">
  </font><b><font face="Arial" size="3">#&nbsp; *&nbsp;</font></b><font FACE="Arial" SIZE="2">
  </font><font face="Arial" size="3"><b>&amp;&nbsp; +</b></font><font face="Arial" size="2">&nbsp;
  </font><b><font face="Arial" size="3">-</font></b><font face="Arial" size="2">&nbsp;
  </font><font face="Arial" size="3"><b>/</b></font><font face="Arial" size="2">&nbsp;
  </font><b><font face="Arial" size="3">\</font></b><font face="Arial" size="2">&nbsp;
  </font><b><font face="Arial" size="3">,&nbsp; ;&nbsp;</font></b></p>
  <p ALIGN="left"><font FACE="Arial" SIZE="2">
  The </font><b><font face="Arial" size="3">^</font></b><font FACE="Arial" SIZE="2">
  character is also considered as an operator.</p>
  <p ALIGN="left">Normally, the <font face="Arial" size="3"><b>#</b></font>
  character is used as the multiplication operator and the <font face="Arial" size="3"><b>*</b></font>
  character as the GPSS SNA indirect addressing operator. If you prefer, you can
  reverse these by selecting &quot;Switch <font face="Arial" size="3"><b> *</b></font>
  and&nbsp; <b><font face="Arial" size="3">#</font></b>&nbsp; &quot; in page 1
  of the Settings Notebook. Use Edit / Settings on the Main Menu to do this.</font></p>
  <font FACE="Arial" SIZE="2">
  <p ALIGN="left">We recommend that you use a consistent style when you use
  upper or lower case letters. Your model will be much more readable if you do.
  For example, you could make your User Variables stand out as all caps, or you
  could make keywords stand out. On the other hand, capitalized words (first
  letter upper case, the rest lower) tend to be easiest to read.</p>
  <p ALIGN="left">&nbsp;</p>
  </font>
  <h3 ALIGN="left"><!--mstheme--><font color="#336666"><font face="Arial" size="4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  8.2.2. Names</font><!--mstheme--></font></h3>
  <font FACE="Arial" SIZE="2">
  <p ALIGN="left">Names are character sequences created by you to identify
  entities, variables, and program locations. The naming characters are letters,
  digits, and underscore.</p>
  <p ALIGN="left">There are a few rules you must follow when you create a
  name. You must use from 1 to 250 naming characters, and you must start the
  name with a letter. In addition, your name must not be the same as a GPSS
  World keyword, System Numeric Attribute, or SNA Class. The keywords are listed
  in the Appendix.</p>
  <p ALIGN="left">GPSS World is case insensitive. The upper/lower case
  distinction does not matter. Only the characters in string constants and
  comments retain lower case. All other lower case letters are converted to
  upper case internally. This removes the danger of spelling two variables the
  same but having them refer to distinct values.</p>
  <p ALIGN="left">Your primary job when creating a name is to avoid keywords.
  You can refer to the list of keywords in the Appendix, if you like, but there’s
  an easier way. All you have to do is to include an underscore somewhere in
  each name, after the first character, which must be a letter. That will
  guarantee that you will not clash with GPSS World keywords.</p>
  <p ALIGN="left">&nbsp;&nbsp;&nbsp;</font>&nbsp;&nbsp;&nbsp;&nbsp; <b><font face="Arial" size="3">Named
  Values</font></b></p>
  <font FACE="Arial" SIZE="2">
  <p ALIGN="left">Named Values are names that you have placed in a Label
  field or PLUS Assignment Statement. You can use them to identify an entity or
  to hold a value. If you use them to label a GPSS Statement defining an entity,
  they are called Entity Labels. If you create them by assigning a value, as in
  an EQU Command or PLUS Assignment Statement, they are called User Variables.</p>
  <p ALIGN="left">Named Values normally have global scope. You can refer to
  them anywhere in the model. There are two kinds of Named Values, Entity Labels
  and User Variables.</p>
  </font>
  <blockquote>
  <b><font FACE="Arial">
  <p align="left">GPSS Entity Labels</p>
  </blockquote>
  </font></b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">Entity Labels are names you use in an entity creation
  command. Unlike User Variables, Entity Labels are automatically given a system
  assigned number, normally a unique integer greater than 9,999. When you refer
  to a labeled entity, GPSS World first retrieves the Entity Number stored as
  the value of the Entity Label. The Entity Number is a strictly positive
  integer, that is used by the Simulation Object to find or create any GPSS
  entity.</p>
  <p ALIGN="left">Except for Block Labels, you can assign your own value to
  an Entity Label. Generally, you should do that only BEFORE you use the name to
  define any entity. Why? Because the Entity Number is set at the time of
  creation of the entity. If you then change the value of the label to something
  else, you will not be able to address that entity. In other words, if you want
  to use an EQU Command to assign your own entity number, put it early in the
  model, before the entity definition statement.</p>
  <blockquote>
  </font><b><font FACE="Arial">
  <p align="left">User Variables</p>
  </blockquote>
  </font></b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">A User Variable is a Named Value not used as an Entity
  Label. You can give it a numeric or string value, and you can integrate it as
  a continuous variable.</p>
  <p ALIGN="left">User Variables can be global, usable throughout the model,
  or local, usable only within a single PLUS Procedure. The latter are declared
  in a Temporary Declaration in the PLUS Procedure in which it is defined. All
  other User Variables are global.</p>
  <p ALIGN="left">You can assign a value to a User Variable through EQU
  Commands, through PLUS Assignment Statements, or through numerical
  integration, setup by an INTEGRATE Command.</p>
  <p ALIGN="left">User Variables must be initialized before they can be used.
  You must assign values to them before you can use them in Expressions or
  integrations.</p>
  <p ALIGN="left">You can observe the values of User Variables in online Plot
  Windows and Expressions Windows, which have been opened onto your simulation.</p>
  </font>
  <p ALIGN="left"><b><font face="Arial" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  PLUS Statement Labels</font></b></p>
  <font FACE="Arial" SIZE="2">
  <p ALIGN="left">You can use names to identify specific statements in a PLUS
  Procedure. To do so, simply begin the statement with a name followed by a
  colon. Such statements can then be targets of GOTO Statements. Both Labeled
  Statements and GOTO Statements are discussed below, in the section on PLUS
  Statements.</p>
  <p ALIGN="left">Statement labels have local scope. They do not clash with
  names defined outside the Procedure definition. This means that they neither
  refer to global objects, nor can they be referenced from outside the
  Procedure.</p>
  </font><b>
  <p align="left"><font face="Arial" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Procedure Names</font></p>
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">You must name a PLUS Procedure or Experiment when you
  define it. Thereafter, you can invoke the same Procedure by a Procedure Call
  using the same name.</p>
  <p ALIGN="left">Procedure names are global in scope. Any Procedure can be
  invoked from any statement in the model. If you define a Procedure with a
  given name, any existing user defined PLUS Procedure with that name is
  redefined.</p>
  <p ALIGN="left">Experiments are special kinds of Procedures. They are
  identical to Procedures in syntax except that the keyword EXPERIMENT replaces
  PROCEDURE. Experiments can only be invoked by a CONDUCT Command.</p>
  </font>
  <p ALIGN="left"><font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Matrix Labels</b></font></p>
  <font FACE="Arial" SIZE="2">
  <p ALIGN="left">Similar to User Variables, Matrix Entities can have local
  or global scope. A Matrix defined in a Temporary Matrix PLUS Declaration is
  local, known only with the Procedure in which it is declared. Such a Matrix is
  created when a Procedure invocation begins, and destroyed when it ends.</p>
  <p ALIGN="left">Global Matrix Entities are declared in a GPSS MATRIX
  Command. The Label you use becomes the Matrix Entity Label. Global Matrix
  Entities are permanent and may be referenced anywhere in the model.</p>
  <p ALIGN="left">All Matrices are created with uninitialized elements. You
  must assign values to them before you can use them in Expressions.</p>
  <p ALIGN="left">You can use a Matrix Window to view the dynamics of any
  cross section of a Matrix. In addition, you can observe the values of Matrix
  elements in online Plot Windows and Expressions Windows, which have been
  opened onto your simulation.</p>
  <p ALIGN="left">&nbsp;</p>
  <h3 ALIGN="left"><!--mstheme--><font color="#336666">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8.2.3.
  Expressions<!--mstheme--></font></h3>
  <p ALIGN="left">A PLUS Expression is a combination of one or more elements,
  called factors. Expressions are built by using operators and Procedure calls
  to combine factors. The rules for building Expressions are described in the
  next few sections.</p>
  <p ALIGN="left">Expressions can be used in PLUS Procedures and in the
  operands of GPSS Statements. Usually, when an Expression is used in a Block
  operand, it must be enclosed in parentheses. The list of acceptable syntactic
  variables will then include <i>ParenthesizedExpression</i> as one or the
  operand’s alternative forms. For compatibility some Commands do not need to
  use the outer parentheses, but if you always parenthesize Expressions used in
  GPSS Statements, you will be safe.</p>
  </font>
  <p ALIGN="left"><b><font face="Arial" size="4">Data Types</font></b></p>
  <font FACE="Arial" SIZE="2">
  <p ALIGN="left">Any User Variable, Matrix element, Savevalue, or
  Transaction Parameter can have a value on any of several forms called Data
  Types. Further, each has an uninitialized form which prevents its use before
  it has been assigned its first value.</p>
  <p ALIGN="left">The three major Data Types are Integer, Real, and String.
  The first two may be referred to as numeric Data Types.</p>
  <p ALIGN="left">Integers are 32 bit twos complement numbers. If, during
  arithmetic operations, an integer overflows, it is converted to a real number.</p>
  <p ALIGN="left">Real data items are double precision floating point
  numbers. They have a precision of 15 decimal digits and a range of exponents
  of -306 to 306.</p>
  <p ALIGN="left">Strings are sequences of ASCII characters. They can be any
  size, up to the maximum memory request declared in the &quot;Simulate&quot;
  page of the Settings Notebook. A whole class of String Procedures resides in
  the Procedure Library for creating and manipulating strings.</p>
  <p ALIGN="left">Data types are converted from one to the other explicitly
  by Procedure calls, or implicitly during the evaluation of Expressions. This
  is discussed further below.</p>
  <p ALIGN="left">&nbsp;</p>
  </font>
  <p ALIGN="left"><b><font face="Arial" size="4">Factors</font></b></p>
  <font FACE="Arial" SIZE="2">
  <p ALIGN="left">Factors are the basic building blocks of Expressions. You
  combine them in Expressions which, in turn, can be used in GPSS Statement
  operands and PLUS Procedures. The detailed grammar is in the Appendix, but the
  following definitions should be suggestive.</p>
  <p ALIGN="left">The GPSS World Expression factors are:</p>
  <blockquote>
    <p align="left">1. String Constants, such as<b> </b></font><b><font FACE="Arial" SIZE="3">&quot;A
    stitch in time ...&quot;</font></b><font FACE="Arial" SIZE="2">.</p>
    <p align="left">2. Real constants, such as </font><b><font FACE="Arial" SIZE="3">201.6</font></b><font FACE="Arial" SIZE="2">.</p>
    <p align="left">3. Integer Constants, such as </font><b><font FACE="Arial" SIZE="3">17</font></b><font FACE="Arial" SIZE="2">.</p>
    <p align="left">4. Names, such as</font><font FACE="Arial" SIZE="3"> <b>Water_Level</b></font><font FACE="Arial" SIZE="2">.</p>
    <p align="left">5. PLUS Matrix elements, such as<br>
    </font><b><font FACE="Arial" SIZE="3">Array1[ P$Part, X$Order_Index+20 ]</font></b><font FACE="Arial">.</font><font FACE="Arial" SIZE="2">
    Matrix elements must be <i>Name</i> <b>[</b> <i>ExpressionList</i> <b>]</b>
    . The expression List can contain from 1 to 6 expressions, corresponding to
    the dimensions of the matrix. Each can vary in complexity from a simple
    integer to a highly complex PLUS expression.</p>
    <p align="left">6. Procedure Calls, such as </font><b><font FACE="Arial" SIZE="3">Word(X$Quote,2)
    or</font><font FACE="Arial"> </font><font FACE="Arial" SIZE="3">Myproc(X$Arg1,X$Arg2)</font></b><font FACE="Arial" SIZE="2">.
    Procedure calls must be <i>Name</i><b>(</b><i>ExpressionList</i> <b>)</b>.</p>
    <p align="left">7. System Numeric Attributes, such as </font><b><font FACE="Arial" SIZE="3">AC1</font></b><font FACE="Arial" SIZE="3">,
    <b>F$My_Facility</b></font><font FACE="Arial" SIZE="2">, </font><b><font FACE="Arial" SIZE="3">MX$Mat1(2,1)</font></b><font FACE="Arial" SIZE="2">,
    and </font><b><font FACE="Arial" SIZE="3">SR*My_Parm</font></b><font FACE="Arial" SIZE="2">.</p>
  </blockquote>
  <p ALIGN="left">You use operators and Procedure calls to combine factors
  into Expressions, using the rules associated with each operator or Procedure.
  These are discussed below.</p>
  <p ALIGN="left">Factors are defined formally in the Appendix.</p>
  </font>
      <b>
      <p align="left"><font face="Arial" size="4">Operators</font></p>
  </b><font FACE="Arial" SIZE="2"><font SIZE="2">
      <p ALIGN="left">The arithmetic operators of GPSS World Expressions are
      listed here in decreasing order of precedence. Note that the
      multiplication operator is normally</font><b><font SIZE="4"> </font></b><font SIZE="4">#</font><font SIZE="2">,
      not </font><b><font SIZE="4">*</font></b><font SIZE="2"> (which is the
      indirect addressing operator within System Numeric Attributes). You can
      switch the roles of <b>#</b> and <b>*</b> so that <b>*</b> denotes
      multiplication and <b>#</b> denotes GPSS indirect addressing. This is done
      by clicking a checkbox labeled &quot;<b>Switch * and #</b>&quot; in the
      first page of the Object's Settings Notebook (Edit / Settings).</p>
      <p ALIGN="left">All arithmetic operators coerce string operands to
      numeric values.</p>
      <p ALIGN="left"><img border="0" src="../images/R8_A.gif" width="511" height="465"></p>
      <p ALIGN="left">&nbsp;</p>
      <p ALIGN="left">The arity of an operator indicates the number of
      operands it requires. Unary operators always appear to the left of the
      operand.</p>
      <p ALIGN="left">Operators are either left or right associative. This is
      given in column 5, above. An operand surrounded by left associative
      operators of equal precedence is taken by the operator to its left.</p>
      <p ALIGN="left">Expressions are combinations of one or more factors,
      connected by operators, and evaluated according to a well-defined set of
      rules.</p>
      </font><b><font SIZE="4">
      <p align="left">Evaluation</p>
      </font></b><font SIZE="2">
      <p ALIGN="left">When an Expression is evaluated, values are determined
      and combined in order to calculate a final result. The following actions
      occur:</p>
      <blockquote>
        <blockquote>
          <p align="left">1. String and numeric constants evaluate to a copy of themselves.</p>
          <p align="left">2. Named Values evaluate to the associated value.</p>
          <p align="left">3. SNAs evaluate to a simulation or entity state value.</p>
          <p align="left">4. Procedure calls evaluate each argument, then return the result
          of the Procedure invocation. Built-in Procedures coerce the arguments.</p>
          <p align="left">5. Operators evaluate one or two operands, coerce the intermediate
          results to numeric values, and calculate the resulting value of the
          operation.</p>
        </blockquote>
      </blockquote>
      <p ALIGN="left">The Operators in GPSS World have a precedence order
      that affects how the Expressions you create are evaluated. For example,
      the exponentiation operator </font><b><font SIZE="4">^</font></b><font SIZE="2">
      has higher priority than the multiplication operator</font><b><font SIZE="4">
      #</font></b><font SIZE="2">. This means that the Expression</p>
      <blockquote>
        <blockquote>
        </font><b>
        <p ALIGN="left">4 # 3 ^ 2</p>
        </blockquote>
      </blockquote>
      </b><font SIZE="2">
      <p ALIGN="left">is evaluated to a result of 36, not 144, because the
      first intermediate result is formed by evaluating the operator with the
      higher precedence. If you want a different order of evaluation than that
      implied by the operator precedence hierarchy, you should use parentheses
      to control the evaluation. Continuing the last example,</p>
      <blockquote>
        <blockquote>
        </font><b>
        <p ALIGN="left">( 4 # 3 ) ^ 2</p>
        </blockquote>
      </blockquote>
      </b><font SIZE="2">
      <p ALIGN="left">evaluates to 144.</p>
      <p ALIGN="left">GPSS World operators are &quot;overloaded&quot; in the
      sense that their operands are coerced to the proper data type just before
      the operation is applied. Therefore, you do not need to worry about data
      types when creating PLUS Expressions.</p>
      <p ALIGN="left">Truncations are not done automatically during
      Expression evaluation. To do so, you must either invoke Procedures that
      truncate, or you must run in GPSS/PC Compatibility Mode. In Compatibility
      Mode, the old GPSS rules are used to truncate SNAs and the intermediate
      results of VARIABLE and BVARIABLE evaluations. Compatibility Mode is
      discussed in Chapter 1.</p>
      </font><b><font SIZE="4">
      <p align="left">Evaluation of Expressions</p>
      </font></b><font SIZE="2">
      <p ALIGN="left">Expressions are combinations of mathematical operators,
      library functions, SNAs, and constants that obey the rules of elementary
      algebra. An Expression is evaluated according to the hierarchy of
      operators listed above, and otherwise left to right. The order of
      evaluation may be controlled by inserting paired parentheses.</p>
      <p ALIGN="left">Expressions may be <i>evaluated</i>, <i>evaluated
      numerically</i>, or <i>evaluated as a string</i>. The last two modes
      reflect an additional step applied after the normal evaluation.</p>
      <p ALIGN="left">When an Expression is <i>evaluated numerically</i>, a
      string result is converted to its numerical equivalent based on the
      numeric characters that begin the string. A string beginning with
      non-numeric characters is converted to numeric zero.</p>
      <p ALIGN="left">Similarly, when an Expression is <i>evaluated as a
      string</i>, any numeric result is converted to a string equivalent. In
      reports and Data Streams, the representation of large numbers can be
      controlled by suppressing scientific notation, as is done in the Model
      Settings Notebook: This is set in the &quot;Reports&quot; page of the
      Model Settings Notebook.</p>
      </blockquote>
    </blockquote>
    <p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    CHOOSE</font><b> Edit / Settings</p>
    <blockquote>
      <blockquote>
      </b><font SIZE="2">
      <p ALIGN="left">then select the <b>Report </b>page. Then set the
      checkbox marked &quot;Scientific Notation&quot; as desired. Scientific
      notation uses a base value followed by a power of ten. For example, eleven
      hundred would be represented as 1.1e</font><font SIZE="1">3</font><font SIZE="2">
      in scientific notation.</p>
      <p ALIGN="left">Special rules apply when a simulation is run in GPSS/PC
      Compatibility Mode. This are discussed more fully in Chapter 1. In
      Compatibility Mode, SNAs are truncated, and when Bvariable Entities and
      Variable Entities are evaluated, intermediate results are truncated.</p>
      </font><b><font SIZE="4">
      <p align="left">Data Conversion</p>
      </font></b><font SIZE="2">
      <p ALIGN="left">In general, you do not need to worry about data types
      and conversions. All the work is done behind the scenes.</p>
      <p ALIGN="left">Data types are converted, as needed, when operated
      upon, or when processed as arguments to Procedures. For example, strings
      combined by an arithmetic + operator are converted to numeric values and
      the results are added together yielding a numeric result. Similarly,
      String Procedures that take a string as an argument, will convert a
      numeric value to its string equivalent, if necessary.</p>
      <p ALIGN="left">Data items are not changed by evaluation unless
      operated upon, or used as an argument to a Procedure. Arithmetic operators
      change arguments to numeric values before performing the operation, and
      all Procedures coerce each argument to the suitable form. This is done
      automatically.</p>
      <p ALIGN="left">Coercion only occurs to operand or an operator, or to
      arguments of a built-in Procedure during evaluation. The arguments of user
      defined PLUS Procedures are not coerced prior to invocation of the
      Procedure. However, the coercion of operand and arguments may occur within
      the body of the User Procedure, if required by the other PLUS Statements.</p>
      <p ALIGN="left">When an operand or argument is coerced to a string, any
      numeric value must be converted to its ASCII equivalent. Normally,
      extremely large or small numbers are presented in scientific notation in
      mantissa-exponent format. Scientific notation can be suppressed by a
      setting in the &quot;Report&quot; page of the Model Settings Notebook.</p>
    <p align="left">When a string is coerced to a numeric value, only the first characters
    that can be interpreted as numeric are used. If there are none, the string
    is converted to numeric 0. When a real value is coerced to integer, it is
    truncated toward 0. For example, 2.1 truncates to 2, and -2.1 truncates to
    -2.</p>
  </font>
<p ALIGN="left">&nbsp;</p>
<h3 ALIGN="left"><!--mstheme--><font color="#336666">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8.2.4. PLUS
Statements<!--mstheme--></font></h3>
  </font>
    <font FACE="Arial" SIZE="5">
      <font SIZE="2">
      <p ALIGN="left">Although GPSS Statements are restricted to a single
      line of text of up to 250 characters, PLUS Statements can span many text
      lines. PLUS PROCEDURE Statements may appear anywhere in the Model except
      in another PROCEDURE Statement. The other PLUS Statements can only appear
      inside a PLUS Procedure.</p>
      <p ALIGN="left">Only a small number of statement types are needed by
      PLUS to provide a powerful programming language. They are:</p>
      </font><font FACE="Symbol" SIZE="2">
      <p ALIGN="left">·</font><font SIZE="2">&nbsp;<b>PROCEDURE </b> - Define a PLUS
      Procedure.</p>
      </font><font FACE="Symbol" SIZE="2">
      <p ALIGN="left">·</font><font SIZE="2">&nbsp;<b>EXPERIMENT</b> - Define a
      PLUS Experiment.</p>
      </font><font FACE="Symbol" SIZE="2">
      <p ALIGN="left">·</font><font SIZE="2">&nbsp;<b>TEMPORARY</b> - Define and
      restrict the scope of a local User Variable or local Matrix.</p>
      </font><font FACE="Symbol" SIZE="2">
      <p ALIGN="left">·</font><font SIZE="2">&nbsp;<b>BEGIN / END-</b> Compound
      Statement. Create a block of PLUS Statements.</p>
      </font><font FACE="Symbol" SIZE="2">
      <p ALIGN="left">·</font><font SIZE="2">&nbsp;<b>Assignment</b> - Set the
      value of a Named Value or Matrix element.</p>
      </font><font FACE="Symbol" SIZE="2">
      <p ALIGN="left">·</font><font SIZE="2">&nbsp;<b>Procedure Call</b> - Invoke a
      Library Procedure.</p>
      </font><font FACE="Symbol" SIZE="2">
      <p ALIGN="left">·</font><font SIZE="2">&nbsp;<b>Labeled Statement</b> - The
      superclass of Statements that begin with a Label.</p>
      </font><font FACE="Symbol" SIZE="2">
      <p ALIGN="left">·</font><font SIZE="2">&nbsp;<b>IF / THEN</b> - Test an
      Expression and act on a &quot;TRUE&quot; result.</p>
      </font><font FACE="Symbol" SIZE="2">
      <p ALIGN="left">·</font><font SIZE="2">&nbsp;<b>IF / THEN / ELSE</b> - Test
      an Expression and act on the result.</p>
      </font><font FACE="Symbol" SIZE="2">
      <p ALIGN="left">·</font><font SIZE="2">&nbsp;<b>WHILE / DO</b>- Perform
      action repetitively.</p>
      </font><font FACE="Symbol" SIZE="2">
      <p ALIGN="left">·</font><font SIZE="2">&nbsp;<b>GOTO</b> - Jump to a new
      location within the Procedure.</p>
      </font><font FACE="Symbol" SIZE="2">
      <p ALIGN="left">·</font><font SIZE="2">&nbsp;<b>RETURN</b> - Finish the
      processing and, optionally, give a result to the</p>
      <p ALIGN="left">caller.</p>
      <p ALIGN="left">For full examples of GPSS World Models using PLUS
      Routines, see the PLUS PRIMER in Chapter 17 of the GPSS World Tutorial
      Manual. Here we present the PLUS Statement Types in alphabetic order.</p>
      <p ALIGN="left">&nbsp;</p>
      </font><font SIZE="4">
      <p align="left">1. Assignment Statement</p>
      </font><font SIZE="2">
    <p align="left"></font>
  </font><font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Syntax</b></font></p>
      <i>
      <p align="left"><b><font face="Arial" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Value</font></b></i> <b><font face="Arial" size="3"> = <i>Expression</i>;</font></b></p>
    <font FACE="Arial" SIZE="5">
      <blockquote>
        <blockquote>
          <i><font SIZE="2">
          <p ALIGN="left">LValue</font></i><font SIZE="2">&nbsp;-&nbsp;A
          Named Value or Matrix element.</p>
          <i>
          <p ALIGN="left">Expression</i>&nbsp;-&nbsp;A well-formed PLUS
          Expression, defined above.</p>
          <p ALIGN="left">&nbsp;</p>
          </blockquote>
        </font>
  </font>
        <p align="left"><font face="Arial" size="3"><b>Intended Use</b></font></p>
      </blockquote>
    <font FACE="Arial" SIZE="5">
      <font SIZE="2">
      <p ALIGN="left">Assignment Statements are used to set the value of
      variables. You can assign any data type to a Named Value or a Matrix
      element. These may be restricted in scope by a TEMPORARY or TEMPORARY
      MATRIX Statement in the same PLUS Procedure.</p>
      <blockquote>
      </font>
  </font>
      <p align="left"><font face="Arial" size="3"><b>Example</b></font></p>
      <blockquote>
        <font SIZE="4">
        <p align="left"></font><font face="Arial" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <b>Alert = &quot;TRUE&quot;</b></font><font FACE="Arial" SIZE="5"><b>;</b></p>
        <font SIZE="2">
        </blockquote>
      </blockquote>
      <p ALIGN="left">In this example, the Named Value, Alert, is given the
      value of the string constant &quot;TRUE&quot;.</p>
      </font>
  </font>
      <blockquote>
        <p align="left"><font face="Arial" size="3"><b>Action</b></font></p>
      </blockquote>
<font FACE="Arial" SIZE="5">
      <font SIZE="2">
      <p ALIGN="left">An Assignment Statement evaluates the Expression on the
      right side and sets the value of the Named Value or Matrix element equal
      to a copy of the result.</p>
      <p ALIGN="left">If the <i>Name</i> used for the <i>LValue</i>&nbsp; is
      declared in a Temporary Declaration in the current Procedure, the
      assignment goes to a temporary User Variable or Matrix with local scope.
      Otherwise, the <i>Name</i> is assumed to be a global reference to a
      permanent Matrix or User Variable known throughout the simulation.</p>
      <p ALIGN="left">&nbsp;</p>
      </font><font SIZE="4">
      <p align="left">2. Compound Statement</p>
      <p align="left"><b><font face="Arial" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Synta</font></b></font></font><b><font face="Arial" size="3">x</font></b><font FACE="Arial" SIZE="5">
      <i>
      <b><font face="Arial" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font></b></i> </p>
</font>
      <p align="left"><font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      BEGIN <i>StatementList</i> END;</b></font></p>
<font FACE="Arial" SIZE="5">
      <i><font SIZE="2">
      <p ALIGN="left">StatementList</font></i><font SIZE="2">&nbsp;-&nbsp;A
      list of well-formed PLUS Statements. Instantiated by a sequence, possibly
      null, of PLUS Statements. Each PLUS Statement contains an internal
      semicolon terminator. Must be <i>StatementSequence</i>.</p>
      <p ALIGN="left">&nbsp;</p>
      </font>
</font>
      <blockquote>
        <p align="left"><font face="Arial" size="3"><b>Intended Use</b></font></p>
      </blockquote>
<font FACE="Arial" SIZE="5">
      <font SIZE="2">
      <p ALIGN="left">Compound Statements are used primarily in Procedure
      definitions, and to control the flow of action within a Procedure.</p>
      <p ALIGN="left">In a Procedure definition, a PLUS Procedure Statement
      requires a single statement in order to define a Procedure. A Compound
      Statement is generally used here, so that an arbitrarily complex PLUS
      Procedure may be defined.</p>
      <p ALIGN="left">Compound Statements are also used to group several PLUS
      Statements into a single block of statements. This is useful in IF
      Statements and WHILE Statements so that only a specific group of
      statements gets performed when a certain decision is made.</p>
      <blockquote>
      </font>
      </font>
      <p align="left"><font face="Arial" size="3"><b>Example</b></font></p>
      <blockquote>
        <p align="left"><font face="Arial" size="2">PROCEDURE Decision(Indicator) BEGIN<br>
        &nbsp;&nbsp;&nbsp;</font>&nbsp;&nbsp;&nbsp;&nbsp; <font face="Arial" size="2">TEMPORARY
        Return_Value;<br>
        <br>
        &nbsp;&nbsp;&nbsp;</font>&nbsp;&nbsp;&nbsp;&nbsp; <font face="Arial" size="2">Return_Value =
        Old_Indicator;<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IF (Indicator &gt; 0) then
        BEGIN<br>
        &nbsp;&nbsp;&nbsp;</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <font face="Arial" size="2">ALERT = &quot;TRUE&quot;;<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        Old_Indicator=Indicator;<br>
        &nbsp;&nbsp;&nbsp;</font>&nbsp;&nbsp;&nbsp;&nbsp; <font face="Arial" size="2">END;<br>
        &nbsp;&nbsp;&nbsp;</font>&nbsp;&nbsp;&nbsp;&nbsp; <font face="Arial" size="2">ELSE Alert = &quot;FALSE&quot;;</font></p>
        <p align="left"><font face="Arial" size="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        RETURN Return_Value;</font></p>
        <p align="left"><font face="Arial" size="2">END;</font></p>
      </blockquote>
      </blockquote>
<font FACE="Arial" SIZE="5">
      <font SIZE="2">
      <p ALIGN="left">In this example, Compound Statements are used in both
      ways. The PROCEDURE Statement includes a Compound Statement for holding
      the body of the PLUS Procedure. Internally, the &quot;True&quot; branch of
      the IF Statement uses a Compound Statement to cause more than one
      statement to be performed when the Expression in the IF Statement tests
      TRUE.</p>
      <blockquote>
      </font>
      </font>
      <p align="left"><font face="Arial" size="3"><b>Action</b></font></p>
      </blockquote>
<font FACE="Arial" SIZE="5">
      <font SIZE="2">
      <p ALIGN="left">A Compound Statement groups other PLUS Statements so
      they can be treated as a unit. A Compound Statement can be used anywhere a
      PLUS Statement is required.</p>
      <p ALIGN="left">&nbsp;</p>
      </font><font SIZE="4">
      <p align="left">3. EXPERIMENT Statement</p>
      <font SIZE="2">
    <p align="left"></font>
    <b><font face="Arial" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    Synta</font></b></font></font><b><font face="Arial" size="3">x</font></b><font FACE="Arial" SIZE="5"><font SIZE="4">
      <i>
      <b><font face="Arial" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font></b></i> </p>
</font>
      <p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </font><font face="Arial" size="3">&nbsp; <b>EXPERIMENT <i>Name</i> ( <i>ArgumentList</i> )
</b></font> <i><b><font face="Arial" size="3">Statement</font></b></p>
<font FACE="Arial" SIZE="5">
    <blockquote>
      <blockquote>
        <font SIZE="2">
        <p ALIGN="left">Name </font></i><font SIZE="2">&nbsp;-&nbsp;A
        user-defined Procedure Name. Must be <i>Name</i>.</p>
        <i>
        <p ALIGN="left">ArgumentList </i>&nbsp;-&nbsp;A sequence of
        user-defined names, separated by commas, used a s formal argument list.
        Instantiated by a list of <i>Name</i> items, possibly null, separated by
        commas.</p>
        <p ALIGN="left"><i>Statement </i>&nbsp;-&nbsp;Procedure body. A PLUS
        statement. Must be <i>Statement</i>.</p>
        <p ALIGN="left">&nbsp;</p>
      </blockquote>
    </font>
  </font>
    <p align="left"><font face="Arial" size="3"><b>Intended Use</b></font></p>
    </blockquote>
<font FACE="Arial" SIZE="5">
    <font SIZE="2">
    <p ALIGN="left">An Experiment is a special kind of PLUS Procedure.
    EXPERIMENT Statements are used to define special User Procedures used to
    control multiple runs of a Simulation. Normally, the statement used as the
    Experiment body is a Compound Statement.</p>
    <p ALIGN="left">Experiments are generally used in connection with the
    DoCommand() library procedure, to control the Simulations, and the ANOVA
    library procedure to automatically analyze results. Normally, the Experiment
    fills a Global Matrix Entity with results and passes it to the ANOVA
    procedure. You can create screening or optimizing experiments automatically
    using GPSS World's Automatic Experiment Generators, by opening the
    appropriate dialog in the Edit Menu of the Main Window.</p>
    <p ALIGN="left">An Experiment can only be invoked by a CONDUCT Command.
    The Experiment Generators will load a Function Key with the appropriate
    CONDUCT Command, if you like.</p>
    <p ALIGN="left">Experiments, and any simple Procedure called directly or
    indirectly by an Experiment, may use the DoCommand library procedure to
    execute GPSS Statements including Commands and Block Statements.</p>
    <blockquote>
    </font>
  </font>
    <p align="left"><font face="Arial" size="3"><b>Example</b></font></p>
    </blockquote>
<p ALIGN="left"><font size="2" face="Arial">An </font><font FACE="Arial" SIZE="5"><font SIZE="2">example of an Experiment is discussed in
detail in Lesson 19 of the <i>GPSS World Tutorial Manual</i>.</p>
    </font>
  </font>
<font FACE="Arial" SIZE="5">
    <font SIZE="2">
    <blockquote>
    </font>
  </font>
    <p align="left"><font face="Arial" size="3"><b>Action</b></font></p>
    </blockquote>
<font FACE="Arial" SIZE="5">
    <font SIZE="2">
    <p ALIGN="left">An EXPERIMENT Statement creates a User Defined Procedure.
    When it is Translated, the Procedure is added to the simulation’s
    Procedure Library, and is available for invocation by a CONDUCT Command.</p>
    <p ALIGN="left">The optional Formal Argument list passed to the
    Experiment by the CONDUCT Command is used to create temporary User
    Variables, addressed by the given names. Each receives a copy of the value
    resulting from evaluating the actual argument asserted in the Experiment
    invocation. Later references to the formal argument name refer to the
    variable created in this manner. The arguments are often used to specify
    which part of a response surface is to be explored by this invocation of the
    Experiment. With proper planning, Experiments can be HALTed, Saved, and
    restarted later.</p>
    <p ALIGN="left">While running, an Experiment takes control of the
    Simulation Object. Having begun an Experiment with a CONDUCT Command, your
    ability to interact with the simulation is limited. You can always display
    the running Simulation System Clock ( View / Clock ), but generally you will
    have to abort the Experiment in order to modify the Simulation. Then, unless
    you have planned ahead, you may have to restart the Experiment from the
    beginning.</p>
    <p ALIGN="left">&nbsp;</p>
    </font><font SIZE="4">
    <p align="left">4. GOTO Statement</p>
    <font SIZE="2">
    <p align="left"></font>
    <font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Syntax</b></font></p>
      <i>
      <p align="left"><b><font face="Arial" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      </font></b></i> </font>
  </font><font face="Arial" size="3"><b>GOTO <i>Label</i> ;</b></font></p>
<font FACE="Arial" SIZE="5">
    <blockquote>
      <blockquote>
        <i><font SIZE="2">
        <p ALIGN="left">Label</font></i><font SIZE="2">&nbsp;-&nbsp;A PLUS
        Statement Label. A unique name appearing on a Labeled Statement, defined
        below.
      </font>
        </p>
        <p ALIGN="left">&nbsp;</p>
        </blockquote>
  </font>
      <p align="left"><font face="Arial" size="3"><b>Intended Use</b></font></p>
    </blockquote>
<font FACE="Arial" SIZE="5">
    <font SIZE="2">
    <p ALIGN="left">GOTO Statements are used to cause the processing sequence
    of a Procedure to jump abruptly to a specific statement, tagged with a PLUS
    Statement Label.</p>
    <blockquote>
    </font>
  </font>
    <p align="left"><b><font face="Arial" size="3">Example</font></b></p>
    <blockquote>
      <p align="left"><font face="Arial" size="3"><b>GOTO Sanctuary;</b></font></p>
      <font FACE="Arial" SIZE="5">
      <font SIZE="2">
      </blockquote>
    </blockquote>
    <p ALIGN="left">In this example, when the PLUS Procedure comes upon the
    GOTO Statement, it immediately finds the statement with the label,
    SANCTUARY, and begins there.</p>
    <p ALIGN="left">&nbsp;</p>
    <p ALIGN="left">&nbsp;</p>
    </font><font SIZE="4">
    <p align="left">5. IF Statement</p>
    <font SIZE="2">
    <p align="left"></font>
    <font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Syntax</b></font></p>
      <i>
      <p align="left"><b><font face="Arial" size="3">&nbsp;&nbsp;&nbsp;</font></b></i> </font>
  </font>
      <i>
      <b><font face="Arial" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      </font></b></i><font face="Arial" size="3"><b>IF ( <i>Expression</i> ) THEN <i>Statement</i></b></font></p>
<font FACE="Arial" SIZE="5">
    <blockquote>
      <blockquote>
        <i><font SIZE="2">
        <p ALIGN="left">Expression</font></i><font SIZE="2">&nbsp;-&nbsp;A
        well-formed PLUS Expression, defined above. Must be <i>Expression</i>.</p>
        <i>
        <p ALIGN="left">Statement</i>&nbsp;-&nbsp;Conditional statement. A
        PLUS Statement.</p>
        <p ALIGN="left">&nbsp;</p>
        </blockquote>
      </font>
  </font>
      <p align="left"><font face="Arial" size="3"><b>Intended Use</b></font></p>
    </blockquote>
<font FACE="Arial" SIZE="5">
    <font SIZE="2">
    <p ALIGN="left">IF Statements are used primarily to conditionally perform
    a block of statements</p>
    <blockquote>
    </font>
  </font>
    <p align="left"><font face="Arial" size="3"><b>Example</b></font></p>
    <blockquote>
      <p align="left"><font face="Arial" size="2">IF (Indicator &gt; 0) THEN BEGIN<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Alert = &quot;TRUE&quot;;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Old_Indicator=Indicator;<br>
      END;</font></p>
      <font SIZE="2">
      </blockquote>
    </blockquote>
    <p ALIGN="left">In this example, the Expression is evaluated numerically.
    True logical relations yield an integer 1 result. If the result of the
    evaluation is nonzero, the block of Assignment Statements is performed.</p>
    <blockquote>
    </font>
    <p align="left"><font face="Arial" size="3"><b>Action</b></font></p>
    </blockquote>
<font FACE="Arial" SIZE="5">
    <font SIZE="2">
    <p ALIGN="left">An IF Statement evaluates an Expression numerically, and
    determines of the result is nonzero. If so, the Conditional Statement, which
    may be compound, is performed.</p>
    <p ALIGN="left">&nbsp;</p>
    <p ALIGN="left">&nbsp;</p>
    </font><font SIZE="4">
    <p align="left">6. IF-ELSE Statement</p>
    <font SIZE="2">
    <p align="left"></font>
    <font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Syntax</b></font></p>
      <i>
      <p align="left"><b><font face="Arial" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font></b></i> </font>
  </font>
      <i>
      <b><font face="Arial" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      </font></b></i> <font FACE="Arial" size="3"><b>IF ( <i>Expression</i> ) THEN <i>Statement1</i> ELSE <i>Statement2</i></b>
  </font></p>
<font FACE="Arial" SIZE="5"> <i>
    <blockquote>
      <blockquote>
        <font SIZE="2">
        <p ALIGN="left">Expression</font></i><font SIZE="2">&nbsp;-&nbsp;Test
        Expression. A well-formed PLUS Expression, defined above. Must be <i>Expression</i>.</p>
        <i>
        <p ALIGN="left">Statement1</i>&nbsp;-&nbsp;True branch statement. A
        PLUS Statement. Must be <i>Statement</i>.</p>
        <i>
        <p ALIGN="left">Statement2</i>&nbsp;-&nbsp;False branch statement. A
        PLUS Statement. Must be <i>Statement</i>.</p>
        <p ALIGN="left">&nbsp;</p>
      </blockquote>
    </font>
  </font>
    <p align="left"><font face="Arial" size="3"><b>Intended Use</b></font></p>
    </blockquote>
<font FACE="Arial" SIZE="5">
    <font SIZE="2">
    <p ALIGN="left">IF-ELSE Statements are used primarily to choose between
    two statement blocks, only one of which is to be performed.</p>
    <blockquote>
    </font>
  </font>
    <p align="left"><font face="Arial" size="3"><b>Example</b></font></p>
    <blockquote>
      <font SIZE="4">
      <p align="left"></font><font face="Arial" size="2">IF (Indicator &gt; 0) THEN BEGIN<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Alert = &quot;TRUE&quot;;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Old_Indicator=Indicator;<br>
      END;<br>
      ELSE Alert = &quot;FALSE&quot;;</font></p>
      <font FACE="Arial" SIZE="5">
      <font SIZE="4">
      </blockquote>
    </blockquote>
    </font><font SIZE="2">
    <p ALIGN="left">In this example, the Expression is evaluated numerically.
    True logical relations yield an integer 1 result. If the result of the
    evaluation is nonzero, the true branch statement is performed. In this case,
    the block of Assignment Statements is performed. If the result of
    numerically evaluating the test Expression is zero, the very last Assignment
    Statement is performed, instead.</p>
    <blockquote>
    </font>
  </font>
    <p align="left"><font face="Arial" size="3"><b>Action</b></font></p>
    </blockquote>
      <font FACE="Arial" SIZE="5">
    <font SIZE="2">
    <p ALIGN="left">An IF-ELSE Statement evaluates an Expression numerically,
    and determines of the result is nonzero. If so, the true branch statement,
    which may be compound, is performed. Otherwise, the false branch statement,
    which may also be compound, is performed.</p>
    <p ALIGN="left">ELSE clauses pair with the most recent IF clause. If
    several IF Statements appear in succession just before an ELSE clause, the
    latest unpaired IF clause is paired with the ELSE clause to form an IF-ELSE
    Statement. You can avoid ambiguity by using Compound Statements within IF
    and IF-ELSE Statements.</p>
    <p ALIGN="left">&nbsp;</p>
    </font><font SIZE="4">
    <p align="left">7. Labeled Statement</p>
      </font><font SIZE="2">
    <p align="left"></font>
    <font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Syntax</b></font></p>
      <i>
      <p align="left"><b><font face="Arial" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      </font></b></i> 
  </font><b>
      <i>
      <font face="Arial" size="3">Label </font></i> <font face="Arial" size="3">:<i> Statement</i></font></b></p>
      <font FACE="Arial" SIZE="5">
    <i><font SIZE="2">
    <blockquote>
      <blockquote>
        <p ALIGN="left">Label</font></i><font SIZE="2">&nbsp;-&nbsp;A PLUS
      Statement Label. A unique user-defined name. Must be <i>Name</i>.</p>
      <i>
      <p ALIGN="left">Statement</i>&nbsp;-&nbsp;A PLUS Statement. Must be <i>Statement</i>.</p>
    </blockquote>
    </font>
  </font>
    <p align="left"><font face="Arial" size="3"><b>Intended Use</b></font></p>
    </blockquote>
      <font FACE="Arial" SIZE="5">
    <font SIZE="2">
    <p ALIGN="left">Labeled Statements are used as the targets of GOTO
    Statements.</p>
    </font>
  </font>
    <blockquote>
      <p align="left"><font face="Arial" size="3"><b>Example</b></font></p>
      <blockquote>
        <p align="left"><font face="Arial" size="2">GOTO Sanctuary;<br>
        ...<br>
        Sanctuary:</font>&nbsp;&nbsp; <font face="Arial" size="2">RETURN 100;</font></p>
        <font FACE="Arial" SIZE="5">
        <font SIZE="2">
        </blockquote>
      </blockquote>
      <p ALIGN="left">In this example, when the PLUS Procedure comes upon the
      GOTO Statement, it immediately finds the statement with the label,
      SANCTUARY, and begins there. In this case, the Procedure terminates
      returning a numerical value of 100.</p>
      <p ALIGN="left">&nbsp;</p>
    </font><font SIZE="4">
    <p align="left">8. PROCEDURE Statement</p>
    <font SIZE="2">
    <p align="left"></font>
    <font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Syntax</b></font></p>
      <i>
      <p align="left"><b><font face="Arial" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      </font></b></i> 
    </font>
  </font><b><font face="Arial" size="3">PROCEDURE <i>Name</i> ( <i>ArgumentList</i> )
      </font></b> <i><b><font face="Arial" size="3">Statement</font></b></p>
      <font FACE="Arial" SIZE="5">
    <blockquote>
      <blockquote>
        <font SIZE="2">
        <p ALIGN="left">Name </font></i><font SIZE="2">&nbsp;-&nbsp;A
        user-defined Procedure Name. Must be <i>Name</i>.</p>
        <i>
        <p ALIGN="left">ArgumentList </i>&nbsp;-&nbsp;A sequence of
        user-defined names, separated by commas, used a s formal argument list.
        Instantiated by a list of <i>Name</i> items, possibly null, separated by
        commas.</p>
        <p ALIGN="left"><i>Statement </i>&nbsp;-&nbsp;Procedure body. A PLUS
        statement. Must be <i>Statement</i>.</p>
      </blockquote>
    </font>
  </font>
    <p align="left"><font face="Arial" size="3"><b>Intended Use</b></font></p>
    </blockquote>
      <font FACE="Arial" SIZE="5">
    <font SIZE="2">
    <p ALIGN="left">PROCEDURE Statements are used to define User Procedures.
    Normally, the statement used as the Procedure body is a Compound Statement.</p>
    <blockquote>
    </font>
  </font>
    <p align="left"><font face="Arial" size="3"><b>Example</b></font></p>
    <blockquote>
      <p align="left"><font face="Arial" size="2">PROCEDURE Decision(Indicator) BEGIN<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      TEMPORARY Return_Value;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Return_Value = Old_Indicator;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      IF (Indicator &gt; 0) THEN BEGIN<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Alert = &quot;TRUE&quot;;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Old_Indicator=Indicator;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      END;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      ELSE Alert = &quot;FALSE&quot;;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      RETURN Return_Value;<br>
      END;</font></p>
      <font SIZE="2">
      </blockquote>
    </blockquote>
    <p ALIGN="left">In this example, a PROCEDURE Statement is used to define
    a User Procedure. When Translated, the Procedure is integrated into the
    Procedure Library of the simulation. Thereafter, it can be invoked by an
    appropriate Procedure Call, such as:</p>
    <blockquote>
      <blockquote>
      </font>
      <p align="left"><font face="Arial" size="3"><b>Result = Decision(200+My_Constant);</b></font></p>
      <font FACE="Arial" SIZE="5">
      <font SIZE="2">
      </blockquote>
    </font>
  </font>
    <p align="left"><font face="Arial" size="3"><b>Action</b></font></p>
    </blockquote>
      <font FACE="Arial" SIZE="5">
    <font SIZE="2">
    <p ALIGN="left">A PROCEDURE Statement creates a User Defined Procedure.
    When it is Translated, the Procedure is added to the simulation’s
    Procedure Library, and is available for invocation.</p>
    <p ALIGN="left">The Formal Argument list is used to create temporary User
    Variables, addressed by the given names. Each receives a copy of the value
    resulting from evaluating the actual argument asserted in the Procedure
    invocation. Later references to the formal argument name refer to the
    variable created in this manner.</p>
    <p ALIGN="left">Procedures have global scope. They may be invoked from
    anywhere within the simulation.</p>
    <p ALIGN="left">&nbsp;</p>
    </font><font SIZE="4">
    <p align="left">9. Procedure Call Statement</p>
      </font><font SIZE="2">
    <p align="left"></font>
    <font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Syntax</b></font></p>
    <p align="left"><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </i>
  </font><b><i><font face="Arial" size="3">&nbsp;&nbsp;&nbsp; ProcedureName </font> </i><font face="Arial" size="3">( <i>ExpressionList </i>) ;</font></b></p>
      <font FACE="Arial" SIZE="5">
    <blockquote>
      <blockquote>
        <i><font SIZE="2">
        <p ALIGN="left">ProcedureName</font></i><font SIZE="2">&nbsp;-&nbsp;An
        name used to define a Procedure in the Procedure Library. May be a Math
        Procedure, a String Procedure, a Probability Distribution, or a User
        Defined PLUS Procedure. Must be <i>Name</i>.</p>
        <i>
        <p ALIGN="left">ExpressionList</i>&nbsp;-&nbsp;The argument list of
        the Procedure One or more well-formed PLUS Expressions, separated by
        commas. Must be <i>ExpressionList</i>.</p>
        </blockquote>
      </font>
  </font>
      <p align="left"><font face="Arial" size="3"><b>Intended Use</b></font></p>
    </blockquote>
      <font FACE="Arial" SIZE="5">
    <font SIZE="2">
    <p ALIGN="left">Procedure Call Statements are used to invoke Procedures
    in the Library.</p>
    </font>
   <blockquote>
  </font><p align="left"><font face="Arial" size="3"><b>Example<br>
        </blockquote>
    <p align="left">
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    Real_Value=Beta(1,100,200,2,2);</b></font>
      <font FACE="Arial" SIZE="5">
    <font SIZE="2">
    </p>
    <p ALIGN="left">In this example, a sample is drawn from the Beta
    probability distribution. Pre defined Procedures are available for math and
    string functions, and probability distributions. They are discussed later in
    this Chapte</p>
    </font>
    </font>
          <blockquote>
    <p align="left"><font face="Arial" size="3"><b>Action</b></font></p>
          </blockquote>
      <font FACE="Arial" SIZE="5">
    <font SIZE="2">
    <p ALIGN="left">A Procedure Call Statement invokes a Procedure in the
    Library. Pre-defined and User Defined Procedures may be called.</p>
    <p ALIGN="left">Expressions may be used as arguments to Procedures. They
    are evaluated at the very beginning of the invocation. The arguments of
    built-in Procedures are coerced to a specific data type. This is discussed
    in the documentation of the specify Procedure. The arguments to User Defined
    Procedures are evaluated normally.</p>
    <p ALIGN="left">&nbsp;</p>
    </font><font SIZE="4">
    <p align="left">10. RETURN Statement</p>
    <font SIZE="2">
    <p align="left"></font>
    <font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Syntax</b></font></p>
      <i>
      <p align="left"><b><font face="Arial" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      </font></b></i> </font>
    </font><font face="Arial" size="3"><b>RETURN <i>Expression</i> ;</b></font></p>
      <font FACE="Arial" SIZE="5">
    <blockquote>
      <blockquote>
        <i><font SIZE="2">
        <p ALIGN="left">Expression</font></i><font SIZE="2">&nbsp;-&nbsp;Optional.
        A well-formed PLUS Expression. Must be <i>Expression </i>or<i> Null</i>.</p>
        </blockquote>
      </font>
    </font>
      <p align="left"><font face="Arial" size="3"><b>Intended Use</b></font></p>
    </blockquote>
      <font FACE="Arial" SIZE="5">
    <font SIZE="2">
    <p ALIGN="left">RETURN Statements are used to terminate the processing of
    a PLUS Procedure, and to establish the result value to be used as the result
    of the Procedure invocation.</p>
    <blockquote>
    </font>
    </font>
    <p align="left"><font face="Arial" size="3"><b>Example</b></font></p>
    <blockquote>
      <font SIZE="4">
      <p align="left"></font><font face="Arial" size="3"><b>RETURN &quot;Success&quot;;</b></font></p>
      <font SIZE="2">
      <p ALIGN="left">&nbsp;</p>
      </blockquote>
    </blockquote>
    <p ALIGN="left">In this example, a RETURN Statement is used to complete
    the Procedure and to establish a string constant as the result of the
    Procedure invocation.</p>
    <blockquote>
    </font>
    <p align="left"><font face="Arial" size="3"><b>Action</b></font></p>
    </blockquote>
      <font FACE="Arial" SIZE="5">
    <font SIZE="2">
    <p ALIGN="left">When a RETURN Statement is performed, the Expression in
    the RETURN Statement, if any, is evaluated normally. The Procedure is
    terminated, and all temporary Named Variables and temporary Matrices are
    deleted. If an Expression was asserted in the RETURN Statement, its result
    is used as the result of the Procedure. If there is no Expression, integer 0
    is used.</p>
    <p ALIGN="left">&nbsp;</p>
    </font><font SIZE="4">
    <p align="left">11. TEMPORARY Statement</p>
    <font SIZE="4">
    <font SIZE="2">
    <p align="left"></font>
    <b>
    <font face="Arial" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Syntax</font></b> </font>
    </font>
    </font><b><font face="Arial" size="3"> for TEMPORARY declaration</font></b></p>
      <font FACE="Arial" SIZE="5">
    <font SIZE="4">
    <font SIZE="4">
      <i>
      <p align="left"><b><font face="Arial" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      </font></b></i> </font>
    </font>
    </font><font face="Arial" size="3"><b>TEMPORARY <i>NameList</i> ;</b></font></p>
      <font FACE="Arial" SIZE="5">
    <blockquote>
      <blockquote>
        <i><font SIZE="2">
        <p ALIGN="left">NameList</font></i><font SIZE="2">&nbsp;- Name
        List.&nbsp;A list of user defined names to become local User Variables. <i>Namelist</i>
        is instantiated by a list of <i>Name</i> items separated by commas.
      </font>
        </blockquote>
        <p ALIGN="left"><font SIZE="2"><font SIZE="4"><b><font face="Arial" size="3">Syntax</font></b> </font>
        <b><font face="Arial" size="3"> for TEMPORARY MATRIX declaration</font></b></font></p>
      <font SIZE="2">
        <i>
        <p ALIGN="center">
      <font FACE="Arial" size="3">
    <b>TEMP<font FACE="Arial">ORARY MATRIX Name[ IntegerList ] ;
    </font></b></font></p>
        <p ALIGN="left">Name</i><font SIZE="2">&nbsp;-&nbsp;A user
        defined local Matrix name. Must be <i>Name</i>.</p>
        <i>
        <p ALIGN="left">IntegerList</i>&nbsp;-&nbsp;A sequence of 1 to 6
        strictly positive integers, separated by commas. The number of elements
        in each dimension of the Matrix. <i>IntegerList</i> is instantiated by a
        list of up to 6 <i>PosInteger</i> items, separated by commas.</p>
        <p ALIGN="left"></font></font>
      </font>
      <font face="Arial" size="3"><b>Intended Use</b></font></p>
        </blockquote>
    <font FACE="Arial" SIZE="5">
      <font FACE="Arial" SIZE="5">
      <font SIZE="2">
    <font SIZE="2">
    <p ALIGN="left">TEMPORARY Statements are used to create Named Values and
    Matrices that exist only during the invocation of a PLUS Procedure.</p>
    <blockquote>
    </font>
      </font>
</font>
    </font>
    <p align="left"><font face="Arial" size="3"><b>Example</b></font></p>
      <font SIZE="2">
    <blockquote>
      <p align="left"><font face="Arial"><b>TEMPORARY Return_Value,Accumulator;</b></font></p>
      <p align="left"><font face="Arial"><b>TEMPORARY MATRIX DataArray[2,3,4];</b></font></p>
    </blockquote>
    </blockquote>
    <font FACE="Arial" SIZE="5">
      <font FACE="Arial" SIZE="5">
    <font SIZE="2">
    <p ALIGN="left">In this example, two TEMPORARY Statements are used in a
    Procedure. The first creates two Named Values for use within a single
    Procedure invocation. The second creates a 3 dimensional local Matrix named
    DataArray.</p>
    <p ALIGN="left">Temporary data are not automatically initialized. You
    must assign data to temporary Named Values and Matrix Elements before you
    can refer to them in Expressions.</p>
    <blockquote>
    </font>
</font>
    </font></font>
    <p align="left"><font face="Arial" size="3"><b>Action</b></font></p>
    </blockquote>
    <font FACE="Arial" SIZE="5">
      <font FACE="Arial" SIZE="5">
      <font SIZE="2">
    <font SIZE="2">
    <p ALIGN="left">A TEMPORARY declaration creates one or more uninitialized
    Named Values for used during a single Procedure invocation.</p>
    <p ALIGN="left">A TEMPORARY MATRIX declaration creates a single
    uninitialized Matrix, of up to 6 dimensions, for use during a single
    Procedure invocation.</p>
    <p ALIGN="left">TEMPORARY Named Values and TEMPORARY MATRICIES have local
    scope. They can be accessed only within their containing Procedure, and not
    by Procedures invoked from the containing Procedure. Named Variables and
    Matrices not declared in temporary declarations have global scope, are known
    throughout the Model, and exist for the life of the simulation. A global
    matrix must be defined in a GPSS MATRIX Statement.</p>
    <p ALIGN="left">When a Procedure terminates, all of its temporary Named
    Values and temporary Matrices are freed.</p>
    <p ALIGN="left">&nbsp;</p>
    </font><font SIZE="4">
    <p align="left">12. WHILE Statement</p>
    <font SIZE="2">
    <p align="left"></font>
    <font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Syntax</b></font></p>
      <i>
      <p align="left"><font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      </b></font></i></font></font>
</font>
    </font><b><font size="3">W<font FACE="Arial">HILE ( <i>Expression</i> ) DO
</font>
    </font></b> <i><b><font size="3" FACE="Arial">Statement</font></b></p>
    <font FACE="Arial" SIZE="5"><font SIZE="2">
    <blockquote>
      <blockquote>
        <font SIZE="2">
        <p ALIGN="left">Expression</font></i><font SIZE="2">&nbsp;-&nbsp;Test
        Expression. Required. A well-formed PLUS Expression, defined above. Must
        be <i>Expression</i>.</p>
        <i>
        <p ALIGN="left">Statement</i>&nbsp;-&nbsp;Target statement. Required.
        A PLUS Statement.</p>
        <p ALIGN="left">&nbsp;</p>
      </blockquote>
    </font>
    </font>
</font>
    <p align="left"><font face="Arial" size="3"><b>Intended Use</b></font></p>
    </blockquote>
    <font FACE="Arial" SIZE="5"><font SIZE="2">
    <font SIZE="2">
    <p ALIGN="left">WHILE Statements are used primarily to perform repetitive
    actions.</p>
    <blockquote>
    </font>
    </font>
</font>
    <p align="left"><font face="Arial" size="3"><b>Example</b></font></p>
   </blockquote>
    <font SIZE="2">
  <font SIZE="4">
  <p align="left"></font><font face="Arial"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b>
  Accumulator=1;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Counter=1;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  WHILE (Counter&lt;=X_Integer) DO BEGIN<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Accumulator=Accumulator#Counter;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Counter=Counter+1;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  END;</font></p>
    <font FACE="Arial" SIZE="5">
  <font SIZE="2">
      <p ALIGN="left">In this example, a Compound Statement is performed
      repetitively in a while loop. If X_Integer is a positive integer, the
      while loop will continue to accumulate the factorial of X_Integer in the
      Named Value, Accumulator.</p>
      <p ALIGN="left">Each time the target statement is performed, the Named
      Value Counter is incremented. When Counter becomes larger than X_Integer,
      the target statement is not performed, and processing continues with the
      statement after the WHILE Statement.</p>
      <blockquote>
      </font>
</font>
  </font>
      <p align="left"><font face="Arial" size="3"><b>Action</b></font></p>
    </blockquote>
    <font SIZE="2">
    <font FACE="Arial" SIZE="5">
    <font SIZE="2">
    <p ALIGN="left">When a WHILE Statement is encountered, the test
    Expression is evaluated numerically. If the result is nonzero, the target
    statement is performed, and the &quot;Test-Perform&quot; process is
    repeated. If the test Expression is zero, the target statement is not
    performed, and instead, processing continues with the statement following
    the While Statement.</p>
    <p ALIGN="left">To avoid a nonterminating loop, you must ensure that the
    evaluation of the test Expression becomes zero, at some time. Normally, this
    is done somewhere in the target statement by an Assignment Statement or
    Procedure call.</p>
    <p ALIGN="left">&nbsp;</p>
    <p ALIGN="left">&nbsp;</p>
    </font></font></font>
    <h2 ALIGN="left"><font face="Arial" size="5">&nbsp;&nbsp;&nbsp; <a name="8.3"></a>8.3.
    The Procedure Library</font></h2>
    <font SIZE="2">
    <font FACE="Arial" SIZE="5">
    <font SIZE="2">
   <p ALIGN="left">A Procedure must be in a Procedure Library for you to
  invoke it during a simulation. There are two kinds of libraries. The User
  Library and the GPSS World Library. The User Library is the collection of PLUS
  Procedures you have included in the Model. The GPSS World Library contains a
  set of ready made mathematical and string Procedures that you can invoke in
  any PLUS Expression.</p>
  <p ALIGN="left">The Procedure library is a set of PLUS Procedures that you
  can call in Expressions. Some Procedures are supplied for you, but you can
  define and add your own Procedures as well.</p>
  <p ALIGN="left">The built-in part of the Procedure Library includes Utility
  Procedures, File Procedures, Dynamic Call Procedures, Math Procedures,
  Probability Distributions, String Procedures, and Query Procedures</p>
  <p ALIGN="left">&nbsp;</p>
    </font></font></font>
  <h3 ALIGN="left"><!--mstheme--><font color="#336666"><font face="Arial" size="4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  <a name="8.3.1"></a>8.3.1. Utility Procedures</font><!--mstheme--></font></h3>
    <font SIZE="2">
    <font FACE="Arial" SIZE="5">
    <font SIZE="2">
  <p ALIGN="left">The GPSS World Procedure Library includes important Utility
  Procedures needed for the control of simulation runs and analysis of
  Experiments.</p>
  </font><font SIZE="4">
  <p align="left">1. DoCommand - Translate and Execute a GPSS Statement</p>
    <blockquote>
    <p align="left">
    <font face="Arial" size="3"><b>Syntax</b></font></p>
    </blockquote>
  </font></font>
      </font>
      <i>
       <p ALIGN="left"><b><font face="Arial" size="3">DoCommand( CommandString</font></b></i></p>
    <blockquote>
        <p align="left"><font face="Arial" size="3"><b>Arguments</b></font></p>
      </blockquote>
  <font SIZE="4">
    <font SIZE="2">
    <font FACE="Arial" SIZE="5">
       <font SIZE="4">
      <i><font SIZE="2">
      <p ALIGN="left">CommandString</font></i><font SIZE="2">&nbsp;-&nbsp;A
      string representation of the GPSS Statement to be executed. Required.
      Coerced to string. The argument must be <i>Expression</i>.</p>
      <p ALIGN="left">&nbsp;</p>
      </font>
  </font>
    </font></font>
</font>
      <blockquote>
        <p align="left"><font face="Arial" size="3"><b>Return Value</b></font></p>
      </blockquote>
    <font FACE="Arial" SIZE="5">
    <font SIZE="2">
  <font SIZE="4">
       <font SIZE="4">
      <font SIZE="2">
      <p ALIGN="left">None.</p>
      <blockquote>
      </font>
  </font>
</font>
    </font>
    </font>
      <p align="left"><font face="Arial" size="3"><b>Example</b></font></p>
      </blockquote>
       <font SIZE="4">
    <font FACE="Arial" SIZE="5">
    <font SIZE="2">
  <font SIZE="4">
      <font SIZE="2">
      <p ALIGN="left"><b>DoCommand(&quot;SHOW &quot;&quot;This is my
      string&quot;&quot; &quot; );</b></p>
      <blockquote>
      </font>
      <p align="left">Action</p>
      </blockquote>
      <font SIZE="2">
      <p ALIGN="left">DoCommand translates its argument string in global
      scope and then sends the result to the simulation for execution. Only
      Experiments or Procedures invoked during an Experiment can invoke the
      DoCommand library procedure. It is this powerful procedure which allows
      the Experiment to control the simulation environment.</p>
      <p ALIGN="left">Since the string is Translated in global scope,
      Temporary Variables and Arguments are not accessible and should not be
      represented in the command string.</p>
      <p ALIGN="left">In its invocations, a string containing a Command or
      Statement is Translated in the global context and then executed by the
      Simulation Object.</p>
      <p ALIGN="left">Here are some tips for using the DoCommand library
      procedure.</p>
      <p ALIGN="left">1. The PolyCatenate String Procedure can combine any
      number of strings.</p>
      <p ALIGN="left">2. Use 4 double quotes around strings within strings.
      Each inner string should be sandwiched by pairs of double quotes, which
      get reduced to single quotes when translated.</p>
      <p ALIGN="left">3. Do not pass a string to DoCommand that contains the
      name of a TEMPORARY variable or argument because these variables are not
      accessible in global context. You can always use them in a string created
      before the call to DoCommand.</p>
      <p ALIGN="left">Normally, GPSS World simulations enqueue all commands
      (except HALT and SHOW) on a low priority Command Queue and work on them
      one at a time until the queue is empty. However, DoCommand behaves a
      little differently. It does not return to the calling procedure until the
      low priority Command Queue is empty. This means that after a START Command
      issued through the DoCommand library procedure returns to the calling
      Procedure, the simulation has completed and is ready for the results to be
      extracted.</p>
      <p ALIGN="left">&nbsp;</p>
      <p ALIGN="left">&nbsp;</p>
      </font><font SIZE="4">
      <p align="left">2. ANOVA - Perform Multiway Analysis of Variance.</p>
      <font SIZE="4">
    <font SIZE="2">
    <p align="left"></font>
    <font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Syntax<br>
    </b></font></p>
      </font>
      </font>
</font>
    </font>
  </font>
      <blockquote>
        <blockquote>
          <i>
          <p ALIGN="left"><font face="Arial">S</font><font FACE="Arial" SIZE="5"><font SIZE="4">tandardError
</font>
          </font></i> <font FACE="Arial" SIZE="5"> <font SIZE="4"> = ANOVA<font SIZE="4">( </font><i><font SIZE="2">ResultMatrixName,
          ReplicateDimension, InteractionLimit </font></i><font SIZE="4">)</p>
          </blockquote>
        </font>
        <p align="left">Arguments</p>
      </blockquote>
      <i><font SIZE="2">
      <p ALIGN="left">ResultMatrixName </font></i><font SIZE="2">&nbsp;-&nbsp;The
      GPSS Matrix containing the results to be analyzed. Required. May be a GPSS
      Matrix of up to 6 dimensions of any shape. The argument must be <i>Name</i>.</p>
      <i>
      <p ALIGN="left">ReplicateDimension</i>&nbsp;-&nbsp;The dimension of the
      Result Matrix used for replicates. Use 0 if there are no replicates.
      Required. Coerced to integer. The argument must be <i>Expression</i>.</p>
      <i>
      <p ALIGN="left">InteractionLimit </i>&nbsp;-&nbsp;The Limit of Factor
      Interactions to be analyzed. This value can be 1, 2, or 3. It is normally
      used to preserve Degrees of Freedom for the estimate of the Standard Error
      instead of using them on an interaction presumed to be unimportant.
      Required. Coerced to integer. The argument must be <i>Expression</i>.</p>
      </font>
      <blockquote>
        <p align="left">Return Value</p>
      </blockquote>
      <i><font SIZE="2">
      <p ALIGN="left">StandardError</font></i><font SIZE="2">&nbsp;-&nbsp;The
      Standard Error of the Analysis of Variance is returned. If an error
      occurs, the value 0 is returned. Real.
      </font>
          </p>
      <blockquote>
        <p align="left">Example</p>
      </blockquote>
      <font SIZE="2">
      <p ALIGN="left"><b>SHOW ANOVA(ABC,1,1)</b></p>
      <p ALIGN="left"><b>3.8756</b></p>
      <p ALIGN="left">This example uses a SHOW Command to demonstrate how the
      ANOVA Procedure can be invoked, returning the Standard Error of the
      Analysis of Variance. The ANOVA Procedure also produces an ANOVA Table and
      a table of descriptive statistics and writes them to the Journal Window.</p>
      <blockquote>
      </font>
      <p align="left">Action</p>
      </blockquote>
      <font SIZE="2">
      <p ALIGN="left">The ANOVA Procedure analyzes the data in the Result
      Matrix, excluding any element with the UNSPECIFIED Data Type. If a
      Replicate Dimension is specified in the ANOVA invocation, that dimension
      of the matrix is presumed to contain the results of replicate runs and is
      used exclusively to estimate the Standard Error. Two and Three level
      interactions between factors are normally included in the analysis, unless
      they are restricted by the third argument. If the third argument is 2,
      only 2-way interactions are estimated, if 1, no interactions are
      estimated. Restricting interactions presumed to be 0 has the benefit of
      providing a better estimate of the Standard Error.</p>
      <p ALIGN="left">If possible, the ANOVA Procedure writes an ANOVA Table
      and a table of descriptive statistics to the Journal Window. The resulting
      Standard Error is returned by the procedure.</p>
      <p ALIGN="left">If a GPSS Table Entity exists with the name <i>ResultMatrixName</i>_Residuals,
      where <i>ResultMatrixName </i>is the name used for the first argument of
      the ANOVA invocation, a table of residuals will be created in it based on
      the Analysis of Variance.</p>
      <p ALIGN="left">A full discussion of the ANOVA Procedure and its output
      is contained in Chapter 12. Also, Lesson 19 of <i>The GPSS World Tutorial
      Manual</i> treats the use of the ANOVA Procedure with User Experiments.</p>
      <p align="left">&nbsp;</p>
      <p ALIGN="left">&nbsp;</p>
      </font><font SIZE="4">
      <p align="left">3. Exit - Conclude the GPSS World Session.</p>
    <font SIZE="2">
    <p align="left"></font>
    <font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Syntax</b></font></p>
      </font>
</font>
  </font>
  </font>
      <blockquote>
        <blockquote>
          <p ALIGN="left"><font face="Arial" size="3"><b>Exit( <i>ExitCode </i>)</b></font></p>
        </blockquote>
        <p align="left"><font face="Arial" size="3"><b>Arguments</b></font></p>
      </blockquote>
       <font SIZE="4">
 <font FACE="Arial" SIZE="5"> <font SIZE="4"> 
      <i><font SIZE="2">
      <p ALIGN="left">ExitCode</font></i><font SIZE="2">&nbsp;-&nbsp;-1, 0, 1
      to specify &quot;Save None&quot;, &quot;Query Modified&quot;, or
      &quot;Save All&quot; open Model and Simulation Objects.
      </font>
      </p>
</font>
  </font>
  </font>
      <blockquote>
        <p align="left"><font face="Arial" size="3"><b>Return Value</b></font></p>
      </blockquote>
 <font SIZE="4"> <font FACE="Arial" SIZE="5"> 
       <font SIZE="4">
      <i><font SIZE="2">
      <p ALIGN="left">None</p>
      </font></i><font SIZE="2">
      </font>
  </font>
  </font>
</font>
      <blockquote>
        <p align="left"><font face="Arial" size="3"><b>\Example</b></font></p>
      </blockquote>
       <font SIZE="4">
 <font FACE="Arial" SIZE="5"> <font SIZE="4"> 
      <font SIZE="2">
      <p ALIGN="left"><b>Exit( 0)</b></p>
      <p ALIGN="left">This example uses the Exit library procedure to
      conclude the GPSS World Session. If any Model or Simulation Objects have
      been modified, a dialog box will appear for each asking if the object
      should be saved to file or not.</p>
      <blockquote>
      </font>
</font>
  </font>
  </font>
      <p align="left"><font face="Arial" size="3"><b>Action</b></font></p>
      </blockquote>
       <font SIZE="4">
 <font FACE="Arial" SIZE="5"> <font SIZE="4"> 
      <font SIZE="2">
      <p ALIGN="left">The Exit procedure HALTs all simulations, then closes
      all objects one at a time.</p>
      <p ALIGN="left">The Exit Code can be used to control the writing of
      Model Objects and Simulation Objects to files. If Operand a is 0, all
      modified files bring up a message box inquiring as to whether or not each
      object should be saved. If Operand A is 1, all Objects are saved. If
      Operand A is -1, no Objects are saved.</p>
      <p ALIGN="left">The Exit() Procedure is useful when sessions are run in
      Batch Mode which is discussed in Section 2.3.2.</p>
      <p ALIGN="left">&nbsp;</p>
      <p ALIGN="left">&nbsp;</p>
      </font>
</font>
  </font>
  </font>
      <h3 ALIGN="left"><!--mstheme--><font color="#336666"><font face="Arial" size="4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      <a name="8.3.2"></a>8.3.2 Math Procedures</font><!--mstheme--></font></h3>
      <p ALIGN="left"><font SIZE="4"><font SIZE="2">The World Procedure Library includes several
      Mathematical Procedures. In all cases, the argument is coerced to a
      numeric value before the Procedure performs its operation. Angular data
      are in radians. Numeric values are returned as real numbers.</p>
      <p ALIGN="left">The Math Procedures are</p>
      <blockquote>
        <blockquote>
          <p align="left"><b>ABS( <i>Expression </i>)</b> - Absolute value.</p>
          <p align="left"><b>ATN( <i>Expression </i>)</b> - Arctangent in radians.</p>
          <p align="left"><b>COS( <i>Expression </i>)</b> - Cosine. <i>Expression</i> must be in
          radians.</p>
          <p align="left"><b>EXP( <i>Expression </i>)</b> - e raised to the power given by <i>Expression</i>.</p>
          <p align="left"><b>INT( <i>Expression </i>)</b> - Truncation toward zero.</p>
          <p align="left"><b>LOG( <i>Expression </i>)</b> - Natural logarithm.</p>
          <p align="left"><b>SIN( <i>Expression </i>)</b> - Sine. <i>Expression</i> must be in
          radians.</p>
          <p align="left"><b>SQR( <i>Expression </i>)</b> - Square Root.</p>
          <p align="left"><b>TAN( <i>Expression </i>)</b> - Tangent. <i>Expression</i> must be in
          radians.</p>
          <p align="left">&nbsp;</p>
        </blockquote>
      </blockquote>
      </font>
  </font>
      <h3 ALIGN="left"><!--mstheme--><font color="#336666"><font face="Arial" size="4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      <a name="8.3.3"></a>8.3.3 Query Procedures</font><!--mstheme--></font></h3>
      <p ALIGN="left"><font SIZE="4"><font SIZE="2">Transaction Query Procedures are available which return
      information based on any Transaction in the simulation. Except for
      QueryXNExist(), if you attempt to query a nonexistent Transaction, an
      Error Stop will occur. If there is any question, you should test for
      existence first.</p>
      <p ALIGN="left">All arguments are coerced to integers in order to look
      up either a Transaction or one of its parameters. The Transaction state
      query Procedures now include:</p>
      <blockquote>
        <blockquote>
          <p align="left"><b>QueryXNExist( <i>TransactionNumber </i>)</b> - Return integer 1 if the
          Transaction exists in the simulation, integer 0 , if not.</p>
          <p align="left"><b>QueryXNParameter( <i>TransactionNumber</i>, <i>Parameter </i>)</b> -
          Return the value of a Transaction Parameter. Error Stop occurs if the
          Parameter does not exist.</p>
          <p align="left"><b>QueryXNAssemblySet( <i>TransactionNumber </i>)</b> - Return the integer
          Assembly Set of a Transaction.</p>
          <p align="left"><b>QueryXNPriority( <i>TransactionNumber </i>)</b> - Return the integer
          Transaction Priority of a Transaction.</p>
          <p align="left"><b>QueryXNM1( <i>TransactionNumber </i>) </b> - Return the numeric Mark
          Time of a Transaction.</p>
        </blockquote>
      </blockquote>
      </font>
      <p align="left">&nbsp;</p>
  </font>
      <h3 ALIGN="left"><!--mstheme--><font color="#336666"><font face="Arial" size="4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      <a name="8.3.4"></a>8.3.4 String Procedures</font><!--mstheme--></font></h3>
      <p ALIGN="left"><font SIZE="4"><font SIZE="2">The GPSS World Procedure Library contains a number of
      String Procedures that make it easy to manipulate string data types. As
      with all built-in Procedures, the String Procedures coerce arguments into
      proper form before processing them.</p>
      <p ALIGN="left">Strings are sequences of ASCII characters. The
      individual characters can be addressed by an index called an
      &quot;Offset&quot;. String Procedures that must find a specific character
      use the Offset as a 1-relative index into an array of characters. The
      first character in the string is associated with an index of 1, the second
      with 2, and so on.</p>
      <p ALIGN="left">A null string is a string of length 0. It contains no
      characters, and is denoted &quot;&nbsp;&quot;. Null strings are still
      considered to be valid strings.</p>
      <p ALIGN="left">A word is a consecutive sequence of printable
      characters, not including blanks or tabs. Words may be separated by one or
      more blank and/or tab characters.</p>
      <p ALIGN="left">The remainder of this section describes the String
      Procedure Library. For each Procedure, the syntax of Procedure invocation
      is given in a syntax line. Any Procedure may be invoked in an Expression,
      without the assignment of the result, as well as in a PLUS Assignment
      Statement.</p>
      <blockquote>
        <blockquote>
          <p align="left"><b>Align( <i>InsertString</i>, <i>SourceString</i>, <i>Offset </i>)
          </b> -
          Return a copy of one string placed in another, right justified.</p>
          <p align="left"><b>Catenate( <i>String1</i>, <i>String2 </i>)</b> - Return a copy of two
          strings combined into one.</p>
          <p align="left"><b>Copies( <i>SourceString</i>, <i>Count </i>)</b> - Create a string from
          many copies of a string.</p>
          <p align="left"><b>Datatype( <i>Datum </i>)</b> - Return a string denoting the data type
          of the argument.</p>
          <p align="left"><b>Find( <i>TestString</i>, <i>SourceString </i>) </b> - Return the Offset
          of one string in another.</p>
          <p align="left"><b>Left( <i>SourceString</i>, <i>MaxCount </i>) </b> - Return a copy of a
          substring starting on the left.</p>
          <p align="left"><b>Length( <i>SourceString </i>)</b> - Return the count of characters in a
          string.</p>
          <p align="left"><b>Lowercase( <i>SourceString </i>)</b> - Return the lowercase
          representation of a string.</p>
          <p align="left"><b>Place( <i>InsertString</i>, <i>SourceString</i>, <i>Offset</i> )</b> -
          Place one string in another. Left justify.</p>
          <p align="left"><b>PolyCatenate( <i>String1</i>, <i>String2</i>, <i>... </i>) </b> - Return
          a copy of two or more strings combined into one.</p>
          <p align="left"><b>Right( <i>SourceString</i>, <i>MaxCount </i>) </b> - Return a copy of a
          substring starting on the right.</p>
          <p align="left"><b>String( <i>Datum </i>) </b> - Convert a data item to its string
          equivalent.</p>
          <p align="left"><b>StringCompare( <i>String1</i>, <i>String2 </i>)</b> - Return an integer
          result if string comparison.</p>
          <p align="left"><b>Substring( <i>SourceString</i>, <i>Offset</i>, <i>MaxCount </i>)</b> -
          Return a copy of a substring of the string argument.</p>
          <p align="left"><b>Trim( <i>SourceString</i> ) </b> - Remove leading and trailing white
          space.</p>
          <p align="left"><b>Uppercase( <i>SourceString </i></b>) - Return the uppercase equivalent
          of a string.</p>
          <p align="left"><b>Value( <i>Datum </i>)</b> - Return the numeric equivalent of a string.</p>
          <p align="left"><b>Word( <i>SourceString</i>, <i>WordNumber </i>) </b> - Return a copy of
          one of the words in a string.</p>
          <p align="left">&nbsp;</p>
        </blockquote>
      </blockquote>
      </font><font SIZE="4">
      <p align="left">1. Align - Right justify a string.</p>
      <p align="left"><font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Syntax</b></font></p>
      <p align="left">&nbsp;&nbsp;&nbsp;</font> </font><i><font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      </b></font></i><font SIZE="4"><i>ReturnString</i>=Align(<i>InsertString</i>,<i>SourceString</i>,<i>Offset </i>)</p>
      </font>
    <blockquote>
      <p align="left"><font size="3"><b>Arguments</b></font></p>
    </blockquote>
      <font SIZE="4">
    <i><font SIZE="2">
    <p ALIGN="left">InsertString</font></i><font SIZE="2">&nbsp;-&nbsp;The
    string to be copied. Required. Coerced to string. The argument must be <i>Expression</i>.</p>
    <i>
    <p ALIGN="left">SourceString</i>&nbsp;-&nbsp;The string to be
    overwritten. Required. Coerced to string. The argument must be <i>Expression</i>.</p>
    <i>
    <p ALIGN="left">Offset</i>&nbsp;-&nbsp;The 1-relative offset in <i>SourceString</i>
    to receive the rightmost character of <i>InsertString</i>. Required. Coerced
    to integer. The argument must be <i>Expression</i>.</p>
    </font>
      </font>
    <blockquote>
      <p align="left"><font size="3"><b>Return Value</b></font></p>
    </blockquote>
      <font SIZE="4">
    <i><font SIZE="2">
    <p ALIGN="left">ReturnString</font></i><font SIZE="2">&nbsp;-&nbsp;The
    string created as a result of inserting <i>InsertString</i> into <i>SourceString</i>
    at offset <i>Offset</i>.</p>
    </font>
      </font>
    <blockquote>
      <p align="left"><font size="3"><b>Example</b></font></p>
    </blockquote>
      <font SIZE="4">
    <font SIZE="2">
    <p ALIGN="left"><b>SHOW Align(&quot;ABC&quot;,&quot;123456789&quot;,6)</b></p>
    <p ALIGN="left"><b>&quot;123ABC789&quot;</b></p>
    <p ALIGN="left">This example uses a SHOW Command to demonstrate how the
    align() string Procedure right justifies the insert string at position 6 of
    the target string, and displays the result.</p>
    <blockquote>
    </font>
      </font>
    <p align="left"><font size="3"><b>Action</b></font></p>
    </blockquote>
      <font SIZE="4">
    <font SIZE="2">
    <p ALIGN="left">Align( ) coerces the first and second arguments to
    strings, and the third to an integer. It then creates a string of blanks
    large enough to contain the result, and copies the target string into the
    result string. Finally, it copies the insert string, or the part of it that
    fits, into the result string.</p>
    <p ALIGN="left">If the Offset is larger than the target string, the
    resulting string will be larger, as well. Any characters not specified by
    the argument strings will be blanks.</p>
    <p ALIGN="left">If the Offset is less than the length of the insert
    string, only the characters that fit will be inserted, starting from the
    rightmost character of the insert string.</p>
    <p ALIGN="left">If the Offset is not strictly positive, no characters
    will be inserted.</p>
    <p ALIGN="left">&nbsp;</p>
    <p ALIGN="left">&nbsp;</p>
    </font>
    <p align="left">2. Catenate - Combine two strings.</p>
    <font SIZE="2">
    <p align="left"></font>
    <font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Syntax</b></font></p>
      </font>
      <blockquote>
        <blockquote>
          <i>
          <p ALIGN="left"><b><font size="3">ReturnString</font></b></i> <b><font size="3"> = Catenate( <i>String1</i>, <i>String2
          </i>)</font></b></p>
        </blockquote>
        <p align="left"><font size="3"><b>Arguments</b></font></p>
      </blockquote>
      <font SIZE="4">
      <i><font SIZE="2">
      <p ALIGN="left">String1</font></i><font SIZE="2">&nbsp;-&nbsp;The
      string to be first in the concatenated result string. Required. Coerced to
      string. The argument must be <i>Expression</i>.</p>
      <i>
      <p ALIGN="left">String2</i>&nbsp;-&nbsp;The string to be second in the
      concatenated result string. Required. Coerced to string. The argument must
      be <i>Expression</i>.</p>
      </font>
      </font>
      <blockquote>
        <p align="left"><font size="3"><b>Return Value</b></font></p>
      </blockquote>
      <font SIZE="4">
      <i><font SIZE="2">
      <p ALIGN="left">ReturnString</font></i><font SIZE="2">&nbsp;-&nbsp;The
      string created as a result of placing <i>String2</i> immediately after <i>String1</i>.</p>
      </font>
      </font>
      <blockquote>
        <p align="left"><font size="3"><b>Example</b></font></p>
      </blockquote>
      <font SIZE="4">
      <font SIZE="2">
      <p ALIGN="left"><b>SHOW Catenate(&quot;ABC&quot;,&quot;123&quot;)</b></p>
      <p ALIGN="left"><b>&quot;ABC123&quot;</b></p>
      <p ALIGN="left">This example uses a SHOW Command to demonstrate how the
      Catenate() string Procedure combines two strings.</p>
      </font>
      </font>
      <blockquote>
      <p align="left"><font size="3"><b>Action</b></font></p>
      </blockquote>
      <font SIZE="4">
      <font SIZE="2">
      <p ALIGN="left">Catenate( ) first coerces both arguments to strings. It
      then creates a string large enough to contain the result, and copies the
      first string and the second string into the result string.</p>
      <p ALIGN="left">&nbsp;</p>
      <p ALIGN="left">&nbsp;</p>
      </font>
      <p align="left">3. Copies - Build a string from multiple copies.</p>
    <font SIZE="2">
    <p align="left"></font>
    <font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Syntax</b></font></p>
      </font>
      <blockquote>
        <blockquote>
        <i>
        <p ALIGN="left"><b><font size="3">ReturnString</font></b></i> <b><font size="3"> = Copies( <i>SourceString, Count </i>)</font></b></p>
      </blockquote>
      <p align="left"><font size="3"><b>Arguments</b></font></p>
        <font SIZE="4">
      <blockquote>
        <i><font SIZE="2">
        <p ALIGN="left">SourceString</font></i><font SIZE="2">&nbsp;-&nbsp;The
        string to be duplicated. Required. Coerced to string. The argument must
        be <i>Expression</i>.</p>
        <i>
        <p ALIGN="left">Count</i>&nbsp;-&nbsp;The number of copies to make.
        Required. Coerced to integer. The argument must be <i>Expression</i>.</p>
      </font>
        </blockquote>
      </font>
      <p align="left"><font size="3"><b>Return Value</b></font></p>
        <font SIZE="4">
      <blockquote>
        <i><font SIZE="2">
        <p ALIGN="left">ReturnString</font></i><font SIZE="2">&nbsp;-&nbsp;The
        string created as a result of concatenating <i>Count</i> copies of <i>SourceString</i>.</p>
        </blockquote>
      </font>
      </font>
      <p align="left"><font size="3"><b>Example</b></font></p>
    </blockquote>
      <font SIZE="4">
    <font SIZE="2">
    <p ALIGN="left">SHOW Copies(&quot;ABC &quot;,3)</p>
    <p ALIGN="left">&quot;ABC ABC ABC &quot;</p>
    <p ALIGN="left">This example uses a SHOW Command to demonstrate how the
    copies( ) string Procedure creates a string out of 3 copies of an existing
    string.</p>
    </font>
      </font>
    <blockquote>
    <p align="left"><font size="3"><b>Action</b></font></p>
    </blockquote>
      <font SIZE="4">
    <font SIZE="2">
    <p ALIGN="left">Copies( ) coerces the first argument to a string and the
    second to an integer. It then creates a string large enough to contain the
    result, and copies the source string to the result string once for each
    count in the second argument.</p>
    <p ALIGN="left">If the count is not strictly positive, a null string
    results.</p>
    <p ALIGN="left">&nbsp;</p>
    <p ALIGN="left">&nbsp;</p>
    </font>
    <p align="left">4. DataType - Determine the type of a data item.</p>
    <font SIZE="2">
    <p align="left"></font>
    <font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Syntax</b></font></p>
      </font>
      <blockquote>
        <blockquote>
          <i>
          <p ALIGN="left"><b><font size="3">ReturnString</font></b></i> <b><font size="3"> = DataType( <i>Datum </i>)</font></b></p>
        </blockquote>
        <p align="left"><font size="3"><b>Arguments</b></font></p>
      </blockquote>
      <font SIZE="4">
      <i><font SIZE="2">
      <p ALIGN="left">Datum</font></i><font SIZE="2">&nbsp;-&nbsp;The data
      item to be examined. Required. The argument must be <i>Expression</i>.</p>
      </font>
      </font>
      <blockquote>
        <p align="left"><font size="3"><b>Return Value</b></font></p>
      </blockquote>
      <font SIZE="4">
      <i><font SIZE="2">
      <p ALIGN="left">ReturnString</font></i><font SIZE="2">&nbsp;-&nbsp;The
      string identifying the data type. One of:</p>
      <p ALIGN="left">&quot;INTEGER&quot; - <i>Datum</i> is a 32 bit integer,</p>
      <p ALIGN="left">&quot;REAL&quot; - <i>Datum</i> is a double precision
      floating point number,</p>
      <p ALIGN="left">&quot;STRING&quot; - <i>Datum</i> is a character
      string, or</p>
      <p ALIGN="left">&quot;UNSPECIFIED&quot; - <i>Datum</i> has not been
      given a value.</p>
      </font>
      </font>
      <blockquote>
        <p align="left"><font size="3"><b>Example</b></font></p>
      </blockquote>
      <font SIZE="4">
      <font SIZE="2">
      <p ALIGN="left"><b>SHOW DataType(&quot;ABC&quot;)</b></p>
      <p ALIGN="left"><b>&quot;STRING&quot;</b></p>
      <p ALIGN="left">This example uses a SHOW Command to demonstrate how the
      DataType() string Procedure identifies the data type of a string constant.</p>
      <blockquote>
      </font>
      </font>
      <p align="left"><font size="3"><b>Action</b></font></p>
      </blockquote>
      <font SIZE="4">
      <font SIZE="2">
      <p ALIGN="left">DataType( ) does not coerce its argument. It determines
      the data type of the argument and returns the string constant associated
      with that type.</p>
      <p ALIGN="left">&nbsp;</p>
      <p ALIGN="left">&nbsp;</p>
      </font>
      <p align="left">5. Find - Find one string in another.</p>
    <font SIZE="2">
    <p align="left"></font>
    <font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Syntax</b></font></p>
      <p align="left"><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </i>
      </font>
      <b><i><font size="3">ReturnInteger </font> </i><font size="3">= Find</font></b><i><b><font size="3">( TestString, SourceString )</font></b></p>
      <blockquote>
      </i>
      <p align="left"><font size="3"><b>Arguments</b></font></p>
      </blockquote>
      <font SIZE="4">
      <i><font SIZE="2">
      <p ALIGN="left">TestString</font></i><font SIZE="2">&nbsp;-&nbsp;The
      string to be found. Required. Coerced to string. The argument must be <i>Expression</i>.</p>
      <i>
      <p ALIGN="left">SourceString</i>&nbsp;-&nbsp;The string to be tested
      for occurrence of <i>TestString</i>. The argument must be <i>Expression</i>.</p>
      </font>
      </font>
      <blockquote>
        <p align="left"><font size="3"><b>Return Value</b></font></p>
      </blockquote>
      <font SIZE="4">
      <i><font SIZE="2">
      <p ALIGN="left">ReturnInteger</font></i><font SIZE="2">&nbsp;-&nbsp;The
      1-relative offset of the first occurrence of <i>TestString</i> in <i>SourceString.</i>
      A real value. Zero if not found.</p>
      </font>
      </font>
      <blockquote>
        <p align="left"><font size="3"><b>Example</b></font></p>
      </blockquote>
      <font SIZE="4">
      <font SIZE="2">
      <p ALIGN="left"><b>SHOW Find(&quot;ABC&quot;,&quot;123ABC789&quot;)</b></p>
      <p ALIGN="left"><b>4</b></p>
      <p ALIGN="left">This example uses a SHOW Command to demonstrate how the
      find() string Procedure finds the occurrence of &quot;ABC&quot; starting
      at position 4 of string &quot;123ABC789&quot;.</p>
      </font>
      </font>
      <blockquote>
      <p align="left"><font size="3"><b>Action</b></font></p>
      </blockquote>
      <font SIZE="4">
      <font SIZE="2">
      <p ALIGN="left">Find( ) coerces the first and second arguments to
      strings, and tests the second argument for the existing of a substring
      equal to the first argument. If it cannot be found, find( ) returns 0.
      Otherwise, find( ) returns the 1-relative offset in the second string of
      the first occurrence of the first string.</p>
      <p ALIGN="left">&nbsp;</p>
      <p ALIGN="left">&nbsp;</p>
      </font>
      <p align="left">6. Left - Return an initial substring.</p>
    <font SIZE="2">
    <p align="left"></font>
    <font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Syntax</b></font></p>
      <p align="left"><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</i> 
      </font>
      <b><i><font size="3"> ReturnString</font></i> <font size="3"> = Left( <i>SourceString</i>, <i>MaxCount </i>)</font></b></p>
    <blockquote>
      <p align="left"><font size="3"><b>Arguments</b></font></p>
    </blockquote>
      <font SIZE="4">
    <i><font SIZE="2">
    <p ALIGN="left">SourceString</font></i><font SIZE="2">&nbsp;-&nbsp;The
    source string to be used to create the substring. Required. Coerced to
    string. The argument must be <i>Expression</i>.</p>
    <i>
    <p ALIGN="left">MaxCount</i>&nbsp;-&nbsp;The maximum number of characters
    to be used in the substring. Required. Coerced to integer. The argument must
    be <i>Expression</i>.</p>
    </font>
      </font>
    <blockquote>
      <p align="left"><font size="3"><b>Return Value</b></font></p>
    </blockquote>
      <font SIZE="4">
    <i><font SIZE="2">
    <p ALIGN="left">ReturnString</font></i><font SIZE="2">&nbsp;-&nbsp;The
    string created as the left <i>MaxCount</i> characters of <i>SourceString</i>.</p>
    </font>
      </font>
    <blockquote>
      <p align="left"><font size="3"><b>Example</b></font></p>
    </blockquote>
      <font SIZE="4">
    <font SIZE="2">
    <p ALIGN="left"><b>SHOW Left(&quot;123456789&quot;,6)</b></p>
    <p ALIGN="left"><b>&quot;123456&quot;</b></p>
    <p ALIGN="left">This example uses a SHOW Command to demonstrate how the
    left( ) string Procedure extracts the first 6 characters of the string
    &quot;123456789&quot;.</p>
    </font>
      </font>
    <blockquote>
    <p align="left"><font size="3"><b>Action</b></font></p>
    </blockquote>
      <font SIZE="4">
    <font SIZE="2">
    <p ALIGN="left">Left( ) coerces the first argument to a string, and the
    second to an integer. If <i>MaxCount</i> is less than 0, it is made equal to
    0. Left( ) then creates a string of length equal to the smaller of <i>MaxCount</i>
    and the length of <i>SourceString</i>. The result string is then filled with
    characters from <i>SourceString</i>, starting with the first.</p>
    <p ALIGN="left">&nbsp;</p>
    <p ALIGN="left">&nbsp;</p>
    </font>
    <p align="left">7. Length - Count string characters.</p>
    <font SIZE="2">
    <p align="left"></font>
    <font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Syntax</b></font></p>
      </font>
      <blockquote>
        <blockquote>
          <i>
          <p ALIGN="left"><b><font size="3">ReturnInteger</font></b></i> <b><font size="3"> = Length( <i>SourceString </i>)</font></b></p>
        </blockquote>
        <p align="left"><font size="3"><b>Arguments</b></font></p>
      </blockquote>
      <font SIZE="4">
      <i><font SIZE="2">
      <p ALIGN="left">SourceString</font></i><font SIZE="2">&nbsp;-&nbsp;The
      string to be examined. Required. Coerced to string. The argument must be <i>Expression</i>.</p>
      </font>
      </font>
      <blockquote>
        <p align="left"><font size="3"><b>Return Value</b></font></p>
      </blockquote>
      <font SIZE="4">
      <i><font SIZE="2">
      <p ALIGN="left">ReturnInteger</font></i><font SIZE="2">&nbsp;-&nbsp;The
      number of characters in the string. A Real value.</p>
      </font>
      </font>
      <blockquote>
        <p align="left"><font size="3"><b>Example</b></font></p>
      </blockquote>
      <font SIZE="4">
      <font SIZE="2">
      <p ALIGN="left"><b>SHOW Length(&quot;ABC&quot;)</b></p>
      <p ALIGN="left"><b>3</b></p>
      <p ALIGN="left">This example uses a SHOW Command to demonstrate how the
      length() string Procedure returns the character count of the string
      &quot;ABC&quot;.</p>
      </font>
      </font>
      <blockquote>
      <p align="left"><font size="3"><b>Action</b></font></p>
      </blockquote>
      <font SIZE="4">
      <font SIZE="2">
      <p ALIGN="left">Length( ) coerces the argument to a string, counts its
      characters, and returns the count as an integer. Null strings have a count
      of 0.</p>
      <p ALIGN="left">&nbsp;</p>
      <p ALIGN="left">&nbsp;</p>
      </font><font SIZE="4">
      <p align="left">8. Lowercase - Convert string to lower case.</p>
    <font SIZE="2">
    <p align="left"></font>
    <font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Syntax</b></font></p>
      </font>
      </font>
      <blockquote>
        <blockquote>
          <i>
          <p ALIGN="left"><b><font size="3">ReturnString</font></b></i> <b><font size="3"> = LowerCase( <i>SourceString </i>)</font></b></p>
        </blockquote>
        <p align="left"><font size="3"><b>Arguments</b></font></p>
      </blockquote>
      <font SIZE="4">
      <i><font SIZE="2">
      <p ALIGN="left">SourceString</font></i><font SIZE="2">&nbsp;-&nbsp;The
      string to be converted. Required. Coerced to string. The argument must be <i>Expression</i>.</p>
      </font>
      </font>
      <blockquote>
        <p align="left"><font size="3"><b>Return Value</b></font></p>
      </blockquote>
      <font SIZE="4">
      <i><font SIZE="2">
      <p ALIGN="left">ReturnString</font></i><font SIZE="2">&nbsp;-&nbsp;The
      string created as a result of converting <i>SourceString</i> to lower
      case.</p>
      </font>
      </font>
      <blockquote>
        <p align="left"><font size="3"><b>Example</b></font></p>
      </blockquote>
      <font SIZE="4">
      <font SIZE="2">
      <p ALIGN="left"><b>SHOW Lowercase(&quot;123 AbC&quot;)</b></p>
      <p ALIGN="left"><b>&quot;123 abc&quot;</b></p>
      <p ALIGN="left">This example uses a SHOW Command to demonstrate how the
      lowercase( ) string Procedure copies a string and converts the upper case
      letters to lower case.</p>
      </font>
      </font>
      <blockquote>
      <p align="left"><font size="3"><b>Action</b></font></p>
      </blockquote>
      <font SIZE="4">
      <font SIZE="2">
      <p ALIGN="left">Lowercase( ) coerces the argument to a string, and
      creates a copy of the string. It then converts the upper case letters in
      the copy to lower case and returns it as the result string.</p>
      <p ALIGN="left">&nbsp;</p>
      <p ALIGN="left">&nbsp;</p>
      </font><font SIZE="4">
      <p align="left">9. Place - Left justify a string.</p>
    <font SIZE="2">
    <p align="left"></font>
    <font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Syntax</b></font></p>
      <p align="left"></font><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      ReturnString</i> =Place(<i>InsertString</i>,<i>SourceString</i>,<i>Offset
    </i>)</p>
      </font>
    <blockquote>
      <p align="left"><font size="3"><b>Arguments</b></font></p>
    </blockquote>
      <font SIZE="4">
    <i><font SIZE="2">
    <p ALIGN="left">InsertString</font></i><font SIZE="2">&nbsp;-&nbsp;The
    string to be inserted. Required. Coerced to string. The argument must be <i>Expression</i>.</p>
    <i>
    <p ALIGN="left">SourceString</i>&nbsp;-&nbsp;The string to receive the
    insertion. Required. Coerced to string. The argument must be <i>Expression</i>.</p>
    <i>
    <p ALIGN="left">Offset</i>&nbsp;-&nbsp;The 1-relative offset in <i>SourceString</i>
    to receive the leftmost character of <i>InsertString</i>. Required. Coerced
    to integer. The argument must be <i>Expression</i>.</p>
    </font>
      </font>
    <blockquote>
      <p align="left"><font size="3"><b>Return Value</b></font></p>
    </blockquote>
      <font SIZE="4">
    <i><font SIZE="2">
    <p ALIGN="left">ReturnString</font></i><font SIZE="2">&nbsp;-&nbsp;The
    string created as a result of inserting <i>InsertString</i> into <i>SourceString</i>
    at offset <i>Offset</i>.</p>
    </font>
      </font>
    <blockquote>
      <p align="left"><font size="3"><b>Example</b></font></p>
    </blockquote>
      <font SIZE="4">
    <font SIZE="2">
    <p ALIGN="left"><b>SHOW Place(&quot;ABC&quot;,&quot;/123456789&quot;,3)</b></p>
    <p ALIGN="left"><b>&quot;123ABC789&quot;</b></p>
    <p ALIGN="left">This example uses a SHOW Command to demonstrate how the
    place() string Procedure left justifies the insert string at position 3 of
    the target string, and displays the result.</p>
    </font>
      </font>
    <blockquote>
    <p align="left"><font size="3"><b>Action</b></font></p>
    </blockquote>
      <font SIZE="4">
    <font SIZE="2">
    <p ALIGN="left">Place( ) coerces the first and second arguments to
    strings, and the third to an integer. It then creates a string of blanks
    large enough to contain the result, and copies the target string into the
    result string. Finally, it copies the insert string into the result string.</p>
    <p ALIGN="left">If the end of the inserted string extends past the end of
    the original target string, the resulting string will be larger, as well.
    Any characters not specified by the argument strings will be blanks.</p>
    <p ALIGN="left">If the offset is less than 1, the leftmost characters of
    the insert string are truncated, and the remaining characters, if any, are
    inserted at position 1 of the target string.</p>
    <p ALIGN="left">&nbsp;</p>
    <p ALIGN="left">&nbsp;</p>
    </font>
    <p align="left">10. PolyCatenate - Combine two or more strings.</p>
    <font SIZE="2">
    <p align="left"></font>
    <font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Syntax</b></font></p>
  <i>
  <p align="left">&nbsp;&nbsp;&nbsp;</i> </font>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    <i>ReturnString</i> = PolyCatenate(<i>String1</i>, <i>... </i>)</b></font></p>
  <blockquote>
        <p align="left"><font size="3"><b>Arguments</b></font></p>
      </blockquote>
      <font SIZE="4">
      <i><font SIZE="2">
      <p ALIGN="left">String1, </font></i><font SIZE="2">... &nbsp;-&nbsp;The
      strings to be combined in order in the concatenated result string.
      Required. Coerced to string. The arguments must be <i>Expression</i>.</p>
      </font>
  </font>
      <blockquote>
        <p align="left"><font size="3"><b>Return Value</b></font></p>
      </blockquote>
      <font SIZE="4">
      <i><font SIZE="2">
      <p ALIGN="left">ReturnString</font></i><font SIZE="2">&nbsp;-&nbsp;The
      string created as a result of placing copies of the strings one after the
      other.</p>
      </font>
  </font>
      <blockquote>
        <p align="left"><font size="3"><b>Examples</b></font></p>
      </blockquote>
      <font SIZE="4">
      <font SIZE="2">
      <p ALIGN="left"><b>SHOW PolyCatenate(&quot;The &quot;,&quot;time
      &quot;,&quot;is &quot;,AC1)</b></p>
      <p ALIGN="left"><b>&quot;The time is 0&quot;</b></p>
      <p ALIGN="left">This example uses a SHOW Command to demonstrate how the
      PolyCatenate( ) string Procedure combines four strings. The SNA AC1 is
      automatically coerced to a string.</p>
      <p ALIGN="left">SHOW PolyCatenate(&quot;Yours&quot;,&quot;
      &quot;,&quot;truly,&quot;)</p>
      <p ALIGN="left">&quot;Yours truly,&quot;</p>
      <p ALIGN="left">This example uses a SHOW Command to demonstrate how the
      PolyCatenate() string Procedure combines three string constants.</p>
      <blockquote>
      </font>
  </font>
      <p align="left"><font size="3"><b>Action</b></font></p>
      </blockquote>
      <font SIZE="4">
      <font SIZE="2">
      <p ALIGN="left">PolyCatenate( ) first coerces all arguments to strings.
      Any number of arguments may be used. It then creates a string large enough
      to contain the result, and copies the argument strings into the result
      string one after the other. Any of the arguments can be a null string.</p>
      <p align="left">&nbsp;</p>
      <p ALIGN="left">&nbsp;</p>
      </font><font SIZE="4">
      <p align="left">11. Right - Return a terminal substring.</p>
    <font SIZE="2">
    <p align="left"></font>
    <font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Syntax</b></font></p>
      <p align="left"></font>
  </font>
      <font size="3"><b><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      ReturnString</i> = Right(<i>SourceString</i>, <i>MaxCount</i>)</b></font></p>
    <blockquote>
      <p align="left"><font size="3"><b>Arguments</b></font></p>
    </blockquote>
      <font SIZE="4">
    <i><font SIZE="2">
    <p ALIGN="left">SourceString</font></i><font SIZE="2">&nbsp;-&nbsp;The
    source string to be used to create the substring. Required. Coerced to
    string. The argument must be <i>Expression</i>.</p>
    <i>
    <p ALIGN="left">MaxCount</i>&nbsp;-&nbsp;The maximum number of characters
    to be used in the substring. Required. Coerced to integer. The argument must
    be <i>Expression</i>.</p>
    </font>
  </font>
    <blockquote>
      <p align="left"><font size="3"><b>Return Value</b></font></p>
    </blockquote>
      <font SIZE="4">
    <i><font SIZE="2">
    <p ALIGN="left">ReturnString</font></i><font SIZE="2">&nbsp;-&nbsp;The
    string created as the right <i>MaxCount</i> characters of <i>SourceString</i>.</p>
    </font>
  </font>
    <blockquote>
      <p align="left"><font size="3"><b>Example</b></font></p>
    </blockquote>
      <font SIZE="4">
    <font SIZE="2">
    <p ALIGN="left"><b>SHOW Right(&quot;123456789&quot;,6)</b></p>
    <p ALIGN="left"><b>&quot;456789&quot;</b></p>
    <p ALIGN="left">This example uses a SHOW Command to demonstrate how the
    right() string Procedure extracts the last 6 characters of the string
    &quot;123456789&quot;.</p>
    <blockquote>
    </font>
    <p align="left">Action</p>
    </blockquote>
    <font SIZE="2">
    <p ALIGN="left">Right( ) coerces the first argument to a string, and the
    second to an integer. If <i>MaxCount</i> is less than 0, it is made equal to
    0. Right( ) then creates a string of length equal to the smaller of <i>MaxCount</i>
    and the length of <i>SourceString</i>. The result string is then filled with
    the last <i>MaxCount</i> characters from <i>SourceString</i>.</p>
    <p ALIGN="left">&nbsp;</p>
    <p ALIGN="left">&nbsp;</p>
    </font>
    <p align="left">12. String - Create string equivalent.</p>
    <font SIZE="2">
    <p align="left"></font>
    <font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Syntax</b></font></p>
  </font>
      <blockquote>
        <blockquote>
          <i>
          <p ALIGN="left"><b><font size="3">ReturnString</font></b></i> <b><font size="3"> = String( <i>Datum </i>)</font></b></p>
        </blockquote>
        <p align="left"><font size="3"><b>Arguments</b></font></p>
      </blockquote>
      <font SIZE="4">
      <i><font SIZE="2">
      <p ALIGN="left">Datum</font></i><font SIZE="2">&nbsp;-&nbsp;The data
      item to be converted. Required. Coerced to string. The argument must be <i>Expression</i>.</p>
      </font>
  </font>
      <blockquote>
        <p align="left"><font size="3"><b>Return Value</b></font></p>
      </blockquote>
      <font SIZE="4">
      <i><font SIZE="2">
      <p ALIGN="left">ReturnString</font></i><font SIZE="2">&nbsp;-&nbsp;The
      string created as a result of converting <i>Datum</i> to its string
      equivalent.</p>
      </font>
  </font>
      <blockquote>
        <p align="left"><font size="3"><b>Example</b></font></p>
      </blockquote>
      <font SIZE="4">
      <font SIZE="2">
      <p ALIGN="left"><b>SHOW String(12345)</b></p>
      <p ALIGN="left"><b>&quot;12345&quot;</b></p>
      <p ALIGN="left">This example uses a SHOW Command to demonstrate how the
      string() string Procedure converts the integer constant 12345 to the
      string constant &quot;12345&quot;.</p>
      <blockquote>
      </font>
      <p align="left">Action</p>
      </blockquote>
      <font SIZE="2">
      <p ALIGN="left">String( ) coerces the arguments a string, and returns a
      copy as the result. If the argument is already a string, it is not
      modified.</p>
      <p ALIGN="left">&nbsp;</p>
      <p ALIGN="left">&nbsp;</p>
      </font><font SIZE="4">
      <p align="left">13. StringCompare - Compare two strings.</p>
    <font SIZE="2">
    <p align="left"></font>
    <font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Syntax</b></font></p>
      <p align="left"></font>
  </font>
      <font size="3"><b><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      ReturnInteger</i> = StringCompare( <i>String1</i>, <i>String2 </i>)</b></font></p>
    <blockquote>
      <p align="left"><font size="3"><b>Arguments</b></font></p>
    </blockquote>
      <font SIZE="4">
    <i><font SIZE="2">
    <p ALIGN="left">String1</font></i><font SIZE="2">&nbsp;-&nbsp;The first
    of two strings to be compared. Required. Coerced to string. The argument
    must be <i>Expression</i>.</p>
    <i>
    <p ALIGN="left">String2</i>&nbsp;-&nbsp;The second of two strings to be
    compared. Required. Coerced to string. The argument must be <i>Expression</i>.</p>
    <p ALIGN="left">&nbsp;</p>
    </font>
  </font>
    <blockquote>
      <p align="left"><font size="3"><b>Return Value</b></font></p>
    </blockquote>
      <font SIZE="4">
    <i><font SIZE="2">
    <p ALIGN="left">ReturnInteger</font></i><font SIZE="2">&nbsp;-&nbsp;Integer
    -1, 0, or 1 as <i>String1</i> precedes, equals, or succeeds <i>String2</i>.</p>
    </font>
  </font>
    <blockquote>
      <p align="left"><font size="3"><b>Example</b></font></p>
    </blockquote>
      <font SIZE="4">
    <font SIZE="2">
    <p ALIGN="left"><b>SHOW StringCompare(&quot;ABC&quot;,&quot;abc&quot;)</b></p>
    <p ALIGN="left"><b>-1.0000000</b></p>
    <p ALIGN="left">This example uses a SHOW Command to demonstrate how the
    StringCompare( ) string Procedure compares the two string constants and
    returns the result of the comparison.</p>
    <blockquote>
    </font>
  </font>
    <p align="left"><font size="3"><b>Action</b></font></p>
    </blockquote>
      <font SIZE="4">
    <font SIZE="2">
    <p ALIGN="left">StringCompare( ) coerces the first and second arguments
    to strings. It then compares them lexicographically.</p>
    <p ALIGN="left">If the two strings are identical, an integer 0 is
    returned. Otherwise the strings are compared character by character until a
    difference is detected.</p>
    <p ALIGN="left">If the first difference occurs because one string is
    shorter than the other, the shorter string is said to precede the longer
    one. If the shorter string is<i> String1</i>, -1 is returned. If the shorter
    string is <i>String2</i>, 1 is returned.</p>
    <p ALIGN="left">If the first difference occurs because the character from
    <i>String1</i> precedes that from <i>String2</i> in the ASCII collating
    sequence, <i>String1</i> is said to precede <i>String2</i>, and -1 is
    returned. Otherwise, <i>String2</i> is said to precede <i>String1</i>, and 1
    is returned.</p>
    <p ALIGN="left">&nbsp;</p>
    <p ALIGN="left">&nbsp;</p>
    <p align="left">&nbsp;</p>
    </font><font SIZE="4">
    <p align="left">14. Substring- Return part of a string.</p>
    <font SIZE="2">
    <p align="left"></font>
    <font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Syntax</b></font></p>
    </font>
  </blockquote>
  </font>
    <i>
  <p align="left"><b><font size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  ReturnString = </font></b> </i><b><font size="3">SubString( <i>SourceString, Offset, MaxCount</i> )</font></b></p>
  <blockquote>
    <blockquote>
      <p align="left"><font size="3"><b>Arguments</b></font></p>
    </blockquote>
    <font SIZE="4">
    <i><font SIZE="2">
    <p ALIGN="left">SourceString</font></i><font SIZE="2">&nbsp;-&nbsp;The
    string to be used as the source of the substring. Required. Coerced to
    string. The argument must be <i>Expression</i>.</p>
    <i>
    <p ALIGN="left">Offset</i>&nbsp;-&nbsp;The 1-relative offset in <i>SourceString</i>
    of the first character of the substring. Required. Coerced to integer. The
    argument must be <i>Expression</i>.</p>
    <i>
    <p ALIGN="left">MaxCount</i>&nbsp;-&nbsp;The maximum number of characters
    from <i>SourceString</i> to use in the substring. Required. Coerced to
    integer. The argument must be <i>Expression</i>.</p>
    </font>
  </font>
    <blockquote>
      <p align="left"><font size="3"><b>Return Value</b></font></p>
      <font SIZE="4">
      <blockquote>
        <i><font SIZE="2">
        <p ALIGN="left">ReturnString</font></i><font SIZE="2">&nbsp;-&nbsp;The
        string created as a result of creating a copy of a substring derived
        from <i>SourceString</i>.</p>
        </font>
      </blockquote>
  </font>
      <p align="left"><font size="3"><b>Example</b></font></p>
    </blockquote>
    <font SIZE="4">
    <font SIZE="2">
    <p ALIGN="left"><b>SHOW Substring(&quot;123456789&quot;,3,4)</b></p>
    <p ALIGN="left"><b>&quot;3456&quot;</b></p>
    <p ALIGN="left">This example uses a SHOW Command to demonstrate how the
    substring() string Procedure copies 4 characters from the string constant
    &quot;123456789&quot; to form a new string.</p>
    <p ALIGN="left">&nbsp;</p>
    <blockquote>
    </font>
  </font>
    <p align="left"><font size="3"><b>Action</b></font></p>
    </blockquote>
    <font SIZE="4">
    <font SIZE="2">
    <p ALIGN="left">Substring( ) coerces the first argument to a string, and
    the second and third to integers. If the <i>Offset</i> argument is less than
    1, it is set to 1. Substring ( ) then creates a string large enough to
    canteen the lesser of the <i>MaxCount</i> argument or the number of
    characters remaining after the offset in the source string. Substring( )
    then copies the characters from the substring, if any, into the result
    string.</p>
    <p ALIGN="left">&nbsp;</p>
    <p ALIGN="left">&nbsp;</p>
    </font><font SIZE="4">
    <p align="left">15. Trim - Remove leading and trailing white space.</p>
    <font SIZE="2">
    <p align="left"></font>
    <font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Syntax</b></font></p>
    </font>
  </font>
      <blockquote>
        <blockquote>
          <i>
          <p ALIGN="left"><b><font size="3">ReturnString</font></b></i> <b><font size="3"> = Trim( <i>SourceString </i>)</font></b></p>
        </blockquote>
        <p align="left"><font size="3"><b>Arguments</b></font></p>
      </blockquote>
    <font SIZE="4">
      <i><font SIZE="2">
      <p ALIGN="left">SourceString</font></i><font SIZE="2">&nbsp;-&nbsp;The
      string to be used as the source of characters. Required. Coerced to
      string. The argument must be <i>Expression</i>.</p>
      </font>
  </font>
      <blockquote>
        <p align="left"><font size="3"><b>Return Value</b></font></p>
        <font SIZE="4">
        <blockquote>
          <i><font SIZE="2">
          <p ALIGN="left">ReturnString</font></i><font SIZE="2">&nbsp;-&nbsp;The
          string created as a result of trimming blanks and tabs from <i>SourceString</i>.</p>
          </font>
        </blockquote>
  </font>
        <p align="left"><font size="3"><b>Example</b></font></p>
      </blockquote>
    <font SIZE="4">
      <font SIZE="2">
      <p ALIGN="left"><b>SHOW Trim(&quot; A B C &quot;)</b></p>
      <p ALIGN="left"><b>&quot;A B C&quot;</b></p>
      <p ALIGN="left">This example uses a SHOW Command to demonstrate how the
      Trim( ) string Procedure creates a new string by removing leading and
      trailing blanks from a string continuing them.</p>
      <blockquote>
      </font>
  </font>
      <p align="left"><font size="3"><b>Action</b></font></p>
      </blockquote>
    <font SIZE="4">
      <font SIZE="2">
      <p ALIGN="left">Trim( ) coerces the arguments to a string. It then
      creates a string large enough to contain the result, and copies the source
      string into the result string, omitting leading and trailing blank or tab
      characters.</p>
      <p ALIGN="left">&nbsp;</p>
      <p ALIGN="left">&nbsp;</p>
      </font>
      <p align="left">16. Uppercase - Convert string to upper case.</p>
    <font SIZE="2">
    <p align="left"></font>
    <b>
    <font face="Arial" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    </font></b>
  </font>
    <font face="Arial" size="3"><b>Syntax</b></font></p>
      <blockquote>
        <blockquote>
          <i>
          <p ALIGN="left"><b><font size="3">ReturnString</font></b></i> <b><font size="3"> = UpperCase( <i>SourceString </i>)</font></b></p>
        </blockquote>
        <p align="left"><font size="3"><b>Arguments</b></font></p>
      </blockquote>
    <font SIZE="4">
      <i><font SIZE="2">
      <p ALIGN="left">SourceString</font></i><font SIZE="2">&nbsp;-&nbsp;The
      string to be converted. Required. Coerced to string. The argument must be <i>Expression</i>.
      </font>
    </p>
  </font>
      <blockquote>
        <p align="left"><font size="3"><b>Return Value</b></font></p>
      </blockquote>
    <font SIZE="4">
      <i><font SIZE="2">
      <p ALIGN="left">ReturnString</font></i><font SIZE="2">&nbsp;-&nbsp;The
      string created as a result of converting <i>SourceString</i> to upper
      case.
      </font>
    </p>
  </font>
      <blockquote>
        <p align="left"><font size="3"><b>Example</b></font></p>
      </blockquote>
    <font SIZE="4">
      <font SIZE="2">
      <p ALIGN="left"><b>SHOW Uppercase(&quot;123 aBc&quot;)</b></p>
      <p ALIGN="left"><b>&quot;123 ABC&quot;</b></p>
      <p ALIGN="left">This example uses a SHOW Command to demonstrate how the
      uppercase( ) string Procedure copies a string and converts the lower case
      letters to upper case.</p>
      <blockquote>
      </font>
  </font>
      <p align="left"><font size="3"><b>Action</b></font></p>
      </blockquote>
    <font SIZE="4">
      <font SIZE="2">
      <p ALIGN="left">Uppercase( ) coerces the argument to a string, and
      creates a copy of the string. It then converts the lower case letters in
      the copy to upper case and returns it as the result string.</p>
      <p ALIGN="left">&nbsp;</p>
      <p align="left">&nbsp;</p>
      </font><font SIZE="4">
      <p align="left">17. Value - Convert to numeric equivalent.</p>
    <font SIZE="2">
    <p align="left"></font>
    <font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Syntax</b></font></p>
      </font>
  </font>
      <blockquote>
        <blockquote>
          <i>
          <p ALIGN="left"><b><font size="3">ReturnReal</font></b></i> <b><font size="3"> = Value( <i>Datum </i>)</font></b></p>
        </blockquote>
        <p align="left"><font size="3"><b>Arguments</b></font></p>
      </blockquote>
    <font SIZE="4">
      <i><font SIZE="2">
      <p ALIGN="left">Datum</font></i><font SIZE="2">&nbsp;-&nbsp;The data
      item to be converted. Required. The argument must be <i>Expression</i>.
      </font>
    </p>
  </font>
      <blockquote>
        <p align="left"><font size="3"><b>Return Value</b></font></p>
      </blockquote>
    <font SIZE="4">
      <i><font SIZE="2">
      <p ALIGN="left">ReturnReal</font></i><font SIZE="2">&nbsp;-&nbsp;The
      double precision real numeric value equivalent to <i>Datum</i>. A real
      value.</p>
      </font>
  </font>
      <blockquote>
        <p align="left"><font size="3"><b>Example</b></font></p>
      </blockquote>
    <font SIZE="4">
      <font SIZE="2">
      <p ALIGN="left"><b>SHOW Value(&quot;123.4&quot;)</b></p>
      <p ALIGN="left"><b>123.4000000</b></p>
      <p ALIGN="left">This example uses a SHOW Command to demonstrate how the
      value( ) string Procedure converts the string &quot;123.4&quot; to its
      numeric value.</p>
      <blockquote>
      </font>
  </font>
      <p align="left"><font size="3"><b>Action</b></font></p>
      </blockquote>
    <font SIZE="4">
      <font SIZE="2">
      <p ALIGN="left">Value( ) determines the data type of the argument.
      Integers or stings are converted to their real numeric equivalent, and
      returned. Real arguments are returned without modification.</p>
      <p ALIGN="left">&nbsp;</p>
      <p ALIGN="left">&nbsp;</p>
      </font>
      <p align="left">18. Word - Extract a word from a string.</p>
    <font SIZE="2">
    <p align="left"></font>
    <font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Syntax</b></font></p>
      <p align="left">
  </font>
    <font size="3"><b><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    ReturnString</i> = Word( <i>SourceString, WordNumber </i>)</b></font></p>
    <blockquote>
      <p align="left"><font size="3"><b>Arguments</b></font></p>
    </blockquote>
    <font SIZE="4">
    <i><font SIZE="2">
    <p ALIGN="left">SourceString</font></i><font SIZE="2">&nbsp;-&nbsp;The
    string to be examined. Required. Coerced to string. The argument must be <i>Expression</i>.</p>
    <i>
    <p ALIGN="left">WordNumber</i>&nbsp;-&nbsp;The 1-relative cardinal number
    of the word in <i>SourceString</i> to be returned. The argument must be <i>Expression</i>.</p>
    </font>
  </font>
    <blockquote>
      <p align="left"><font face="Arial" size="3"><b>Return Value</b></font></p>
    </blockquote>
    <font SIZE="4">
    <i><font SIZE="2">
    <p ALIGN="left">ReturnString</font></i><font SIZE="2">&nbsp;-&nbsp;The
    string containing the word extracted from <i>SourceString</i>.</p>
    </font>
  </font>
    <blockquote>
      <p align="left"><font size="3"><b>Example</b></font></p>
    </blockquote>
    <font SIZE="4">
    <font SIZE="2">
    <p ALIGN="left"><b>SHOW Word(&quot;My country ’tis of thee.&quot;,2)</b></p>
    <p ALIGN="left"><b>&quot;country&quot;</b></p>
    <p ALIGN="left">This example uses a SHOW Command to demonstrate how the
    word( ) string Procedure extracts the second word of a source string.</p>
    <blockquote>
    </font>
  </font>
    <p align="left"><font size="3"><b>Action</b></font></p>
    </blockquote>
    <font SIZE="4">
    <font SIZE="2">
    <p ALIGN="left">Word( ) coerces the first argument to a string, and the
    second to an integer. It then finds the word corresponding to the second
    argument, and creates a string large enough to contain it. Finally, it
    copies the characters of the word, if any, into the result string.</p>
    <p ALIGN="left">Words are consecutive printable characters other than
    tabs or blanks. If the corresponding word does not exist in the source
    string, a null string is returned.</p>
    <p ALIGN="left">&nbsp;</p>
    <p ALIGN="left">&nbsp;</p>
    <p ALIGN="left">&nbsp;</p>
    </font>
  </font>
    <h3 ALIGN="left"><!--mstheme--><font color="#336666"><font face="Arial" size="4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    <a name="8.3.5"></a>8.3.5 Data Stream Procedures</font><!--mstheme--></font></h3>
    <p ALIGN="left"><font SIZE="4"><font SIZE="2">The built-in GPSS World Library contains a number of
    Procedures for controlling Data Streams from within your own PLUS
    Procedures. Data Streams are discussed in Section 4.16. These can be used to
    read from or write to files or to store and access a large amount of data in
    memory.</p>
    <p ALIGN="left">You can invoke these procedures in place of using the
    corresponding GPSS Block. The library procedures allow you to do everything
    that the corresponding Blocks do with one exception: the PLUS library
    procedures do not support Replace Mode.</p>
    <blockquote>
      <blockquote>
        <p align="left"><b>Open( <i>DataStream</i>, <i>FileNameString </i>)</b> - initialize a Data
        Stream.</p>
        <p align="left"><b>Close( <i>DataStream </i>)</b> - terminate a Data Stream and retrieve its
        error code.</p>
        <p align="left"><b>Read( <i>DataStream</i>)</b> - retrieve a text line from a Data Stream.</p>
        <p align="left"><b>Write( <i>DataStream, String </i>)</b> - pass a text line to a Data
        Stream.</p>
        <p align="left"><b>Seek( <i>DataStream</i>, <i>NewLinePosition </i>)</b> - set the Current
        Line Position of a Data Stream and retrieve the previous Line Position.</p>
        <p align="left">&nbsp;</p>
      </blockquote>
    </blockquote>
    </font><font SIZE="4">
    <p align="left">1. Open - Initialize a Data Stream</p>
    </font><font SIZE="2">
    <p ALIGN="left">You can use a Data Stream to read and write to a file, or
    to maintain a set of directly accessible data in the memory of your
    computer. open, close, read, write and seek operations exist both as GPSS
    Blocks and as PLUS library procedures. You can perform complex file
    input/output operations within your own PLUS Procedures or by using higher
    level GPSS Block Entities, and you may mix the two modes. The Blocks are
    discussed in Chapter 7.<br>
    <font SIZE="4"><font face="Arial" size="3"><b><br>
    <br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Syntax</b></font></p>
      <i>
      <p align="left"><font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b></font></i></font></font></font><font size="3"><b><i>ReturnCode</i>=Open( <i>DataStream</i>, <i>FileNameString
      </i>)</b></font></p>
      <blockquote>
        <p align="left"><font size="3"><b>Arguments</b></font></p>
      </blockquote>
    <font SIZE="4">
      <i><font SIZE="2">
      <p ALIGN="left">DataStream</font></i><font SIZE="2">&nbsp;-&nbsp;The
      number of the new Data Stream to be opened. Required. Coerced to integer.
      The argument must be <i>Expression</i>.</p>
      <i>
      <p ALIGN="left">FileNameString </i>&nbsp;-&nbsp;The name of the file to
      be written to. Required. Coerced to string. The argument must be <i>Expression</i>.</p>
      </font>
  </font>
      <blockquote>
        <p align="left"><font size="3"><b>Return Value</b></font></p>
      </blockquote>
    <font SIZE="4">
      <i><font SIZE="2">
      <p ALIGN="left">ReturnCode</font></i><font SIZE="2">&nbsp;-&nbsp;A code
      indicating the success of the operation. Success is 0, otherwise an error
      occurred which is described by the value of the return code, as listed
      below.
      </font>
    </p>
  </font>
      <blockquote>
        <p align="left"><font size="3"><b>Example</b></font></p>
        </blockquote>
    <font SIZE="4">
        <font SIZE="2">
        <p ALIGN="left"><b>Result = Open(2,&quot;MYFILE.TXT&quot;);</b></p>
        <p ALIGN="left">In this example, the Open() Procedure creates the
        type of Data Stream known as an I/O Stream, and gives it number 2 for
        identification. If an error occurs during the Open, an error code is
        returned.</p>
      </font>
  </font>
        <blockquote>
      <p align="left"><font size="3"><b>Action</b></font></p>
     </blockquote>
    <font SIZE="4"><font SIZE="2">
      <p ALIGN="left">The Open library procedure Block causes a Data Stream
      to be created, and sets the Current Line Position to 1.</p>
      <p ALIGN="left">The first argument must identify the Data Stream to be
      used. A Data Stream is a sequence of text lines used by a GPSS World
      simulation. Each Data Stream is identified by a unique number. There are 2
      types of Data Stream:</p>
      <p ALIGN="left">1. Input/Output (I/O) Streams, and</p>
      <p ALIGN="left">2. In-Memory Streams.</p>
      <p ALIGN="left">The second argument is evaluated as a string. If it is
      a null string, an In-Memory Stream is created. Otherwise an I/O Stream is
      created, and the argument is presumed to be a file specification. If a
      path is not included in the file specification, it is assumed that the
      simulation directory is to be used.</p>
      <p ALIGN="left">A Data Stream is a sequence of text lines used by a
      GPSS World simulation. Each Data Stream is identified by a unique number,
      so that many can be processed at the same time within in a single
      simulation. Data Stream numbers are arbitrary positive integers, assigned
      by you.</p>
      <p ALIGN="left">If, when you Open() a file type Data Stream, you use a
      file name without a path, the directory of the Simulation Object is
      assumed to be the location of the file. When an existing file is found, it
      is completely loaded into virtual memory during the processing of the OPEN
      Block. If no file is found, it is assumed that you are creating one, and
      processing continues.</p>
      <p ALIGN="left">If the Data Stream has already been opened, the open
      operation concludes without raising an error condition.</p>
      <p ALIGN="left">If an error is detected, the error code is stored
      internally as well as being returned by the Procedure. A CLOSE Block can
      be used to retrieve a stored Error Code.</p>
      <p ALIGN="left">Data Streams are buffered in virtual memory. When an
      existing file is found by an open operation, it is completely loaded into
      virtual memory. If no file is found, it is assumed that you are creating
      one, and processing continues. After the open operation completes, all
      data is kept as part of the Simulation Object until the Data Stream is
      closed. Any changes to the data are returned to the file system only when
      the Data Stream is terminated by a CLOSE Block or a Close() library
      procedure.</p>
      <p ALIGN="left">Chapter 4 (4.16) contains a full discussion of Data
      Streams. The open operation can also be performed by an OPEN Block,
      described in Chapter 7, as well as the Open() PLUS library procedure,
      described here.</p>
      <p ALIGN="left">&nbsp;</p>
      </font><font SIZE="4">
      <p align="left">Return Codes</p>
      <blockquote>
      </font><font FACE="Symbol" SIZE="2">
      <p ALIGN="left">·</font><font SIZE="2">&nbsp;0 - No Errors.</p>
      </font><font FACE="Symbol" SIZE="2">
      <p ALIGN="left">·</font><font SIZE="2">&nbsp;10 - Error. Filename too
      long. Data Stream not created.</p>
      </font><font FACE="Symbol" SIZE="2">
      <p ALIGN="left">·</font><font SIZE="2">&nbsp;11 - Error. Error while
      reading an external file. Data Stream not created.</p>
      </font><font FACE="Symbol" SIZE="2">
      <p ALIGN="left">·</font><font SIZE="2">&nbsp;12 - Error. Memory
      request was denied while trying to read an existing file. Data Stream not
      created.</p>
      <p ALIGN="left">&nbsp;</p>
      <p align="left">&nbsp;</p>
      </blockquote>
      </font><font SIZE="4">
      <p align="left">2. Close - terminate a Data Stream and retrieves its error code.</p>
    <font SIZE="2">
    <p align="left"></font>
    <font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Syntax</b></font></p>
    <p align="left"></font>
  </font>
    <font size="3"><b><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    ReturnCode</i>=Close( <i>DataStream </i>)</b></font></p>
      <blockquote>
        <p align="left"><font size="3"><b>Arguments</b></font></p>
      </blockquote>
    <font SIZE="4">
      <i><font SIZE="2">
      <p ALIGN="left">DataStream</font></i><font SIZE="2">&nbsp;-&nbsp;The
      number of the new Data Stream to be opened. Required. Coerced to integer.
      The argument must be <i>Expression</i>.
      </font>
    </p>
  </font>
      <blockquote>
        <p align="left"><font size="3"><b>Return Value</b></font></p>
      </blockquote>
    <font SIZE="4">
      <i><font SIZE="2">
      <p ALIGN="left">ReturnCode</font></i><font SIZE="2">&nbsp;-&nbsp;A code
      indicating the success of the operation. Success is 0, otherwise an error
      occurred which is described by the value of the return code, as listed
      below. If an error occurred during a previous Open(), Read(), Write(), or
      Seek() operation, the original nonzero error code is returned, as
      described below.
      </font>
    </p>
  </font>
      <blockquote>
        <p align="left"><font size="3"><b>Example</b></font></p>
      </blockquote>
    <font SIZE="4">
      <font SIZE="2">
      <p ALIGN="left"><b>Result = Close(2);</b></p>
      <p ALIGN="left">In this example, the Close() Procedure terminates the
      operation of Data Stream 2 and frees all the resources associated with it.
      If any error occurred in a previous operation involving Data Stream number
      2, the original error code is returned. Otherwise a 0 value is returned.</p>
      </font>
  </font>
     <blockquote>
      <p align="left"><font size="3"><b>Action</b></font></p>
     </blockquote>
    <font SIZE="4"><font SIZE="2">
      <p ALIGN="left">The Close library procedure shuts down a Data Stream
      and retrieves its error code.</p>
      <p ALIGN="left">The argument is evaluated numerically, truncated, and
      used as the entity number of the Data Stream. The result must be a
      positive integer.</p>
      <p ALIGN="left">Chapter 4 (4.16) contains a full discussion of Data
      Streams. The close operation can be performed by a CLOSE Block, described
      in Chapter 7, as well as the Close library procedure, described here.</p>
      <p ALIGN="left"></font>
  </font>
    <blockquote>
    <p align="left">
    <font size="3"><b>Return Codes</b></font>
     </blockquote>
    <font SIZE="4">
      <blockquote>
      <font FACE="Symbol" SIZE="2">
      <p ALIGN="left">·</font><font SIZE="2">&nbsp;0 - No Errors.</p>
      </font><font FACE="Symbol" SIZE="2">
      <p ALIGN="left">·</font><font SIZE="2">&nbsp;10 - Open Error. Filename
      too long. Data Stream not created.</p>
      </font><font FACE="Symbol" SIZE="2">
      <p ALIGN="left">·</font><font SIZE="2">&nbsp;11 - Open Error. Error
      while reading an external file. Data Stream not created.</p>
      </font><font FACE="Symbol" SIZE="2">
      <p ALIGN="left">·</font><font SIZE="2">&nbsp;12 - Open Error. Memory
      request was denied while trying to read an existing file. Data Stream not
      created.</p>
      </font><font FACE="Symbol" SIZE="2">
      <p ALIGN="left">·</font><font SIZE="2">&nbsp; 21 - Read Error. A
      memory request was denied while trying to perform a read operation.</p>
      </blockquote>
      </font></font>
      <p ALIGN="left"><font face="Symbol" size="2">&nbsp;&nbsp;</font>
    <font SIZE="4">
      </font><font face="Symbol" size="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      </font><font SIZE="4"><font FACE="Symbol" SIZE="2">
      ·</font><font SIZE="2">&nbsp;22 - Read Error. Data
      Stream has not been successfully opened.</p>
      <blockquote>
      </font><font FACE="Symbol" SIZE="2">
      <p ALIGN="left">·</font><font SIZE="2">&nbsp;31 - Write Error, A
      memory request was denied while trying to</p>
      <p ALIGN="left">perform a Write operation.</p>
      </font><font FACE="Symbol" SIZE="2">
      <p ALIGN="left">·</font><font SIZE="2">&nbsp;32 - Write Error. Data
      Stream has not been successfully opened.</p>
      </font><font FACE="Symbol" SIZE="2">
      <p ALIGN="left">·</font><font SIZE="2">&nbsp;41 - Close Error. An I/O
      Error prevented the file from being written to disk.</p>
      </font><font FACE="Symbol" SIZE="2">
      <p ALIGN="left">·</font><font SIZE="2">&nbsp;43 - Close Error. Data
      Stream has not been successfully opened.</p>
      </font><font FACE="Symbol" SIZE="2">
      <p ALIGN="left">·</font><font SIZE="2">&nbsp;51 - Seek Error. Data
      Stream has not been successfully opened.
      </font></p>
      <p ALIGN="left">&nbsp;</p>
      <p ALIGN="left">&nbsp;</p>
      </blockquote>
      <font SIZE="4">
      <p align="left">3. Read - retrieve a text line from a Data Stream.</p>
    <font SIZE="2">
    <p align="left"></font>
    <font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Syntax</b></font></p>
      <p align="left"></font>
  </font>
      <font size="3"><b><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      ReturnString</i>=Read( <i>DataStream </i>)</b></font></p>
      <blockquote>
        <p align="left"><font size="3"><b>Arguments</b></font></p>
      </blockquote>
    <font SIZE="4">
      <i><font SIZE="2">
      <p ALIGN="left">DataStream</font></i><font SIZE="2">&nbsp;-&nbsp;The
      number of the new Data Stream to be opened. Required. Coerced to integer.
      The argument must be <i>Expression</i>.</p>
      </font>
  </font>
      <blockquote>
        <p align="left"><font size="3"><b>Return Value</b></font></p>
      </blockquote>
    <font SIZE="4">
      <i><font SIZE="2">
      <p ALIGN="left">ReturnString</font></i><font SIZE="2">&nbsp;-&nbsp;The
      string read from the Current Line of the Data Stream.</p>
      </font>
  </font>
      <blockquote>
        <p align="left"><font size="3"><b>Example</b></font></p>
      </blockquote>
    <font SIZE="4">
      <font SIZE="2">
      <p ALIGN="left"><b>NextLine = Read(1);</b></p>
      <p ALIGN="left">In this example, the Read() Procedure retrieves a text
      line from Data Stream number 1 and places a copy in the User Variable
      named NextLine. If an error occurs, a null string is assigned to NextLine
      and an Error Code indicating the specific reason is stored internally, and
      can be retrieved by a Close operation. These values are listed under the
      Close Procedure, described above.</p>
      <p ALIGN="left">&nbsp;</p>
      </font><font SIZE="4">
      <p align="left">Action</p>
      </font><font SIZE="2">
      <p ALIGN="left">The argument is evaluated numerically, truncated, and
      used as the Data Stream Entity number. This must be a positive integer.</p>
      <p ALIGN="left">If an error is detected, the error code is stored
      internally. A CLOSE Block or a Close() Procedure invocation can be used to
      retrieve the Error. Chapter 4 (4.16) contains a full discussion of Data
      Streams.</p>
      <p ALIGN="left">The text line is determined by the Current Line
      Position, a 1-relative line index associated with the Data Stream. During
      a Read operation the line indicated by the Current Line Position, even if
      the line is a null string, is returned. Then, the Current Line Position is
      incremented, i.e. move to the next line number. If there is no line to be
      read, a null string is returned without any error code being stored. A
      seek operation can be used to change the Current Line Position.</p>
      <p ALIGN="left">&nbsp;</p>
      <p ALIGN="left">&nbsp;</p>
      </font><font SIZE="4">
      <p align="left">4. Write - pass a text line to a Data Stream.</p>
    <font SIZE="2">
    <p align="left"></font>
    <font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Syntax</b></font></p>
      <p align="left"></font>
  </font>
      <font size="3"><b><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      ReturnCode</i>=Write( <i>DataStream,SourceString </i>)</b></font></p>
      <blockquote>
        <p align="left"><font size="3"><b>Arguments</b></font></p>
      </blockquote>
    <font SIZE="4">
      <i><font SIZE="2">
      <p ALIGN="left">DataStream</font></i><font SIZE="2">&nbsp;-&nbsp;The
      number of the new Data Stream to be opened. Required. Coerced to integer.
      The argument must be <i>Expression</i>.</p>
      <i>
      <p ALIGN="left">SourceString</i> -&nbsp;The sting to become the next
      line in the Data Stream. Required. Coerced to integer. The argument must
      be <i>Expression</i>.</p>
      </font>
  </font>
      <blockquote>
        <p align="left"><font size="3"><b>Return Value</b></font></p>
      </blockquote>
    <font SIZE="4">
      <i><font SIZE="2">
      <p ALIGN="left">ReturnCode</font></i><font SIZE="2">&nbsp;-&nbsp;A code
      indicating the success of the operation. Success is 0, otherwise an error
      occurred which is described by the value of the return code, as listed
      below.</p>
      </font>
  </font>
      <blockquote>
        <p align="left"><font size="3"><b>Example</b></font></p>
      </blockquote>
    <font SIZE="4">
      <font SIZE="2">
      <p ALIGN="left"><b>Result= Write(1,&quot;New Line 20&quot;);</b></p>
      <p ALIGN="left">In this example, the Write() Procedure sends a text
      line to Data Stream number 1. If an error occurs, a nonzero code is
      returned and is also stored internally. The error codes are described
      below.</p>
      </font>
  </font>
     <blockquote>
      <p align="left"><font size="3"><b>Action</b></font></p>
     </blockquote>
    <font SIZE="4">
      <font SIZE="2">
      <p ALIGN="left">The first argument is evaluated numerically, truncated,
      and used as the Data Stream Entity number. This must be a positive
      integer.</p>
      <p ALIGN="left">The second argument is evaluated as a string. The Write
      Procedure then:</p>
      <p align="left">1. Moves all text lines at, or after, the Current Line Position down
      one position.</p>
      <p align="left">2. If the Current Line Position is after the last text line, sets it to
      just after the last text line in the Data Stream.</p>
      <p align="left">3. Places a copy of the new text line at the Current Line Position.</p>
      <p align="left">4. Increments the Current Line Position.</p>
      <p ALIGN="left">If an error is detected, the error code is stored
      internally as well as being returned by the Procedure. A Close() Procedure
      invocation can be used to retrieve a stored Error Code.</p>
      <p ALIGN="left">Chapter 4 (4.16) contains a full discussion of Data
      Streams. WRITE Blocks support an additional mode of operation called
      &quot;Replace Mode&quot;. It is not supported by the Write() library
      procedure.</p>
      <p ALIGN="left">&nbsp;</p>
      </font><font SIZE="4">
      <p align="left">Error Codes</p>
      <blockquote>
      </font><font FACE="Symbol" SIZE="2">
      <p ALIGN="left">·</font><font SIZE="2">&nbsp;0 - No Errors.</p>
      </font><font FACE="Symbol" SIZE="2">
      <p ALIGN="left">·</font><font SIZE="2">&nbsp;31 - Error, A memory
      request was denied while trying to perform a write operation.</p>
      </font><font FACE="Symbol" SIZE="2">
      <p ALIGN="left">·</font><font SIZE="2">&nbsp;32 - Error. Data Stream
      has not been successfully opened.
      </font></p>
      <p ALIGN="left">&nbsp;</p>
      <font FACE="Symbol" SIZE="2">
      <p ALIGN="left">&nbsp;</p>
      </blockquote>
      </font><font SIZE="4">
      <p align="left">5. Seek - set the Current Line Position of a Data Stream.</p>
    <font SIZE="2">
    <p align="left"></font>
    <font face="Arial" size="3"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Syntax</b></font></p>
      <p align="left"></font>
  </font>
      <font size="3"><b><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      PreviousLinePosition</i>=Seek( <i>DataStream,NewLinePosition
      </i>)</b></font></p>
      <blockquote>
        <p align="left"><font size="3"><b>Arguments</b></font></p>
      </blockquote>
    <font SIZE="4">
      <i><font SIZE="2">
      <p ALIGN="left">DataStream</font></i><font SIZE="2">&nbsp;-&nbsp;The
      number of the new Data Stream to be opened. Required. Coerced to integer.
      The argument must be <i>Expression</i>.</p>
      <i>
      <p ALIGN="left">NewLinePosition</i> -&nbsp;The new 1-relative value of
      the Current Line Position of the Data Stream.</p>
      </font>
  </font>
      <blockquote>
        <p align="left"><font size="3"><b>Return Value</b></font></p>
      </blockquote>
    <font SIZE="4">
      <i><font SIZE="2">
      <p ALIGN="left">PreviousLinePosition</font></i><font SIZE="2">&nbsp;-&nbsp;The
      value of the Current Line Position of the Data Stream before the Seek
      operation is executed.
      </font>
      </p>
  </font>
      <blockquote>
        <p align="left"><font size="3"><b>Example</b></font></p>
    <font SIZE="4">
        <font SIZE="2">
        </blockquote>
        <p ALIGN="left"><b>LastPosition = Seek(1,22);</b></p>
        <p ALIGN="left">In this example, the Current Line Pointer of the Data
        Stream is changed to 22.</p>
      </font>
  </font>
       <blockquote>
      <p align="left"><font size="3"><b>Action</b></font></p>
      </blockquote>
    <font SIZE="4">
      <font SIZE="2">
      <p ALIGN="left">Each Data Stream has a <i>Current Line Position</i>.
      This is a 1-relative index to the next line position to be read or
      written. The first argument is evaluated numerically, truncated, and used
      as the Data Stream Entity number. The second argument is evaluated
      numerically, truncated, and used as the new Current Line Position of the
      Data Stream. Both must be positive integers.</p>
      <p ALIGN="left">If an error is detected, the error code is stored
      internally. A Close() Procedure invocation can be used later to retrieve
      the Error Code. These values are listed under the Close Procedure,
      described above.</p>
      <p ALIGN="left">&nbsp;</p>
      </font>
  </font>
      <h3 ALIGN="left"><!--mstheme--><font color="#336666"><font face="Arial" size="4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      <a name="8.3.6"></a>8.3.6 Dynamic Call Procedures</font><!--mstheme--></font></h3>
      <p ALIGN="left"><font SIZE="4"><font SIZE="2">The built-in GPSS World Library contains a number of
      Procedures for invoking functions that exist in external executable files
      including Dynamic Link Libraries, known as DLLs. You can use the
      appropriate Procedure, as discussed below, to invoke third party functions
      in separate executable files that observe the standard CDECL programming
      protocol. They may optionally return an integer return code, and they may
      optionally take an integer, char * (string), or double (real) argument.</p>
      <p ALIGN="left">All PLUS Dynamic Call Procedures require you to name
      both the executable file (EXE or DLL) and the function that is to be
      invoked. Further, you must match the PLUS Procedure to the requirements of
      the target function. If the function requires an integer argument you must
      use the Call_Integer() Procedure. Similarly, use the Call_String() or the
      Call_Real() to invoke a DLL function requiring a string (i.e. char *) or a
      real (i.e. double) argument. Use the Call() Procedure to invoke a function
      with no (i.e. void) argument. The choice of PLUS Procedure allows the
      argument to be coerced to the appropriate data type required by the target
      function.</p>
      <p ALIGN="left">If the external function returns an integer return
      code, the PLUS Call Procedure will provide it as the result of the PLUS
      Procedure call. Otherwise, the resulting value will be meaningless.
      Clearly, you must know the detailed characteristics of the function you
      are calling.</p>
      <p ALIGN="left">The Dynamic Call Procedures are:</p>
      <blockquote>
        <blockquote>
          <i>
          <p align="left"><b>ReturnCode</b></i> <b> = Call( <i>ExecutableFileName,</i> <i>FunctionName </i>)
          </b>
          - Invoke an external CDECL function with no ( i.e. void) arguments.</p>
          <i>
          <p align="left"><b>ReturnCode</b></i> <b> = Call_Integer( <i>ExecutableFileName,</i> <i>FunctionName,
          Argument</i>)</b> - Invoke an external CDECL function with a single
          integer argument.</p>
          <i>
          <p align="left"><b>ReturnCode</b></i> <b> =&nbsp;<br>
          Call_String( <i>ExecutableFileName,</i> <i>FunctionName,
          Argument </i>)</b> - Invoke an external CDECL function with a single
          string (i.e. char *) argument.</p>
          <i>
          <p align="left"><b>ReturnCode</b></i> <b> = Call_Real( <i>ExecutableFileName,</i> <i>FunctionName,
          Argument </i></b>) - Invoke an external CDECL function with a single real
          (i.e. double) argument.</p>
          <p align="left">&nbsp;</p>
        </blockquote>
      </blockquote>
      </font><font SIZE="4">
      <p align="left">The Search for your DLL or EXE File</p>
      </font><font SIZE="2">
      <p ALIGN="left">The first argument in all PLUS Dynamic Calls is a
      string naming the executable module (either a .DLL or .EXE file)
      containing the target function. If the string specifies a path, only that
      path is searched. When specifying a path, be sure to use backslashes (\),
      not forward slashes (/). If a path is not specified and the filename
      extension is omitted, the default library extension .DLL is appended.
      However, the filename string can include a trailing point character (.) to
      indicate that the module name has no extension. When no path is specified,
      the search for the module proceeds in the following sequence:</p>
      <p ALIGN="left">1. The directory from which the application loaded.
      i.e. the GPSS World Module Directory.</p>
      <p ALIGN="left">2. The current directory.</p>
      <p ALIGN="left">3. The Windows system directory.</p>
      <p ALIGN="left">4. The Windows directory.</p>
      <p ALIGN="left">5. The directories that are listed in the PATH
      environment variable.</p>
      <p ALIGN="left">The second argument in the Call invocation is used to
      identify the target function. You must specify the same name exported in
      the named DLL or EXE file, including appended underscore, if any. If you
      do not include a required underscore in the function name, the Call
      Procedure will fail.</p>
  </font>
  <p align="left">&nbsp;</p>
      <font FACE="Arial" SIZE="2">
  <h3 ALIGN="left"><!--mstheme--><font color="#336666">&nbsp;&nbsp;&nbsp;
    </font>
  </font><font face="Arial" size="2">&nbsp;&nbsp;&nbsp;&nbsp; </font>
       <font SIZE="4">
  <font SIZE="4"> <a name="8.3.7">8.3.7</a>. Probability Distributions<!--mstheme--></font></h3>
      <font FACE="Arial" SIZE="2">
  <p ALIGN="left">This chapter contains the information you need to use the
  theoretical probability distributions in the Procedure Library. Empirical
  distributions, on the other hand, are normally created by using the GPSS
  FUNCTION Command, using D or C type random Functions. This is discussed in
  Chapter 6. As other alternatives, it is easy to create your own random variate
  generators by defining your own PLUS Procedures, or to read empirical data
  from a file.</p>
  <p ALIGN="left">Over 20 built in probability distributions are included in
  the Procedure Library. These distributions are applicable to a wide range of
  practical situations. [For an excellent detailed discussion, see Law, A.M. and
  W.D. Kelton: <i>Simulation Modeling and Analysis</i>, 2nd Ed., McGraw-Hill,
  New York (1991)].</p>
  <p ALIGN="left">Each Procedure call to a probability distribution requires
  that you specify a <i>stream</i> argument. In this position, you are to assert
  an Expression that evaluates to a Random Number Generator Entity number.
  Random Number Generator Entities are created, as needed, so you need not
  predefine them. Several Random Number Generators are used by GPSS World for
  GENERATE, ADVANCE, and TRANSFER blocks. These are specified in the
  &quot;Random&quot; page of the Model Settings notebook. This is discussed in
  Chapter 2.</p>
  <p ALIGN="left">Most of the probability distributions are specified by
  parameters that select from a family of functions. Procedure arguments denoted
  <i>locate</i>, <i>scale</i>, and <i>shape</i> are often used for this purpose.
  The <i>locate</i> argument acts like a post-hoc adder, that is applied after
  the draw from the distribution. It allows you to move the distribution
  horizontally, to any position on the x axis. The <i>scale</i> and <i>shape</i>
  arguments, if used, select a member from the family of distributions.</p>
  <p ALIGN="left">The built-in Procedure Library contains the following
  probability distributions:</p>
    </font>
  <blockquote>
    <blockquote>
    <font FACE="Symbol" SIZE="2">
    <p align="left">·</font><font FACE="Arial" SIZE="2">&nbsp;Beta&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    </font><font FACE="Symbol" SIZE="2">·</font><font FACE="Arial" SIZE="2">&nbsp;LogLaplace</p>
    </font><font FACE="Symbol" SIZE="2">
    <p align="left">·</font><font FACE="Arial" SIZE="2">&nbsp;Binomial </font><font FACE="Symbol" SIZE="2">&nbsp;&nbsp;&nbsp;</font><font face="Arial" size="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    </font><font FACE="Symbol" SIZE="2">·</font><font FACE="Arial" SIZE="2">&nbsp;LogLogistic</p>
    </font><font FACE="Symbol" SIZE="2">
    <p align="left">·</font><font FACE="Arial" SIZE="2">&nbsp;Discrete Uniform </font><font FACE="Symbol" SIZE="2">&nbsp;&nbsp;&nbsp;</font><font face="Arial" size="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    </font><font FACE="Symbol" SIZE="2">·</font><font FACE="Arial" SIZE="2">&nbsp;LogNormal</p>
    </font><font FACE="Symbol" SIZE="2">
    <p align="left">·</font><font FACE="Arial" SIZE="2">&nbsp;Exponential&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    </font><font FACE="Symbol" SIZE="2">·</font><font FACE="Arial" SIZE="2">&nbsp;Negative
    Binomial</p>
    </font><font FACE="Symbol" SIZE="2">
    <p align="left">·</font><font FACE="Arial" SIZE="2">&nbsp;Extreme Value A </font><font FACE="Symbol" SIZE="2">&nbsp;&nbsp;&nbsp;</font><font face="Arial" size="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    </font><font FACE="Symbol" SIZE="2">·</font><font FACE="Arial" SIZE="2">&nbsp;Normal</p>
    </font><font FACE="Symbol" SIZE="2">
    <p align="left">·</font><font FACE="Arial" SIZE="2">&nbsp;Extreme Value B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    </font><font FACE="Symbol" SIZE="2">·</font><font FACE="Arial" SIZE="2">&nbsp;Pareto</p>
    </font><font FACE="Symbol" SIZE="2">
    <p align="left">·</font><font FACE="Arial" SIZE="2">&nbsp;Gamma </font><font FACE="Symbol" SIZE="2">&nbsp;&nbsp;&nbsp;</font><font face="Arial" size="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    </font><font FACE="Symbol" SIZE="2">·</font><font FACE="Arial" SIZE="2">&nbsp;Pearson
    Type V</p>
    </font><font FACE="Symbol" SIZE="2">
    <p align="left">·</font><font FACE="Arial" SIZE="2">&nbsp;Geometric&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    </font><font FACE="Symbol" SIZE="2">·</font><font FACE="Arial" SIZE="2">&nbsp;Pearson
    Type VI</p>
    </font><font FACE="Symbol" SIZE="2">
    <p align="left">·</font><font FACE="Arial" SIZE="2">&nbsp;Inverse Gaussian </font><font FACE="Symbol" SIZE="2">&nbsp;&nbsp;&nbsp;</font><font face="Arial" size="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    </font><font FACE="Symbol" SIZE="2">·</font><font FACE="Arial" SIZE="2">&nbsp;Poisson</p>
    </font><font FACE="Symbol" SIZE="2">
    <p align="left">·</font><font FACE="Arial" SIZE="2">&nbsp;Inverse Weibull&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    </font><font FACE="Symbol" SIZE="2">·</font><font FACE="Arial" SIZE="2">&nbsp;Triangular</p>
    </font><font FACE="Symbol" SIZE="2">
    <p align="left">·</font><font FACE="Arial" SIZE="2">&nbsp;Laplace&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    </font><font FACE="Symbol" SIZE="2">·</font><font FACE="Arial" SIZE="2">&nbsp;Uniform</p>
    </font><font FACE="Symbol" SIZE="2">
    <p align="left">·</font><font FACE="Arial" SIZE="2">&nbsp;Logistic </font><font FACE="Symbol" SIZE="2">&nbsp;&nbsp;&nbsp;</font><font face="Arial" size="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    </font><font FACE="Symbol" SIZE="2">·</font><font FACE="Arial" SIZE="2">&nbsp;Weibull</p>
    </font><b><font FACE="Arial" SIZE="4">
    <p align="left">&nbsp;</p>
    <p align="left">&nbsp;</p>
    </font></b>
  </blockquote>
  </blockquote>
 </blockquote>
</blockquote>
<b><font FACE="Arial">
<p align="left"><font face="Arial" size="4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
1. Beta</font></p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Syntax</p>
</font>
<blockquote>
  <blockquote>
    <i><font FACE="Arial" SIZE="4">
    <p ALIGN="left">Real</font></i><font FACE="Arial" SIZE="4"> = BETA( <i>Stream</i>,
    <i>Min</i>, <i>Max</i>, <i>Shape1</i>, <i>Shape2 </i>)</p>
    </font>
    <blockquote>
      <font FACE="Arial">
      <p align="left">Arguments</p>
      </blockquote>
    </font><i><font FACE="Arial" SIZE="2">
    <p ALIGN="left">Stream</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
    random number generator entity number. Required. Coerced to integer. Must be
    greater than or equal to 1. The argument must be <i>Expression</i>.</p>
    <b><i>
    <p ALIGN="left">Min</i></b>-&nbsp;The smallest sample to be generated.
    Required. Coerced to real. Must be less than <i>max</i>. The argument must
    be <i>Expression</i>.</p>
    <b><i>
    <p ALIGN="left">Max-</i></b>&nbsp;The largest sample to be generated.
    Required. Coerced to real. Must be greater than <i>min</i>. The argument
    must be <i>Expression</i>.</p>
    <b><i>
    <p ALIGN="left">Shape1</i></b>&nbsp;-&nbsp;The first selection value used
    to choose from a family of shapes. Required. Coerced to real. Must be
    strictly positive. The argument must be <i>Expression</i>.</p>
    <b><i>
    <p ALIGN="left">Shape2</i></b>&nbsp;-&nbsp;The second selection value
    used to choose from a family of shapes. Required. Coerced to real. Must be
    strictly positive. The argument must be <i>Expression</i>.</p>
    <p ALIGN="left">&nbsp;</p>
  </font>
  <blockquote>
    <b><font FACE="Arial">
    <p align="left">Return Value</p>
    </blockquote>
    </font><i><font FACE="Arial" SIZE="2">
    <p ALIGN="left">Real</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
    real value generated as a single instance of the probability distribution.</p>
  </font><b><font FACE="Arial">
  <p align="left">&nbsp;</p>
  <blockquote>
    <p align="left">Probability Density Function</p>
  </blockquote>
  </font></b><font FACE="Arial" SIZE="2">
  <p ALIGN="left"></font></p>
  <p ALIGN="center"><img border="0" src="../images/1.gif" width="459" height="599"></p>
  <p ALIGN="center"><i><font face="Times" size="2">Figure 8</font></i><font FACE="Arial" SIZE="2">—</font><i><font FACE="Times" SIZE="2">1.
  The Beta Distribution
  </font></i></p>
  <p ALIGN="left">&nbsp;</p>
  <blockquote>
    <b><font FACE="Arial">
    <p align="left">Notes</p>
    </blockquote>
    </font></b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">The Beta Distribution degenerates to the Uniform when the <i>Shape1
  </i>and<i> Shape2</i> arguments are 1. That is, Beta( <i>Stream, Min, Max,</i>
  1, 1 ) is distributed as Uniform( <i>Stream, Min, Max </i>).</p>
  <p ALIGN="left">Beta( <i>Stream, Min, Max</i>, 1, 2 ) is a left triangle;
  Beta( <i>Stream, Min, Max</i>, 2, 1) is a right triangle.</p>
  <b><font FACE="Arial">
  <p align="left">&nbsp;</p>
  <p align="left">&nbsp;</p>
  </font></font>
  <p align="left"><font face="Arial" size="4">2. Binomial</font><font FACE="Arial" SIZE="2"></p>
  <p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Syntax</p>
  </font></b>
</blockquote>
</blockquote>
<b>
<blockquote>
  <blockquote>
    <i><font FACE="Arial" SIZE="4">
    <p ALIGN="left">Integer</font></i><font FACE="Arial" SIZE="4"> = BINOMIAL(
    <i>Stream</i>, <i>TrialCount, Probability </i>)</p>
    </font>
    <blockquote>
      <font FACE="Arial">
      <p align="left">Arguments</p>
      </blockquote>
    </font><i><font FACE="Arial" SIZE="2">
    <p ALIGN="left">Stream</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
    random number generator entity number. Required. Coerced to integer. Must be
    greater than or equal to 1. The argument must be <i>Expression</i>.</p>
    <b><i>
    <p ALIGN="left">TrialCount</i></b>&nbsp;-&nbsp;The number of Bernoulli
    trials in a sample. Required. Coerced to integer. Must be strictly positive.
    The argument must be <i>Expression</i>.</p>
    <b><i>
    <p ALIGN="left">Probability </i></b>-&nbsp;The success probability of a
    Bernoulli trial. Must be between 0 and 1. Required. Coerced to real. The
    argument must be <i>Expression</i>.</p>
    <p ALIGN="left">&nbsp;</p>
  </font>
  <blockquote>
    <b><font FACE="Arial">
    <p align="left">Return Value</p>
    </blockquote>
    </font><i><font FACE="Arial" SIZE="2">
    <p ALIGN="left">Integer</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
    integer value generated as a single instance of the probability
    distribution.</p>
    <p ALIGN="left">&nbsp;</p>
  </font>
  <blockquote>
    <b><font FACE="Arial">
    <p align="left">Probability Mass Function</p>
    </blockquote>
    </font></b><i><font FACE="Times" SIZE="2">
  <p ALIGN="left">&nbsp;</p>
  <p ALIGN="center"><img border="0" src="../images/2.gif" width="480" height="445"></p>
  <p ALIGN="center">Figure 8</font></i><font FACE="Arial" SIZE="2">—</font><i><font FACE="Times" SIZE="2">2.
  The Binomial Distribution</p>
  </font></i>
</blockquote>
</blockquote>
<b><font FACE="Arial">
<p align="left">&nbsp;</p>
<p align="left">&nbsp;</p>
<p align="left">&nbsp;&nbsp; <font size="4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
3. Discrete Uniform</font></p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Syntax</p>
</font>
<blockquote>
  <blockquote>
    <blockquote>
      <blockquote>
        <i><font FACE="Arial" SIZE="4">
        <p ALIGN="left">Integer</font></i><font FACE="Arial" SIZE="4"> =
        DUNIFORM( <i>Stream</i>, <i>Min</i>, <i>Max </i>)</p>
        </blockquote>
      </font><font FACE="Arial">
      <p align="left">Arguments</p>
      </blockquote>
    </font><i><font FACE="Arial" SIZE="2">
    <p ALIGN="left">Stream</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
    random number generator entity number. Required. Coerced to integer. Must be
    greater than or equal to 1. The argument must be <i>Expression</i>.</p>
    <b><i>
    <p ALIGN="left">Min</i></b>-&nbsp;The smallest sample to be generated.
    Required. Coerced to integer. Must be less than or equal to <i>max</i>. The
    argument must be <i>Expression</i>.</p>
    <b><i>
    <p ALIGN="left">Max-</i></b>&nbsp;The largest sample to be generated.
    Required. Coerced to integer. Must be greater than or equal to <i>min</i>.
    The argument must be <i>Expression</i>.</p>
  </font>
  <blockquote>
    <b><font FACE="Arial">
    <p align="left">Return Value</p>
    </blockquote>
    </font><i><font FACE="Arial" SIZE="2">
    <p ALIGN="left">Integer</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
    integer value generated as a single instance of the probability
    distribution.</p>
    <p ALIGN="left">&nbsp;</p>
  </font>
  <blockquote>
    <b><font FACE="Arial">
    <p align="left">Probability Mass Function</p>
    </blockquote>
    </font></b><i><font FACE="Times" SIZE="2">
  <p ALIGN="left">&nbsp;</p>
  <p ALIGN="center"><img border="0" src="../images/3.gif" width="438" height="472"></p>
  <p ALIGN="center">Figure 8</font></i><font FACE="Arial" SIZE="2">—</font><i><font FACE="Times" SIZE="2">3.
  The Discrete Uniform Distribution</font></i></p>
  <p ALIGN="left">&nbsp;</p>
  <p ALIGN="left">&nbsp;</p>
  <p ALIGN="left">&nbsp;</p>
  <b><font FACE="Arial">
  <p align="left"><font face="Arial" size="4">4. Exponential</font></p>
  <p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Syntax</p>
  </font></b>
</blockquote>
</blockquote>
<b>
<blockquote>
  <blockquote>
    <blockquote>
      <blockquote>
        <i><font FACE="Arial" SIZE="4">
        <p ALIGN="left">Real</font></i><font FACE="Arial" SIZE="4"> =
        EXPONENTIAL( <i>Stream</i>, <i>Locate</i>, <i>Scale </i>)</p>
        </blockquote>
      </font><font FACE="Arial">
      <p align="left">Arguments</p>
      </blockquote>
    </font><i><font FACE="Arial" SIZE="2">
    <p ALIGN="left">Stream</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
    random number generator entity number. Required. Coerced to integer. Must be
    greater than or equal to 1. The argument must be <i>Expression</i>.</p>
    <b><i>
    <p ALIGN="left">Locate</i></b>&nbsp;-&nbsp;The shift value used to
    position the distribution. Required. Coerced to real. The argument must be <i>Expression</i>.</p>
    <b><i>
    <p ALIGN="left">Scale</i></b>&nbsp;-&nbsp;The compression value used to
    expand or contract the distribution. Must be strictly positive. Required.
    Coerced to real. The argument must be <i>Expression</i>.</p>
    <p ALIGN="left">&nbsp;</p>
  </font>
  <blockquote>
    <b><font FACE="Arial">
    <p align="left">Return Value</p>
    </blockquote>
    </font><i><font FACE="Arial" SIZE="2">
    <p ALIGN="left">Real</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
    real value generated as a single instance of the probability distribution.</p>
    <p ALIGN="left">&nbsp;</p>
  </font>
  <blockquote>
    <b><font FACE="Arial">
    <p align="left">Probability Density Function</p>
    </blockquote>
    </font></b><i><font FACE="Times" SIZE="2">
  <p ALIGN="left">&nbsp;</p>
  <p ALIGN="center"><img border="0" src="../images/4.gif" width="296" height="410"></p>
  <p ALIGN="center">Figure 8</font></i><font FACE="Arial" SIZE="2">—</font><i><font FACE="Times" SIZE="2">4.
  The Exponential Distribution
  </font></i></p>
  <p ALIGN="left">&nbsp;</p>
  <p ALIGN="left">&nbsp;</p>
  <blockquote>
    <b><font FACE="Arial">
    <p align="left">Notes</p>
    </blockquote>
    </font></b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">The Weibull Distribution degenerates to the Exponential
  when the <i>shape</i> argument is 1. That is, Weibull( <i>Stream, Locate,
  Scale</i>, 1 ) is distributed as Exponential( <i>Stream, Locate, Scale</i> ).</p>
  <p ALIGN="left">The Gamma Distribution degenerates to the Exponential when
  the <i>shape</i> argument is 1. That is, Gamma( <i>Stream, Locate, Scale</i>,
  1 ) is distributed as Exponential( <i>Stream, Locate, Scale</i> ).</p>
  <p ALIGN="left">&nbsp;</p>
  </font><b><font FACE="Arial" SIZE="4">
  <p align="left">&nbsp;</p>
  </font><font FACE="Arial">
  <p align="left"><font face="Arial" size="4">5. Extreme Value A</font></p>
  <p align="left">&nbsp;&nbsp;&nbsp; Syntax</p>
  </font></b>
</blockquote>
</blockquote>
<b>
<blockquote>
  <blockquote>
    <blockquote>
      <blockquote>
        <i><font FACE="Arial" SIZE="4">
        <p ALIGN="left">Real</font></i><font FACE="Arial" SIZE="4"> = EXTVALA(
        <i>Stream</i>, <i>Locate</i>, <i>Scale </i>)</p>
        </blockquote>
      </font><font FACE="Arial">
      <p align="left">Arguments</p>
      </blockquote>
    </font><i><font FACE="Arial" SIZE="2">
    <p ALIGN="left">Stream</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
    random number generator entity number. Required. Coerced to integer. Must be
    greater than or equal to 1. The argument must be <i>Expression</i>.</p>
    <b><i>
    <p ALIGN="left">Locate</i></b>&nbsp;-&nbsp;The shift value used to
    position the distribution. Required. Coerced to real. The argument must be <i>Expression</i>.</p>
    <b><i>
    <p ALIGN="left">Scale</i></b>&nbsp;-&nbsp;The compression value used to
    expand or contract the distribution. Must be strictly positive. Required.
    Coerced to real. The argument must be <i>Expression</i>.</p>
  </font>
  <blockquote>
    <b><font FACE="Arial">
    <p align="left">Return Value</p>
    </blockquote>
    </font><i><font FACE="Arial" SIZE="2">
    <p ALIGN="left">Real</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
    real value generated as a single instance of the probability distribution.</p>
    <p ALIGN="left">&nbsp;</p>
  </font>
  <blockquote>
    <b><font FACE="Arial">
    <p align="left">Probability Density Function</p>
    </blockquote>
    </font></b><i><font FACE="Times" SIZE="2">
  <p ALIGN="left">&nbsp;</p>
  <p ALIGN="center"><img border="0" src="../images/5.gif" width="381" height="304"></p>
  <p ALIGN="center">Figure 8</font></i><font FACE="Arial" SIZE="2">—</font><i><font FACE="Times" SIZE="2">5.
  The Extreme Value A Distribution</p>
  </font></i><font FACE="Arial" SIZE="2">
  <p ALIGN="left">&nbsp;</p>
  </font><b><font FACE="Arial" SIZE="4">
  <p align="left">&nbsp;</p>
  </font><font FACE="Arial">
  <p align="left"><font face="Arial" size="4">6. Extreme Value B</font></p>
  <p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Syntax</p>
  </font></b>
</blockquote>
</blockquote>
<b>
<blockquote>
  <blockquote>
    <blockquote>
      <blockquote>
        <i><font FACE="Arial" SIZE="4">
        <p ALIGN="left">Real</font></i><font FACE="Arial" SIZE="4"> = EXTVALB(
        <i>Stream</i>, <i>Locate</i>, <i>Scale </i>)</p>
        </blockquote>
      </font><font FACE="Arial">
      <p align="left">Arguments</p>
      </blockquote>
    </font><i><font FACE="Arial" SIZE="2">
    <p ALIGN="left">Stream</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
    random number generator entity number. Required. Coerced to integer. Must be
    greater than or equal to 1. The argument must be <i>Expression</i>.</p>
    <b><i>
    <p ALIGN="left">Locate</i></b>&nbsp;-&nbsp;The shift value used to
    position the distribution. Required. Coerced to real. The argument must be <i>Expression</i>.</p>
    <b><i>
    <p ALIGN="left">Scale</i></b>&nbsp;-&nbsp;The compression value used to
    expand or contract the distribution. Must be strictly positive. Required.
    Coerced to real. The argument must be <i>Expression</i>.</p>
    <p ALIGN="left">&nbsp;</p>
  </font>
  <blockquote>
    <b><font FACE="Arial">
    <p align="left">Return Value</p>
    </blockquote>
    </font><i><font FACE="Arial" SIZE="2">
    <p ALIGN="left">Real</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
    real value generated as a single instance of the probability distribution.</p>
    <p ALIGN="left">&nbsp;</p>
  </font>
  <blockquote>
    <b><font FACE="Arial">
    <p align="left">Probability Density Function</p>
    </blockquote>
    </font></b><i><font FACE="Times" SIZE="2">
  <p ALIGN="left">&nbsp;</p>
  <p ALIGN="center"><img border="0" src="../images/6.gif" width="370" height="288"></p>
  <p ALIGN="center">Figure 8</font></i><font FACE="Arial" SIZE="2">—</font><i><font FACE="Times" SIZE="2">6.
  The Extreme Value B Distribution</font></i></p>
  <p ALIGN="left">&nbsp;</p>
  <p ALIGN="left">&nbsp;</p>
  <b><font FACE="Arial">
  <p align="left"><font face="Arial" size="4">7. Gamma</font></p>
  <p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Syntax</p>
  </font></b>
</blockquote>
</blockquote>
<b>
<blockquote>
  <blockquote>
    <blockquote>
      <blockquote>
        <i><font FACE="Arial" SIZE="4">
        <p ALIGN="left">Real</font></i><font FACE="Arial" SIZE="4"> = GAMMA( <i>Stream</i>,
        <i>Locate</i>, <i>Scale</i>, <i>Shape </i>)</p>
        </blockquote>
      </font><font FACE="Arial">
      <p align="left">Arguments</p>
      </blockquote>
    </font><i><font FACE="Arial" SIZE="2">
    <p ALIGN="left">Stream</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
    random number generator entity number. Required. Coerced to integer. Must be
    greater than or equal to 1. The argument must be <i>Expression</i>.</p>
    <b><i>
    <p ALIGN="left">Locate</i></b>&nbsp;-&nbsp;The shift value used to
    position the distribution. Required. Coerced to real. The argument must be <i>Expression</i>.</p>
    <b><i>
    <p ALIGN="left">Scale</i></b>&nbsp;-&nbsp;The compression value used to
    expand or contract the distribution. Must be strictly positive. Required.
    Coerced to real. The argument must be <i>Expression</i>.</p>
    <b><i>
    <p ALIGN="left">Shape</i></b>&nbsp;-&nbsp;The selection value used to
    choose from a family of shapes. Required. Coerced to real. Must be strictly
    positive. The argument must be <i>Expression</i>.</p>
    <p ALIGN="left">&nbsp;</p>
  </font>
  <blockquote>
    <b><font FACE="Arial">
    <p align="left">Return Value</p>
    </blockquote>
    </font><i><font FACE="Arial" SIZE="2">
    <p ALIGN="left">Real</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
    real value generated as a single instance of the probability distribution.</p>
  </font><b><font FACE="Arial">
  <blockquote>
    <p align="left">Probability Density Function</p>
  </blockquote>
  </font></b><i><font FACE="Times" SIZE="2">
  <p ALIGN="left">&nbsp;</p>
  <p ALIGN="center"><img border="0" src="../images/7.gif" width="561" height="583"></p>
  <p ALIGN="center">Figure 8</font></i><font FACE="Arial" SIZE="2">—</font><i><font FACE="Times" SIZE="2">7.
  The Gamma Distribution
  </font></i></p>
  <p ALIGN="left">&nbsp;</p>
  <p ALIGN="left">&nbsp;</p>
  <b><font FACE="Arial">
  <blockquote>
    <p align="left">Notes</p>
  </blockquote>
  </font></b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">The Gamma Distribution degenerates to the Exponential when
  the <i>shape</i> argument is 1. That is, Gamma( <i>Stream, Locate, Scale</i>,
  1 ) is distributed as Exponential( <i>Stream, Locate, Shape</i> ).</p>
  <p ALIGN="left">For positive integer <i>m</i>, Gamma( <i>Stream</i>, 0, <i>Scale,
  m</i> ) is distributed as the m-Erlang(<i>Scale</i>) distribution.</p>
  <p ALIGN="left">&nbsp;</p>
  </font><b><font FACE="Arial" SIZE="4">
  <p align="left">&nbsp;</p>
  </font><font FACE="Arial">
  <p align="left"><font size="4">8. Geometric</font></p>
  <p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Syntax</p>
  </font></b>
</blockquote>
</blockquote>
<b>
<blockquote>
  <blockquote>
    <blockquote>
      <blockquote>
        <i><font FACE="Arial" SIZE="4">
        <p ALIGN="left">Integer</font></i><font FACE="Arial" SIZE="4"> =
        GEOMETRIC(<i>Stream</i>, <i>Probability</i>)</p>
        </blockquote>
      </font><font FACE="Arial">
      <p align="left">Arguments</p>
      </blockquote>
    </font><i><font FACE="Arial" SIZE="2">
    <p ALIGN="left">Stream</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
    random number generator entity number. Required. Coerced to integer. Must be
    greater than or equal to 1. The argument must be <i>Expression</i>.</p>
    <b><i>
    <p ALIGN="left">Probability</i></b>&nbsp;-&nbsp;The probability of
    success in each Bernoulli trial. Must be between 0 and 1. Required. Coerced
    to real. The argument must be <i>Expression</i>.</p>
    <p ALIGN="left">&nbsp;</p>
  </font>
  <blockquote>
    <b><font FACE="Arial">
    <p align="left">Return Value</p>
    </blockquote>
    </font><i><font FACE="Arial" SIZE="2">
    <p ALIGN="left">Integer</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
    integer value generated as a single instance of the probability
    distribution.</p>
    <p ALIGN="left">&nbsp;</p>
  </font>
  <blockquote>
    <b><font FACE="Arial">
    <p align="left">Probability Mass Function</p>
    </blockquote>
    </font></b><i><font FACE="Times" SIZE="2">
  <p ALIGN="left">&nbsp;</p>
  <p ALIGN="center"><img border="0" src="../images/8.gif" width="359" height="331"></p>
  <p ALIGN="center">Figure 8</font></i><font FACE="Arial" SIZE="2">—</font><i><font FACE="Times" SIZE="2">8.
  The Geometric Distribution</font></i></p>
  <p ALIGN="left">&nbsp;</p>
  <p ALIGN="left">&nbsp;</p>
  <font FACE="Arial" SIZE="2">
  </blockquote>
</blockquote>
</font><b><font FACE="Arial">
<p align="left"><font face="Arial" size="4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
9. Inverse Gaussian</font></p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Syntax</p>
<blockquote>
  <blockquote>
    <blockquote>
    </font><i><font FACE="Arial" SIZE="4">
    <p align="left">Real</font></i><font FACE="Arial" SIZE="4"> = INVGAUSS(<i>Stream</i>,<i>Locate</i>,<i>Scale</i>,<i>Shape
    </i>)</p>
    </font><font FACE="Arial">
    <p align="left">Arguments</p>
    </blockquote>
  </font><i><font FACE="Arial" SIZE="2">
  <p ALIGN="left">Stream</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
  random number generator entity number. Required. Coerced to integer. Must be
  greater than or equal to 1. The argument must be <i>Expression</i>.</p>
  <b><i>
  <p ALIGN="left">Locate</i></b>&nbsp;-&nbsp;The shift value used to position
  the distribution. Required. Coerced to real. The argument must be <i>Expression</i>.</p>
  <b><i>
  <p ALIGN="left">Scale</i></b>&nbsp;-&nbsp;The compression value used to
  expand or contract the distribution. Must be strictly positive. Required.
  Coerced to real. The argument must be <i>Expression</i>.</p>
  <b><i>
  <p ALIGN="left">Shape</i></b>&nbsp;-&nbsp;The selection value used to
  choose from a family of shapes. Required. Coerced to real. Must be strictly
  positive. The argument must be <i>Expression</i>.</p>
</font>
<blockquote>
  <b><font FACE="Arial">
  <p align="left">Return Value</p>
  </blockquote>
  </font><i><font FACE="Arial" SIZE="2">
  <p ALIGN="left">Real</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
  real value generated as a single instance of the probability distribution.</p>
</font>
<blockquote>
  <b><font FACE="Arial">
  <p align="left">Probability Density Function</p>
  </blockquote>
  </font></b><i><font FACE="Times" SIZE="2">
<p ALIGN="left">&nbsp;</p>
<p ALIGN="center"><img border="0" src="../images/9.gif" width="432" height="313"></p>
<p ALIGN="center">Figure 8</font></i><font FACE="Arial" SIZE="2">—</font><i><font FACE="Times" SIZE="2">9.
The Inverse Gaussian Distribution</font></i></p>
<p ALIGN="left">&nbsp;</p>
<p ALIGN="left">&nbsp;</p>
<b><font FACE="Arial">
<p align="left"><font face="Arial" size="4">10. Inverse Weibull</font></p>
<p align="left">&nbsp;&nbsp;&nbsp; Syntax</p>
</font></b>
</blockquote>
</blockquote>
<b>
<blockquote>
  <blockquote>
    <i><font FACE="Arial" SIZE="4">
    <p align="left">Real</font></i><font FACE="Arial" SIZE="4"> = INVWEIBULL( <i>Stream</i>, <i>Locate</i>,
    <i>Scale</i>, <i>Shape </i>)</p>
    </font>
    <blockquote>
      <font FACE="Arial">
      <p align="left">Arguments</p>
      </blockquote>
    </font><i><font FACE="Arial" SIZE="2">
    <p ALIGN="left">Stream</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
    random number generator entity number. Required. Coerced to integer. Must be
    greater than or equal to 1. The argument must be <i>Expression</i>.</p>
    <b><i>
    <p ALIGN="left">Locate</i></b>&nbsp;-&nbsp;The shift value used to
    position the distribution. Required. Coerced to real. The argument must be <i>Expression</i>.</p>
    <b><i>
    <p ALIGN="left">Scale</i></b>&nbsp;-&nbsp;The compression value used to
    expand or contract the distribution. Must be strictly positive. Required.
    Coerced to real. The argument must be <i>Expression</i>.</p>
    <b><i>
    <p ALIGN="left">Shape</i></b>&nbsp;-&nbsp;The selection value used to
    choose from a family of shapes. Required. Coerced to real. Must be strictly
    positive. The argument must be <i>Expression</i>.</p>
    <p ALIGN="left">&nbsp;</p>
  </font>
  <blockquote>
    <b><font FACE="Arial">
    <p align="left">Return Value</p>
    </blockquote>
    </font><i><font FACE="Arial" SIZE="2">
    <p ALIGN="left">Real</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
    real value generated as a single instance of the probability distribution.</p>
    <p ALIGN="left">&nbsp;</p>
  </font>
  <blockquote>
    <b><font FACE="Arial">
    <p align="left">Probability Density Function</p>
    </blockquote>
    </font></b><i><font FACE="Times" SIZE="2">
  <p ALIGN="left">&nbsp;</p>
  <p ALIGN="center"><img border="0" src="../images/10.gif" width="545" height="297"></p>
  <p ALIGN="center">Figure 8</font></i><font FACE="Arial" SIZE="2">—</font><i><font FACE="Times" SIZE="2">10.
  The Inverse Weibull Distribution</font></i></p>
  <p ALIGN="left">&nbsp;</p>
  <p ALIGN="left">&nbsp;</p>
</blockquote>
</blockquote>
<b><font FACE="Arial">
<p align="left"><font face="Arial" size="4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
11. Laplace</font></p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Syntax</p>
</font>
<blockquote>
  <blockquote>
    <blockquote>
      <blockquote>
        <i><font FACE="Arial" SIZE="4">
        <p ALIGN="left">Real</font></i><font FACE="Arial" SIZE="4"> = LAPLACE(
        <i>Stream</i>, <i>Locate</i>, <i>Scale </i>)</p>
        </blockquote>
      </font><font FACE="Arial">
      <p align="left">Arguments</p>
      </blockquote>
    </font><i><font FACE="Arial" SIZE="2">
    <p ALIGN="left">Stream</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
    random number generator entity number. Required. Coerced to integer. Must be
    greater than or equal to 1. The argument must be <i>Expression</i>.</p>
    <b><i>
    <p ALIGN="left">Locate</i></b>&nbsp;-&nbsp;The shift value used to
    position the distribution. Required. Coerced to real. The argument must be <i>Expression</i>.</p>
    <b><i>
    <p ALIGN="left">Scale</i></b>&nbsp;-&nbsp;The compression value used to
    expand or contract the distribution. Must be strictly positive. Required.
    Coerced to real. The argument must be <i>Expression</i>.</p>
    <p ALIGN="left">&nbsp;</p>
  </font>
  <blockquote>
    <b><font FACE="Arial">
    <p align="left">Return Value</p>
    </blockquote>
    </font><i><font FACE="Arial" SIZE="2">
    <p ALIGN="left">Real</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
    real value generated as a single instance of the probability distribution.</p>
    <p ALIGN="left">&nbsp;</p>
  </font>
  <blockquote>
    <b><font FACE="Arial">
    <p align="left">Probability Density Function</p>
    </blockquote>
    </font></b><i><font FACE="Times" SIZE="2">
  <p ALIGN="left">&nbsp;</p>
  <p ALIGN="center"><img border="0" src="../images/11.gif" width="216" height="287"></p>
  <p ALIGN="center">Figure 8</font></i><font FACE="Arial" SIZE="2">—</font><i><font FACE="Times" SIZE="2">11.
  The Laplace Distribution</p>
  </font></i><font FACE="Arial" SIZE="2">
  <p align="left">&nbsp;</p>
  <p align="left">&nbsp;</p>
  </blockquote>
</blockquote>
</font><b><font FACE="Arial">
<p align="left"><font face="Arial" size="4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
12. Logistic</font></p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Syntax</p>
<blockquote>
  <blockquote>
    <blockquote>
      <blockquote>
      </font><i><font FACE="Arial" SIZE="4">
      <p ALIGN="left">Real</font></i><font FACE="Arial" SIZE="4"> = LOGISTIC( <i>Stream</i>,
      <i>Locate</i>, <i>Scale </i>)</p>
      </blockquote>
    </font><font FACE="Arial">
    <p align="left">Arguments</p>
    </blockquote>
  </font><i><font FACE="Arial" SIZE="2">
  <p ALIGN="left">Stream</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
  random number generator entity number. Required. Coerced to integer. Must be
  greater than or equal to 1. The argument must be <i>Expression</i>.</p>
  <b><i>
  <p ALIGN="left">Locate</i></b>&nbsp;-&nbsp;The shift value used to position
  the distribution. Required. Coerced to real. The argument must be <i>Expression</i>.</p>
  <b><i>
  <p ALIGN="left">Scale</i></b>&nbsp;-&nbsp;The compression value used to
  expand or contract the distribution. Must be strictly positive. Required.
  Coerced to real. The argument must be <i>Expression</i>.</p>
  <p ALIGN="left">&nbsp;</p>
</font>
<blockquote>
  <b><font FACE="Arial">
  <p align="left">Return Value</p>
  </blockquote>
  </font><i><font FACE="Arial" SIZE="2">
  <p ALIGN="left">Real</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
  real value generated as a single instance of the probability distribution.</p>
  <p ALIGN="left">&nbsp;</p>
</font>
<blockquote>
  <b><font FACE="Arial">
  <p align="left">Probability Density Function</p>
  </blockquote>
  </font></b><i><font FACE="Times" SIZE="2">
<p ALIGN="left">&nbsp;</p>
<p ALIGN="center"><img border="0" src="../images/12.gif" width="264" height="364"></p>
<p ALIGN="center">Figure 8</font></i><font FACE="Arial" SIZE="2">—</font><i><font FACE="Times" SIZE="2">12.
The Logistic Distribution</p>
</font></i><b><font FACE="Arial" SIZE="4">
<p align="left">&nbsp;</p>
</font></b>
</blockquote>
</blockquote>
<b><font FACE="Arial">
<p align="left"><font face="Arial" size="4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
13. LogLaplace</font></p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Syntax</p>
</font>
<blockquote>
  <blockquote>
    <i><font FACE="Arial" SIZE="4">
    <p ALIGN="left">Real</font></i><font FACE="Arial" SIZE="4"> = LOGLAPLACE( <i>Stream</i>,
    <i>Locate</i>, <i>Scale</i>, <i>Shape </i>)</p>
    </font>
    <blockquote>
      <font FACE="Arial">
      <p align="left">Arguments</p>
      </blockquote>
    </font><i><font FACE="Arial" SIZE="2">
    <p ALIGN="left">Stream</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
    random number generator entity number. Required. Coerced to integer. Must be
    greater than or equal to 1. The argument must be <i>Expression</i>.</p>
    <b><i>
    <p ALIGN="left">Locate</i></b>&nbsp;-&nbsp;The shift value used to
    position the distribution. Required. Coerced to real. The argument must be <i>Expression</i>.</p>
    <b><i>
    <p ALIGN="left">Scale</i></b>&nbsp;-&nbsp;The compression value used to
    expand or contract the distribution. Must be strictly positive. Required.
    Coerced to real. The argument must be <i>Expression</i>.</p>
    <b><i>
    <p ALIGN="left">Shape</i></b>&nbsp;-&nbsp;The selection value used to
    choose from a family of shapes. Required. Coerced to real. Must be strictly
    positive. The argument must be <i>Expression</i>.</p>
  </font>
  <blockquote>
    <b><font FACE="Arial">
    <p align="left">Return Value</p>
    </blockquote>
    </font><i><font FACE="Arial" SIZE="2">
    <p ALIGN="left">Real</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
    real value generated as a single instance of the probability distribution.</p>
    <p ALIGN="left">&nbsp;</p>
  </font>
  <p ALIGN="left">&nbsp;</p>
  <p ALIGN="left">&nbsp;</p>
  <b><font FACE="Arial">
  <p align="left"><font face="Arial" size="4">14. LogLogistic</font></p>
  <p align="left">&nbsp;&nbsp;&nbsp;&nbsp; Syntax</p>
  </font></b>
</blockquote>
</blockquote>
<b>
<blockquote>
  <blockquote>
    <i><font FACE="Arial" SIZE="4">
    <p ALIGN="left">Real</font></i><font FACE="Arial" SIZE="4"> = LOGLOGIS( <i>Stream</i>,
    <i>Locate</i>, <i>Scale</i>, <i>Shape </i>)</p>
    </font>
    <blockquote>
      <font FACE="Arial">
      <p align="left">Arguments</p>
      </blockquote>
    </font><i><font FACE="Arial" SIZE="2">
    <p ALIGN="left">Stream</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
    random number generator entity number. Required. Coerced to integer. Must be
    greater than or equal to 1. The argument must be <i>Expression</i>.</p>
    <b><i>
    <p ALIGN="left">Locate</i></b>&nbsp;-&nbsp;The shift value used to
    position the distribution. Required. Coerced to real. The argument must be <i>Expression</i>.</p>
    <b><i>
    <p ALIGN="left">Scale</i></b>&nbsp;-&nbsp;The compression value used to
    expand or contract the distribution. Must be strictly positive. Required.
    Coerced to real. The argument must be <i>Expression</i>.</p>
    <b><i>
    <p ALIGN="left">Shape</i></b>&nbsp;-&nbsp;The selection value used to
    choose from a family of shapes. Required. Coerced to real. Must be strictly
    positive. The argument must be <i>Expression</i>.</p>
  </font>
  <blockquote>
    <b><font FACE="Arial">
    <p align="left">Return Value</p>
    </blockquote>
    </font><i><font FACE="Arial" SIZE="2">
    <p ALIGN="left">Real</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
    real value generated as a single instance of the probability distribution.</p>
  </font>
  <blockquote>
    <b><font FACE="Arial">
    <p align="left">&nbsp;</p>
    </blockquote>
    </font></b>
  </blockquote>
</blockquote>
  <b><font FACE="Arial">
  <p align="left"><font face="Arial" size="4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  15. LogNormal</font></p>
  <p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp; Syntax</p>
  </font>
  <blockquote>
    <blockquote>
      <i><font FACE="Arial" SIZE="4">
      <p ALIGN="left">Real</font></i><font FACE="Arial" SIZE="4"> = LOGNORMAL( <i>Stream</i>,
      <i>Locate</i>, <i>Scale</i>, <i>Shape </i>)</p>
      </font>
      <blockquote>
        <font FACE="Arial">
        <p align="left">Arguments</p>
        </blockquote>
      </font><i><font FACE="Arial" SIZE="2">
      <p ALIGN="left">Stream</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
  random number generator entity number. Required. Coerced to integer. Must be
  greater than or equal to 1. The argument must be <i>Expression</i>.</p>
      <b><i>
      <p ALIGN="left">Locate</i></b>&nbsp;-&nbsp;The shift value used to position
  the distribution. Required. Coerced to real. The argument must be <i>Expression</i>.</p>
      <b><i>
      <p ALIGN="left">Scale</i></b>&nbsp;-&nbsp;The compression value used to
  expand or contract the distribution. Required. Coerced to real. The argument
  must be <i>Expression</i>.</p>
      <b><i>
      <p ALIGN="left">Shape</i></b>&nbsp;-&nbsp;The selection value used to
  choose from a family of shapes. Required. Coerced to real. Must be strictly
  positive. The argument must be <i>Expression</i>.</p>
      <p ALIGN="left">&nbsp;</p>
    </font>
    <blockquote>
      <b><font FACE="Arial">
      <p align="left">Return Value</p>
      </blockquote>
      </font><i><font FACE="Arial" SIZE="2">
      <p ALIGN="left">Real</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
  real value generated as a single instance of the probability distribution.</p>
    </font><b><font FACE="Arial">
    <blockquote>
      <p align="left">Probability Density Function</p>
    </blockquote>
    </font></b><i><font FACE="Times" SIZE="2">
    <p ALIGN="left">&nbsp;</p>
    <p ALIGN="center"><img border="0" src="../images/15.gif" width="520" height="535"></p>
    <p ALIGN="center">Figure 8</font></i><font FACE="Arial" SIZE="2">—</font><i><font FACE="Times" SIZE="2">15.
The Lognormal Distribution</p>
    </font></i><b><font FACE="Arial" SIZE="4">
    <p align="left">&nbsp;</p>
    </font><font FACE="Arial">
    <p align="left"><font face="Arial" size="4">16. Negative Binomial</font></p>
    <p align="left">&nbsp;&nbsp;&nbsp;&nbsp; Syntax</p>
    </font></b>
  </blockquote>
</blockquote>
  <b><i><font FACE="Arial" SIZE="4">
  <p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Integer</font></i><font FACE="Arial" SIZE="4"> = NEGBINOM( <i>Stream</i>,<i>SuccessCount,Probability)</p>
  <blockquote>
    <blockquote>
      <blockquote>
      </i></font><font FACE="Arial">
    <p align="left">Arguments</p>
    </blockquote>
  </font><i><font FACE="Arial" SIZE="2">
  <p ALIGN="left">Stream</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
random number generator entity number. Required. Coerced to integer. Must be
greater than or equal to 1. The argument must be <i>Expression</i>.</p>
  <b><i>
  <p ALIGN="left">&nbsp;</p>
  <p ALIGN="left">SuccessCount</i></b>&nbsp;-&nbsp;The number of successful
Bernoulli trials required before returning the failure count. Required. Coerced
to integer. Must be strictly positive. The argument must be <i>Expression</i>.</p>
  <b><i>
  <p ALIGN="left">Probability </i></b>-&nbsp;The success probability of a
Bernoulli trial. Must be between 0 and 1. Required. Coerced to real. The
argument must be <i>Expression</i>.</p>
  <p ALIGN="left">&nbsp;</p>
  </font>
  <blockquote>
    <b><font FACE="Arial">
    <p align="left">Return Value</p>
    </blockquote>
    </font><i><font FACE="Arial" SIZE="2">
    <p ALIGN="left">Integer</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
  integer value generated as a single instance of the probability distribution.</p>
    <p ALIGN="left">&nbsp;</p>
  </font>
  <blockquote>
    <b><font FACE="Arial">
    <p align="left">Probability Mass Function</p>
    </blockquote>
    </font></b><i><font FACE="Times" SIZE="2">
  <p ALIGN="left">&nbsp;</p>
  <p ALIGN="center"><img border="0" src="../images/16.gif" width="464" height="465"></p>
  <p ALIGN="center">Figure 8</font></i><font FACE="Arial" SIZE="2">—</font><i><font FACE="Times" SIZE="2">16.
The Negative Binomial Distribution</p>
  </font></i><font FACE="Arial" SIZE="2">
  <p align="left">&nbsp;</p>
  <blockquote>
  </font><b><font FACE="Arial">
  <p align="left">Notes</p>
  </blockquote>
  </font></b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">The Negative Binomial Distribution degenerates to the
Geometric when the <i>SuccessCount</i> argument is 1. That is, NegBinom( <i>Stream,
  </i>1<i>, Probability</i> ) is distributed as Geometric( <i>Stream, Probability </i>).</p>
  </font><b><font FACE="Arial" SIZE="4">
  <p align="left">&nbsp;</p>
  </font></b>
  </blockquote>
</blockquote>
  <b><font FACE="Arial">
  <p align="left"><font face="Arial" size="4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  17. Normal</font></p>
  <p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp; Syntax</p>
  </font>
  <blockquote>
    <blockquote>
      <blockquote>
        <blockquote>
          <i><font FACE="Arial" SIZE="4">
          <p ALIGN="left">Real</font></i><font FACE="Arial" SIZE="4"> = NORMAL( <i>Stream</i>,
          <i>Mean</i>, <i>StdDev </i>)</p>
          </blockquote>
        </font><font FACE="Arial">
        <p align="left">Arguments</p>
        </blockquote>
      </font><i><font FACE="Arial" SIZE="2">
      <p ALIGN="left">Stream</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
  random number generator entity number. Required. Coerced to integer. Must be
  greater than or equal to 1. The argument must be <i>Expression</i>.</p>
      <b><i>
      <p ALIGN="left">Mean</i></b>&nbsp;-&nbsp;The mean value of the
  distribution. Required. Coerced to real. The argument must be <i>Expression</i>.</p>
      <b><i>
      <p ALIGN="left">StdDev</i></b>&nbsp;-&nbsp;The standard deviation of the
  distribution. Must be strictly positive. Required. Coerced to real. The
  argument must be <i>Expression</i>.</p>
      <p ALIGN="left">&nbsp;</p>
    </font>
    <blockquote>
      <b><font FACE="Arial">
      <p align="left">Return Value</p>
      </blockquote>
      </font><i><font FACE="Arial" SIZE="2">
      <p ALIGN="left">Real</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
  real value generated as a single instance of the probability distribution.</p>
    </font><b><font FACE="Arial">
    <blockquote>
      <p align="left">Probability Density Function</p>
    </blockquote>
    </font></b><i><font FACE="Times" SIZE="2">
    <p ALIGN="left">&nbsp;</p>
    <p ALIGN="center"><img border="0" src="../images/17.gif" width="262" height="378"></p>
    <p ALIGN="center">Figure 8</font></i><font FACE="Arial" SIZE="2">—</font><i><font FACE="Times" SIZE="2">17.
The Normal Distribution
    </font></i></p>
    <p ALIGN="left">&nbsp;</p>
    <p ALIGN="left">&nbsp;</p>
  </blockquote>
</blockquote>
  <b><font FACE="Arial">
  <p align="left"><font face="Arial" size="4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  18. Pareto</font></p>
  <p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp; Syntax</p>
  </font>
  <blockquote>
    <blockquote>
      <blockquote>
        <blockquote>
          <i><font FACE="Arial" SIZE="4">
          <p ALIGN="left">Real</font></i><font FACE="Arial" SIZE="4"> = PARETO( <i>Stream</i>,
          <i>Locate</i>, <i>Scale</i> )</p>
          </blockquote>
        </font><font FACE="Arial">
        <p align="left">Arguments</p>
        </blockquote>
      </font><i><font FACE="Arial" SIZE="2">
      <p ALIGN="left">Stream</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
  random number generator entity number. Required. Coerced to integer. Must be
  greater than or equal to 1. The argument must be <i>Expression</i>.</p>
      <b><i>
      <p ALIGN="left">Locate</i></b>&nbsp;-&nbsp;The shift value used to position
  the distribution. Must be strictly positive. Required. Coerced to real. The
  argument must be <i>Expression</i>.</p>
      <b><i>
      <p ALIGN="left">Scale</i></b>&nbsp;-&nbsp;The compression value used to
  expand or contract the distribution. Must be strictly positive. Required.
  Coerced to real. The argument must be <i>Expression</i>.</p>
    </font>
    <blockquote>
      <b><font FACE="Arial">
      <p align="left">Return Value</p>
      </blockquote>
      </font><i><font FACE="Arial" SIZE="2">
      <p ALIGN="left">Real</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
  real value generated as a single instance of the probability distribution.</p>
      <p ALIGN="left">&nbsp;</p>
    </font>
    <blockquote>
      <b><font FACE="Arial">
      <p align="left">Probability Density Function</p>
      </blockquote>
      </font></b><i><font FACE="Times" SIZE="2">
    <p ALIGN="left">&nbsp;</p>
    <p ALIGN="center"><img border="0" src="../images/18.gif" width="355" height="440"></p>
    <p ALIGN="center">Figure 8</font></i><font FACE="Arial" SIZE="2">—</font><i><font FACE="Times" SIZE="2">18.
The Pareto Distribution
    </font></i></p>
    <p ALIGN="left">&nbsp;</p>
  </blockquote>
</blockquote>
  <b><font FACE="Arial">
  <p align="left"><font face="Arial" size="4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  19. Pearson Type V</font></p>
  <p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp; Syntax</p>
  </font>
  <blockquote>
    <blockquote>
      <i><font FACE="Arial" SIZE="4">
      <p ALIGN="left">Real</font></i><font FACE="Arial" SIZE="4"> = PEARSON5( <i>Stream</i>,
      <i>Locate</i>, <i>Scale</i>, <i>Shape </i>)</p>
      </font>
      <blockquote>
        <font FACE="Arial">
        <p align="left">Arguments</p>
        </blockquote>
      </font><i><font FACE="Arial" SIZE="2">
      <p ALIGN="left">Stream</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
  random number generator entity number. Required. Coerced to integer. Must be
  greater than or equal to 1. The argument must be <i>Expression</i>.</p>
      <b><i>
      <p ALIGN="left">Locate</i></b>&nbsp;-&nbsp;The shift value used to position
  the distribution. Required. Coerced to real. The argument must be <i>Expression</i>.</p>
      <b><i>
      <p ALIGN="left">Scale</i></b>&nbsp;-&nbsp;The compression value used to
  expand or contract the distribution. Must be strictly positive. Required.
  Coerced to real. The argument must be <i>Expression</i>.</p>
      <b><i>
      <p ALIGN="left">Shape</i></b>&nbsp;-&nbsp;The selection value used to
  choose from a family of shapes. Required. Coerced to real. Must be strictly
  positive. The argument must be <i>Expression</i>.</p>
    </font>
    <blockquote>
      <b><font FACE="Arial">
      <p align="left">Return Value</p>
      </blockquote>
      </font><i><font FACE="Arial" SIZE="2">
      <p ALIGN="left">Real</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
  real value generated as a single instance of the probability distribution.</p>
    </font>
    <blockquote>
      <b><font FACE="Arial">
      <p align="left">Probability Density Function</p>
      </blockquote>
      </font></b><i><font FACE="Times" SIZE="2">
    <p ALIGN="left">&nbsp;</p>
    <p ALIGN="center"><img border="0" src="../images/19.gif" width="417" height="504"></p>
    <p ALIGN="center">Figure 8</font></i><font FACE="Arial" SIZE="2">—</font><i><font FACE="Times" SIZE="2">19.
The Pearson Type V Distribution
    </font></i></p>
    <p ALIGN="left">&nbsp;</p>
  </blockquote>
</blockquote>
  <b><font FACE="Arial">
  <p align="left"><font face="Arial" size="4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  20. Pearson Type VI</font></p>
  <p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp; Syntax</p>
  </font>
  <blockquote>
    <blockquote>
      <i><font FACE="Arial" SIZE="4">
      <p align="left">Real</font></i><font FACE="Arial" SIZE="4"> = </font><font FACE="Arial">PEARSON6(
      <i>Stream, Locate, Scale, Shape1, Shape2 </i>)</p>
      <blockquote>
        <p align="left">Arguments</p>
      </blockquote>
      </font><i><font FACE="Arial" SIZE="2">
      <p ALIGN="left">Stream</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
  random number generator entity number. Required. Coerced to integer. Must be
  greater than or equal to 1. The argument must be <i>Expression</i>.</p>
      <b><i>
      <p ALIGN="left">Locate</i></b>&nbsp;-&nbsp;The shift value used to position
  the distribution. Required. Coerced to real. The argument must be <i>Expression</i>.</p>
      <b><i>
      <p ALIGN="left">Scale</i></b>&nbsp;-&nbsp;The compression value used to
  expand or contract the distribution. Must be strictly positive. Required.
  Coerced to real. The argument must be <i>Expression</i>.</p>
      <b><i>
      <p ALIGN="left">Shape1</i></b>&nbsp;-&nbsp;The first selection value used
  to choose from a family of shapes. Required. Coerced to real. Must be strictly
  positive. The argument must be <i>Expression</i>.</p>
      <b><i>
      <p ALIGN="left">Shape2</i></b>&nbsp;-&nbsp;The second selection value used
  to choose from a family of shapes. Required. Coerced to real. Must be strictly
  positive. The argument must be <i>Expression</i>.</p>
      <p ALIGN="left">&nbsp;</p>
    </font>
    <blockquote>
      <b><font FACE="Arial">
      <p align="left">Return Value</p>
      </blockquote>
      </font><i><font FACE="Arial" SIZE="2">
      <p ALIGN="left">Real</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
  real value generated as a single instance of the probability distribution.</p>
      <p ALIGN="left">&nbsp;</p>
    </font><b><font FACE="Arial">
    <p align="left">&nbsp;</p>
    <blockquote>
      <p align="left">Probability Density Function</p>
    </blockquote>
    </font></b><i><font FACE="Times" SIZE="2">
    <p ALIGN="left">&nbsp;</p>
    <p ALIGN="center"><img border="0" src="../images/20.gif" width="447" height="436"></p>
    <p ALIGN="center">Figure 8</font></i><font FACE="Arial" SIZE="2">—</font><i><font FACE="Times" SIZE="2">20.
The Pearson Type VI Distribution</p>
    </font></i><b><font FACE="Arial" SIZE="4">
    <p align="left">&nbsp;</p>
    </font></b>
  </blockquote>
</blockquote>
  <b><font FACE="Arial">
  <p align="left"><font face="Arial" size="4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  21. Poisson</font></p>
  <p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp; Syntax</p>
  </font>
  <blockquote>
    <blockquote>
      <blockquote>
        <blockquote>
          <i><font FACE="Arial" SIZE="4">
          <p ALIGN="left">Integer</font></i><font FACE="Arial" SIZE="4"> =
      POISSON( <i>Stream</i>, <i>Mean </i>)</p>
          </blockquote>
        </font><font FACE="Arial">
        <p align="left">Arguments</p>
        </blockquote>
      </font><i><font FACE="Arial" SIZE="2">
      <p ALIGN="left">Stream</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
  random number generator entity number. Required. Coerced to integer. Must be
  greater than or equal to 1. The argument must be <i>Expression</i>.</p>
      <b><i>
      <p ALIGN="left">Mean</i></b>&nbsp;-&nbsp;The mean number of events to
  occur. Required. Must be strictly positive. Coerced to real. The argument must
  be <i>Expression</i>.</p>
      <p ALIGN="left">&nbsp;</p>
    </font>
    <blockquote>
      <b><font FACE="Arial">
      <p align="left">Return Value</p>
      </blockquote>
      </font><i><font FACE="Arial" SIZE="2">
      <p ALIGN="left">Integer</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
  integer value generated as a single instance of the probability distribution.</p>
      <p ALIGN="left">&nbsp;</p>
    </font>
    <blockquote>
      <b><font FACE="Arial">
      <p align="left">Probability Mass Function</p>
      </blockquote>
      </font></b><i><font FACE="Times" SIZE="2">
    <p ALIGN="left">&nbsp;</p>
    <p ALIGN="center"><img border="0" src="../images/21.gif" width="321" height="274"></p>
    <p ALIGN="center">Figure 8</font></i><font FACE="Arial" SIZE="2">—</font><i><font FACE="Times" SIZE="2">21.
The Poisson Distribution</p>
    </font></i><b><font FACE="Arial" SIZE="4">
    <p align="left">&nbsp;</p>
    </font></b>
  </blockquote>
</blockquote>
  <b><font FACE="Arial">
  <p align="left"><font face="Arial" size="4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  22. Triangular</font></p>
  <p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp; Syntax</p>
  </font>
  <blockquote>
    <blockquote>
      <i><font FACE="Arial" SIZE="4">
      <p ALIGN="left">Real</font></i><font FACE="Arial" SIZE="4"> = TRIANGULAR( <i>Stream</i>,
      <i>Min, Max, Mode </i>)</p>
      </font>
      <blockquote>
        <font FACE="Arial">
        <p align="left">Arguments</p>
        </blockquote>
      </font><i><font FACE="Arial" SIZE="2">
      <p ALIGN="left">Stream</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
  random number generator entity number. Required. Coerced to integer. Must be
  greater than or equal to 1. The argument must be <i>Expression</i>.</p>
      <b><i>
      <p ALIGN="left">Locate</i></b>&nbsp;-&nbsp;The shift value used to position
  the distribution. Required. Coerced to real. The argument must be <i>Expression</i>.</p>
      <b><i>
      <p ALIGN="left">Min</i></b>&nbsp;-&nbsp;The smallest value to be drawn from
  the distribution. Must be less than <i>mode</i>. Required. Coerced to real.
  The argument must be <i>Expression</i>.</p>
      <b><i>
      <p ALIGN="left">Max</i></b>&nbsp;-&nbsp;The largest value to be drawn from
  the distribution. Must be greater than <i>mode</i>. Required. Coerced to real.
  The argument must be <i>Expression</i>.</p>
      <b><i>
      <p ALIGN="left">Mode</i></b>&nbsp;-&nbsp;The most frequent value of the
  distribution. Must be greater than <i>min</i> and less than <i>max</i>.
  Required. Coerced to real. The argument must be <i>Expression</i>.</p>
    </font>
    <blockquote>
      <b><font FACE="Arial">
      <p align="left">Return Value</p>
      </blockquote>
      </font><i><font FACE="Arial" SIZE="2">
      <p ALIGN="left">Real</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
  real value generated as a single instance of the probability distribution.</p>
    </font><b><font FACE="Arial">
    <blockquote>
      <p align="left">Probability Density Function</p>
    </blockquote>
    </font></b><i><font FACE="Times" SIZE="2">
    <p ALIGN="left">&nbsp;</p>
    <p ALIGN="center"><img border="0" src="../images/22.gif" width="374" height="486"></p>
    <p ALIGN="center">Figure 8</font></i><font FACE="Arial" SIZE="2">—</font><i><font FACE="Times" SIZE="2">22.
The Triangular Distribution</p>
    </font></i><b><font FACE="Arial">
    <blockquote>
      <p align="left">&nbsp;</p>
      <p align="left">Notes</p>
    </blockquote>
    </font></b><font FACE="Arial" SIZE="2">
    <p ALIGN="left">&quot;Right&quot; triangular distributions can be generated
as Beta distributions.</p>
    </font><b><font FACE="Arial" SIZE="4">
    <p align="left">&nbsp;</p>
    </font></b>
  </blockquote>
</blockquote>
  <b><font FACE="Arial">
  <p align="left"><font face="Arial" size="4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  23. Uniform</font></p>
  <p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp; Syntax</p>
  </font>
  <blockquote>
    <blockquote>
      <blockquote>
        <blockquote>
          <i><font FACE="Arial" SIZE="4">
          <p ALIGN="left">Real</font></i><font FACE="Arial" SIZE="4"> = UNIFORM( <i>Stream</i>,
          <i>Min, Max </i>)</p>
          </blockquote>
        </font><font FACE="Arial">
        <p align="left">Arguments</p>
        </blockquote>
      </font><i><font FACE="Arial" SIZE="2">
      <p ALIGN="left">Stream</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
  random number generator entity number. Required. Coerced to integer. Must be
  greater than or equal to 1. The argument must be <i>Expression</i>.</p>
      <b><i>
      <p ALIGN="left">Min</i></b>&nbsp;-&nbsp;The smallest value to be drawn from
  the distribution. Must be less than <i>max</i>. Required. Coerced to real. The
  argument must be <i>Expression</i>.</p>
      <b><i>
      <p ALIGN="left">Max</i></b>&nbsp;-&nbsp;The largest value to be drawn from
  the distribution. Must be greater than <i>min</i>. Required. Coerced to real.
  The argument must be <i>Expression</i>.</p>
    </font>
    <blockquote>
      <b><font FACE="Arial">
      <p align="left">Return Value</p>
      </blockquote>
      </font><i><font FACE="Arial" SIZE="2">
      <p ALIGN="left">Real</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
  real value generated as a single instance of the probability distribution.</p>
    </font>
    <blockquote>
      <b><font FACE="Arial">
      <p align="left">Probability Density Function</p>
      </blockquote>
      </font></b><i><font FACE="Times" SIZE="2">
    <p ALIGN="left">&nbsp;</p>
    <p ALIGN="center"><img border="0" src="../images/23.gif" width="310" height="342"></p>
    <p ALIGN="center">Figure 8</font></i><font FACE="Arial" SIZE="2">—</font><i><font FACE="Times" SIZE="2">23.
The Uniform Distribution</p>
    </font></i><font FACE="Arial" SIZE="2">
    <blockquote>
    </font><b><font FACE="Arial">
    <p align="left">&nbsp;</p>
    <p align="left">Notes</p>
    </blockquote>
    </font></b><font FACE="Arial" SIZE="2">
    <p ALIGN="left">The Beta Distribution degenerates to the Uniform when the <i>shape</i>
arguments are 1. That is, Beta( <i>Stream, Min, Max, </i>1, 1 ) is distributed
as Uniform( <i>Stream, Min, Max</i> ).</p>
    <p ALIGN="left">&nbsp;</p>
    </font><b><font FACE="Arial" SIZE="4">
    <p align="left">&nbsp;</p>
    <p align="left">&nbsp;</p>
    </font></b>
  </blockquote>
</blockquote>
  <b><font FACE="Arial">
  <p align="left"><font face="Arial" size="4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  24. Weibull</font></p>
  <p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp; Syntax</p>
  </font>
  <blockquote>
    <blockquote>
      <i><font FACE="Arial" SIZE="4">
      <p ALIGN="left">Real</font></i><font FACE="Arial" SIZE="4"> = WEIBULL( <i>Stream</i>,
      <i>Locate</i>, <i>Scale</i>, <i>Shape </i>)</p>
      </font>
      <blockquote>
        <font FACE="Arial">
        <p align="left">Arguments</p>
        </blockquote>
      </font><i><font FACE="Arial" SIZE="2">
      <p ALIGN="left">Stream</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
  random number generator entity number. Required. Coerced to integer. Must be
  greater than or equal to 1. The argument must be <i>Expression</i>.</p>
      <b><i>
      <p ALIGN="left">Locate</i></b>&nbsp;-&nbsp;The shift value used to position
  the distribution. Required. Coerced to real. The argument must be <i>Expression</i>.</p>
      <b><i>
      <p ALIGN="left">Scale</i></b>&nbsp;-&nbsp;The compression value used to
  expand or contract the distribution. Must be strictly positive. Required.
  Coerced to real. The argument must be <i>Expression</i>.</p>
      <b><i>
      <p ALIGN="left">Shape</i></b>&nbsp;-&nbsp;The selection value used to
  choose from a family of shapes. Required. Coerced to real. Must be strictly
  positive. The argument must be <i>Expression</i>.</p>
      <p ALIGN="left">&nbsp;</p>
    </font>
    <blockquote>
      <b><font FACE="Arial">
      <p align="left">Return Value</p>
      </blockquote>
      </font><i><font FACE="Arial" SIZE="2">
      <p ALIGN="left">Real</font></i></b><font FACE="Arial" SIZE="2">&nbsp;-&nbsp;The
  real value generated as a single instance of the probability distribution.</p>
      <p ALIGN="left">&nbsp;</p>
    </font>
    <blockquote>
      <b><font FACE="Arial">
      <p align="left">Probability Density Function</p>
      </blockquote>
      </font></b><i><font FACE="Times" SIZE="2">
    <p ALIGN="left">&nbsp;</p>
    <p ALIGN="center"><img border="0" src="../images/24.gif" width="409" height="494"></p>
    <p ALIGN="center">Figure 8</font></i><font FACE="Arial" SIZE="2">—</font><i><font FACE="Times" SIZE="2">24.
The Weibull Distribution</p>
    <blockquote>
    </font></i><b><font FACE="Arial">
    <p align="left">&nbsp;</p>
    <p align="left">Notes</p>
    </blockquote>
    </font></b><font FACE="Arial" SIZE="2">
    <p ALIGN="left">The Weibull Distribution degenerates to the Exponential when
the <i>shape</i> argument is 1. That is, Weibull( <i>stream, Locate, Scale</i>,
1 ) is distributed as Exponential( <i>Stream, Locate, Scale</i> ).</p>
    <p ALIGN="left">Weibull( <i>Stream, Locate, Scale</i>, 2 ) is known as the
Rayleigh distribution.</p>
    <p ALIGN="left">&nbsp;</p>
    <p align="center">&nbsp;
    <a href="reference_manual.htm">[Table of Contents]</a></p>
    </font>
  </blockquote>
</blockquote>
</font>
    </font><!--mstheme--></font></body>

</html>
