
<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>New Page 1</title>
<meta name="Microsoft Theme" content="canvas 0001">
</head>

<body background="../_themes/canvas/cnvbkgnd.jpg" bgcolor="#FFFFFF" text="#000000" link="#0066CC" vlink="#006666" alink="#996699"><!--mstheme--><font face="Arial, Arial, Helvetica"><b><font FACE="Arial" SIZE="5">
<blockquote>
  <blockquote>

<h2 align="center"><a name="Lesson 12">Lesson 12</a>  - Reading from and Writing
to External Files</h2>
</font></b><font FACE="Arial" SIZE="2">
<p ALIGN="JUSTIFY">&nbsp;</p>

  
    <p ALIGN="JUSTIFY">GPSS World has Blocks that are designed to read from and
    write to external ASCII files. These Blocks can be very useful if you want
    to read an external data file, format your own report, or simply collect one
    or two pieces of data at given time intervals in an external file.</p>
  </font><font FACE="Arial" SIZE="2">
    <p ALIGN="JUSTIFY">Please take the time now to read the section titled <u>Data
    Streams</u>  in Chapter 4 of the <i>GPSS World Reference Manual</i>. Also,
    you should refer to Chapter 7 to better understand the use of the I/O Stream
    Blocks, OPEN, READ, SEEK, WRITE and CLOSE. There are equivalent library
    procedures, as well. When these Blocks or library procedures are used in
    conjunction with the string procedures in GPSS World, you can accomplish
    powerful data handling and formatting tasks.</p>
    <p ALIGN="JUSTIFY">In this lesson, we will use some very simple models that
    are designed to do nothing other than exercise the actions of the Data
    Stream Blocks. Each model is supplied with a matching Text Object file with
    which it interacts. Text Objects are simply plain text files with a (.txt)
    filename extension. In the case of the files that are used for writing, we
    have provided you with a file TSTTEMPL.TXT that can be used to restore each
    of the files to its original state, if you or others wish to use this lesson
    again.</p>
    <p ALIGN="JUSTIFY">Another way to restore the changed files is to copy the
    TST*.TXT files to a safe place before you start this lesson. They are
    located in the Sample Models folder.</p>
    <p ALIGN="JUSTIFY">When you are done with the lesson, either copy back the
    TST*.TXT files or copy the TSTTEMPL.TXT file to the following files.</p>
    <p ALIGN="JUSTIFY">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TSTSKINW.TXT<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TSTAPPW.TXT<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TSTSKRW.TXT<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TSTSQRW.TXT<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TSTSQR2W.TXT</p>
    <p ALIGN="JUSTIFY">Next, delete these two files.</p>
    <p ALIGN="JUSTIFY">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TSTCATW.TXT<br>
    &nbsp;&nbsp;&nbsp;&nbsp;
  

</font>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font FACE="Arial" SIZE="2">
    TSTSTW.TXT</p>
    <p ALIGN="JUSTIFY">The TSTRD.TXT file and the TSTSTRD file are only used to
    read data. They will not be altered and do not have to be initialized before
    you use this lesson again.</p>
    <p ALIGN="JUSTIFY">The names of the test files used in this lesson are
    created by a code. Here are the letters and the I/O actions that they
    represent.</p>
    <p ALIGN="JUSTIFY">&nbsp;</p>
    <p ALIGN="JUSTIFY">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CAT = Catenate
    (String Procedure) SK = Seek</p>
    <p ALIGN="JUSTIFY">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; I N = Insert
    SQ = Sequential</p>
    <p ALIGN="JUSTIFY">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; R = Replace ST
    = String</p>
    <p ALIGN="JUSTIFY">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RD = Read W =
    Write</p>
    <p ALIGN="JUSTIFY">&nbsp;</p>
    <p ALIGN="JUSTIFY">You will notice in the OPEN Blocks of these sample
    models, that there is no path specified. That means that GPSS World will use
    the Sample Folder as the destination for all files that are written to disk.</p>
    <p ALIGN="JUSTIFY">Let’s start by reading a file sequentially and storing
    the values in a GPSS World Matrix. We’ll use the model TSTRD.GPS and the
    data file TSTRD.TXT shown below.</p>
    <p ALIGN="JUSTIFY">&nbsp;</p>
    <p ALIGN="JUSTIFY">Model: TSTRD.GPS</p>
  

</font>
    <p><font face="Courier New" size="2">; GPSS World Sample File - TSTRD.GPS<br>
    **************************************************<br>
    ; Reads a file sequentially and stores<br>
    ; the values in a matrix.<br>
    ; At end of file goes to label Finis<br>
    **************************************************<br>
    Total&nbsp;&nbsp; MATRIX&nbsp;&nbsp;&nbsp;&nbsp; ,10,1<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GENERATE&nbsp;&nbsp; ,,,1<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OPEN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    (&quot;TSTRD.TXT&quot;),,flag<br>
    Again&nbsp;&nbsp; READ&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Numero,,Finis<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SAVEVALUE&nbsp; Nrow+,1<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ASSIGN&nbsp;&nbsp;&nbsp;&nbsp; Numrow,X$Nrow<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MSAVEVALUE Total,P$Numrow,1,P$Numero<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TRANSFER&nbsp;&nbsp; ,Again<br>
    Finis&nbsp;&nbsp; CLOSE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Prob,,Flag1<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TERMINATE&nbsp; 1<br>
    Flag&nbsp;&nbsp;&nbsp; TERMINATE&nbsp; 1<br>
    Flag1&nbsp;&nbsp; TERMINATE&nbsp; 1<br>
    </font></p>
<font FACE="Arial" SIZE="2">
    <p ALIGN="JUSTIFY">Datafile: TSTRD.TXT</p>
    <b><font FACE="Courier New" SIZE="1">
    <p>1<br>
    2<br>
    3<br>
    4<br>
    5<br>
    6<br>
    7</p>
    </font></b>
    <p ALIGN="JUSTIFY">Now, let’s run the simulation</p>
  

<font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE</font></font><font face="Helvetica" size="2">&nbsp;&nbsp;&nbsp;&nbsp;</font><font FACE="Arial" SIZE="2"><font FACE="Helvetica" SIZE="2">
    </font><b>File / Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">In the dialog box</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Tstrd</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">Now, create the simulation and open the Matrix Window so we
  can watch it as the simulation reads the data file and updates the Matrix.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / Create
Simulation</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">and</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Window / Simulation
Window / Matrix Window</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">Then in the Open Matrix dialog box you will see the Matrix
  &quot;Total&quot; in the drop-down box since it is the only one in this model.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">and size the window to a comfortable viewing size.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / START</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">and in the dialog box we will suppress the Standard Report.
  Replace START 1</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>START 1,NP</p>
</b><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>
</b>
<i><font SIZE="2">
<p>&nbsp;</p>
<p align="center"><img border="0" src="../images/T1_12_1.gif" width="440" height="423"></p>
<p align="center">Figure 12—1. The Total Matrix.</p>
</font></i>
<p ALIGN="JUSTIFY">&nbsp;</p>

  
    <p ALIGN="left">The simulation has run very quickly filling the Matrix
    with the values 1 through 7 that are found in the data file. Let’s briefly
    discuss the way the I/O Stream Blocks are working here.</p>
    <p ALIGN="left">The OPEN Block is placed in a separate segment of the
    model since the file only needs to be opened once. A high priority
    Transaction opens the file to be read as the first action in the running of
    the simulation.</p>
    <p ALIGN="left">Then the Transaction that will be doing the reading of
    the files begins to read the file sequentially looping through the READ
    Block and the four Blocks that follow it. Each value read is placed into the
    Transaction Parameter &quot;Numero&quot;. The next three Blocks update a
    SAVEVALUE counter that is then moved to a Parameter and used as the row
    number in the matrix. Then in the MSAVEVALUE Block, the value that has been
    read into P$Numero is placed in the appropriate row of the Matrix, Total.
    When the end of file is reached, the Transaction is sent to the CLOSE Block
    labeled Finis, closing the data file. Then the Transaction enters a
    TERMINATE Block, ending the simulation.</p>
    <p ALIGN="left">If any errors occur in the OPEN or CLOSE Blocks, the
    Transaction will go to the Blocks labeled Flag or Flag1 respectively. Such
    an error would be easy to spot since normally those two Blocks should have
    an entry count of 0.</p>
    <p ALIGN="left">If we were doing multiple reads and writes, we could use
    a high priority Transaction to open the file. After all the data is read,
    the file is CLOSEd.</p>
    <p ALIGN="left">OK. Now close all the windows related to this example.
    You should have a Main GPSS Window with a blank client area.</p>
    <p ALIGN="left">The next file will demonstrate seeking data from selected
    locations in a file and placing it in specific locations in a matrix.</p>
    <u><font FACE="Helvetica" SIZE="2">
    <p ALIGN="JUSTIFY">&nbsp;</p>
    </font></u>
    <p ALIGN="JUSTIFY">Model: TSTSKRD.GPS</p>
  

</font>
    <p><font face="Courier New" size="2">; GPSS World Sample File - TSTSKRD.GPS<br>
    *************************************************<br>
    ; Read two separate text lines of a file<br>
    ; using SEEK and stores the values<br>
    ; in a matrix. Close file after second value<br>
    ; is read and stored.<br>
    *************************************************<br>
    Total&nbsp;&nbsp; MATRIX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,10,1<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GENERATE&nbsp;&nbsp;&nbsp; ,,,1<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OPEN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    (&quot;TSTRD.TXT&quot;),,Flag<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SEEK&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    4<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TRANSFER&nbsp;&nbsp;&nbsp; ,DoRead<br>
    Again&nbsp;&nbsp; SEEK&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6<br>
    DoRead&nbsp; READ&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Numero,,Finis<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MSAVEVALUE&nbsp; Total,P$numero,1,P$numero<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TEST E&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    P$Numero,4,Finis<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TRANSFER&nbsp;&nbsp;&nbsp; ,Again<br>
    Finis&nbsp;&nbsp; CLOSE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Prob,,Flag1<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
    Flag&nbsp;&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
    Flag1&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
    </font></p>
<font FACE="Arial" SIZE="2">
    <p ALIGN="JUSTIFY">Datafile: TSTRD.TXT</p>
    <b><font FACE="Courier New" SIZE="1">
    <p>1<br>
    2<br>
    3<br>
    4<br>
    5<br>
    6<br>
    7<br>
    </p>
    </font></b>
    <p ALIGN="JUSTIFY">Now, let’s run the simulation</p>
  

<font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>File / Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">In the dialog box</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Tstskrd</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">Now, create a simulation and open the Matrix Window. We can
  watch as the simulation reads the data file and updates the Matrix.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / Create
Simulation</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Window / Simulation
Window / Matrix Window</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">The Open Matrix dialog box has the correct name in the
  drop-down box.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / START</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and in the dialog box we will suppress the Standard Report.
  Replace START 1</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>START 1,NP</p>
</b><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>
</b>
<i><font SIZE="2">
<p>&nbsp;</p>
<p align="center"><img border="0" src="../images/T1_12_2.gif" width="349" height="337"></p>
<p align="center">Figure 12—2. The Total Matrix.</p>
</font></i>
<p ALIGN="JUSTIFY">&nbsp;</p>

  
    <p ALIGN="left">The simulation will run very quickly, but this time only
    the values 4 and 6 will be entered into the Matrix in rows 4 and 6. Let’s
    briefly discuss the way the I/O Stream Blocks are working.</p>
    <p ALIGN="left">The OPEN Block is placed in a separate segment of the
    model since the file only needs to be opened once. First, a high priority
    Transaction opens the file to be read.</p>
    <p ALIGN="left">Then, the Transaction that will cause the reading of the
    files enters a SEEK Block that places the Current Line Position at line 4.
    Next, entry into a READ Block causes the fourth text line to be read. The
    value that has been read is put into the matrix and then a test is performed
    to see if another read should be done. Another READ is done and the second
    number retrieved and loaded into the Matrix. Finally, the file is closed and
    the simulation ended.</p>
    <p ALIGN="left">If any errors occur in the OPEN or CLOSE Blocks, the
    Transaction will go to Flag, or Flag1, respectively. Such an error would be
    easy to spot, since normally those two Blocks should have and entry count of
    0.</p>
    <p ALIGN="left">OK. Now close all the windows related to this example.
    You should have a Main GPSS Window with a blank client area.</p>
    <p ALIGN="left">The next example file will demonstrate writing to a
    selected line in a file using random access.</p>
  

<font FACE="Helvetica" SIZE="2">
<p align="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; <u>The X-Upper Right of the
Matrix Window</p>

  
  </u></font><font FACE="Arial" SIZE="2">
<p ALIGN="left">Model: TSTSKINW.GPS</p>
</font>
  

</font>
<p><font face="Courier New" size="2">; GPSS World Sample File - TSTSKINW.GPS<br>
****************************************************<br>
; Test for random write.<br>
; Inserts 123456 before line 3 of data<br>
; file TSTSKINW.TXT<br>
****************************************************<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GENERATE&nbsp;&nbsp;&nbsp; ,,,1<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OPEN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&quot;TSTSKINW.TXT&quot;),,Flag<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SEEK&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
3<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WRITE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
123456,,Flag1,On<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CLOSE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Prob,,Flag2<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
Flag&nbsp;&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
Flag1&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
Flag2&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
</font></p>
<p><font FACE="Arial" SIZE="2">Datafile: TSTSKINW.TXT
  

</font>
</p>
<p><font FACE="Arial" SIZE="2"><b><font FACE="Courier New" SIZE="1">
This is line1<br>
This is the info on line 2<br>
This is line 3<br>
Line 4</p>
</font></b><font FACE="Arial" SIZE="2">
<p ALIGN="JUSTIFY"><br>
Now, let’s run the simulation</p>


</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>File / Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">In the dialog box</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Tstskinw</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Now, create a simulation and run it.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / Create
Simulation</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp; </font><b>Command / START</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and in the dialog box we will suppress the Standard Report.
  Replace START 1</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>START 1,NP</p>
</b><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Now, let’s look at the altered data file.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>File / Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and in the dialog box you must first</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; <u>The Down Arrow at the End
of the Files of type box</p>
</u>
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Text File (*.txt)</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">then from the list</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Tstskinw</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Open</p>
</b>
<p ALIGN="left">&nbsp;</p>

  
    <p ALIGN="left">You will see that 123456 has been inserted before the
    third line of the file. If we had not used a SEEK Block, the data would have
    been inserted before the first line of the file. In this example, we have
    not isolated the OPEN Block since we are only doing one write and then
    closing the file and ending the simulation. You will see that the SEEK Block
    is used to position the Current Line Position to the location in the data
    file before text line 3 where the information in the WRITE Block is to be
    written.</p>
    <p ALIGN="left">OPEN, WRITE and CLOSE all have alternate exits in case an
    I/O error occurs. Not only will the Transaction go to the indicated Block,
    when an error occurs, but a subsequent CLOSE retrieves the Error Code, and
    places it into a Transaction Parameter.</p>
    <p ALIGN="left">OK. Now close all the windows related to this example.
    You should have a Main GPSS Window with a blank client area.</p>
    <p ALIGN="left">Next, we’ll look at a write operation that appends data
    to the end of a file.</p>
    <p ALIGN="JUSTIFY">&nbsp;</p>
    <p ALIGN="JUSTIFY">Model: TSTAPPW.GPS</p>
  

</font>
    <p><font face="Courier New" size="2">; GPSS World Sample File - TSTAPPW.GPS<br>
    *************************************************<br>
    ; Appends 123456 at end of data file TSTAPPW.TXT.<br>
    *************************************************<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GENERATE&nbsp;&nbsp;&nbsp; ,,,1<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OPEN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    (&quot;TSTAPPW.TXT&quot;),,Flag<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SEEK&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    10000<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WRITE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    123456,,Flag1,On<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CLOSE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    Prob,,Flag2<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
    Flag&nbsp;&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
    Flag1&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
    Flag2&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
    </font></p>
<font FACE="Arial" SIZE="2">
    <p ALIGN="JUSTIFY">Datafile: TSTAPPW.TXT</p>
  

</font>
    <b>
    <p><font face="Courier New" size="2">This is line1<br>
    This is the info on line 2<br>
    This is line 3<br>
    Line 4</font></p>
</b>
<font FACE="Arial" SIZE="2">
    <p ALIGN="JUSTIFY">Now, let’s run the simulation</p>
  

<font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>File / Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">In the dialog box</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;</font><font face="Helvetica" size="2">&nbsp;&nbsp;&nbsp;
</font><b>Tstappw</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Now, create a simulation and run it.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / Create
Simulation</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / START</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and in the dialog box we will suppress the Standard Report.
  Replace START 1</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>START 1,NP</p>
</b><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Now, let’s look at the altered data file.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>File / Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and in the dialog box you must first</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; <u>The Down Arrow at the End
of the Files of type box</p>
</u>
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Text File (*.txt)</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">then from the list</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Tstappw</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">The only way that this use of the WRITE Block differs from
  the previous one is that we have chosen to append a value to the end of the
  file. You will see that the value 123456 has been added to the end of the
  file. We have done two things differently here. First, the SEEK Block has the
  value 10000 in it and the WRITE Block is in insert mode (indicated by the on).
  In Insert mode when the Current Line Position is set past the end of the file,
  the data will be appended to the end of the file.</p>
  <p ALIGN="left">Although we will not show it here, if Insert mode is off,
  meaning that the WRITE Block is operating in Replace mode, then GPSS World
  would fill any empty gaps with null text lines up to the line number in the
  SEEK, and add the data at that position.</p>
  <p ALIGN="left">OK. Now close all the windows related to this example. You
  should have a Main GPSS Window with a blank client area.</p>
  <p ALIGN="left">Next on the agenda is a model that uses the WRITE Replace
  mode. We’ve used the code SKRW in the name to indicate Seek, Replace, and
  Write. The SEEK Block is used to place the Current Line Position at a chosen
  location.</p>
  <p ALIGN="JUSTIFY">Model: TSTSKRW.GPS</p>
  </font>
  

</font>
  <p><font face="Courier New" size="2">; GPSS World Sample File - TSTSKRW.GPS<br>
  ********************************************<br>
  ; Writes 123456 on line 2 of data file<br>
  ; TSTSKRW.TXT replacing original line.<br>
  ********************************************<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GENERATE&nbsp;&nbsp;&nbsp; ,,,1<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OPEN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  (&quot;TSTSKRW.TXT&quot;),,Flag<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SEEK&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  2<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WRITE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  123456,,Flag1,Off<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CLOSE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Prob,,Flag2<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
  Flag&nbsp;&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
  Flag1&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
  Flag2&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
  </font></p>
<font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Datafile: TSTSKRW.TXT</p>
<b><font FACE="Courier New" SIZE="1">
  <p>This is line1<br>
  This is the info on line 2<br>
  This is line 3<br>
  Line 4</p>
  </font></b>
  <p ALIGN="JUSTIFY">Now, let’s run the simulation</p>
  

<font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>File / Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">In the dialog box</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Tstskrw</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Now, translate the model and run it.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / Create
Simulation</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / START</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and in the dialog box we will suppress the Standard Report.
  Replace START 1</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>START 1,NP</p>
</b><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Now, let’s look at the altered data file.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>File / Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and in the dialog box you must first</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; <u>The Down Arrow at the End
of the Files of type box</p>
</u>
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Text File (*.txt)</p>
</b><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>File / Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">then from the list</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Tstskrw</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">What happened? Line two of the data file was overwritten
  with the value 123456. Once again, we did not need to isolate the OPEN or the
  CLOSE Blocks since we were only going once through the model. The difference
  here from the previous model is that the WRITE Block is in Replace mode. You
  have to specify </font><b><font FACE="Courier">OFF</font></b><font FACE="Arial" SIZE="2">
  for replace mode. In this example, we also used the SEEK Block to choose the
  line that we wanted to be overwritten.</p>
  <p ALIGN="left">OK. Now close all the windows related to this example. You
  should have a Main GPSS Window with a blank client area.</p>
  <p ALIGN="left">Next let’s look at how Replace mode works if there is no
  line position specified in a SEEK Block.</p>
  <p ALIGN="JUSTIFY">Model: TSTSQRW.GPS</p>
  </font>
  

</font>
  <p><font face="Courier New" size="2">; GPSS World Sample File - TSTSQRW.GPS<br>
  ********************************************<br>
  ; Writes 123456 on line 1 of data file<br>
  ; TSTSQRW.TXT replacing original line.<br>
  ********************************************<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GENERATE&nbsp;&nbsp;&nbsp; ,,,1<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OPEN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  (&quot;TSTSQRW.TXT&quot;),,Flag<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WRITE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  123456,,Flag1,Off<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CLOSE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Prob,,Flag2<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
  Flag&nbsp;&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
  Flag1&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
  Flag2&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1</font></p>
<font FACE="Arial" SIZE="2"><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">&nbsp;</p>
  <p ALIGN="JUSTIFY">Datafile: TSTSQRW.TXT</p>
  </font><b><font FACE="Courier New" SIZE="1">
  <p>This is line1<br>
  This is the info on line 2<br>
  This is line 3<br>
  Line 4</p>
  </font></b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Now, let’s run the simulation</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>File / Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">In the dialog box</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Tstsqrw</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Now, create a simulation and run it.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / Create
Simulation</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / START</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and in the dialog box we will suppress the Standard Report.
  Replace START 1</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>START 1,NP</p>
</b><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Now, let’s look at the altered data file.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>File / Open</p>
</b>

  
    <p ALIGN="JUSTIFY">and in the dialog box you must first</p>
  

<font FACE="Helvetica" SIZE="2">
<p align="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; <u>The Down Arrow at the End
of the Files of type box</p>
</u>
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Text File (*.txt)</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">then from the list</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Tstsqrw</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">As you might have guessed, this works just like the last
  model, but this time the Current Line Position has not been relocated so it is
  line number 1 that is replaced. Next, we’ll replace two lines, one with a
  text string and one with a calculation result. You can put any values in the
  string that you want. In a minute we’ll show you how to combine multiple
  values from different sources in a string.</p>
  <p ALIGN="left">OK. Now close all the windows related to this example. You
  should have a Main GPSS Window with a blank client area.</p>
  <p ALIGN="left">Next let’s try the multiple sequential WRITEs in replace
  mode.</p>
  <p ALIGN="left">Model: TSTSQR2W.GPS</p>
  </font>
  

</font>
  <p><font face="Courier New" size="2">; GPSS World Sample File - TSTSQR2W.GPS<br>
  ***********************************************<br>
  ; Does 2 sequential writes in replace mode<br>
  ***********************************************<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GENERATE&nbsp;&nbsp;&nbsp; ,,,1<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OPEN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  (&quot;TSTSQR2W.TXT&quot;),,Flag<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  WRITE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&quot;This is fun.&quot;),,Flag1,Off<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WRITE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  (5+5),,Flag2,Off<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CLOSE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Prob,,Flag3<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
  Flag&nbsp;&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
  Flag1&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
  Flag2&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
  Flag3&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
  </font></p>
<font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Datafile: TSTSQR2W.TXT</p>
<b><font FACE="Courier New" SIZE="1">
  <p>This is line1<br>
  This is the info on line 2<br>
  This is line 3<br>
  Line 4</p>
  <p>&nbsp;</p>
  </font></b>
  <p ALIGN="JUSTIFY">Now, let’s run the simulation</p>
  

<font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>File / Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">In the dialog box</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Tstsqr2w</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Now, create a simulation and run it.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / Create
Simulation</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / START</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and in the dialog box we will suppress the Standard Report.
  Replace START 1</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>START 1,NP</p>
</b><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Now, let’s look at the altered data file.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>File / Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and in the dialog box you must first</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; <u>The Down Arrow at the End
of the Files of type box</p>
</u>
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Text File (*.txt)</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">then from the list</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Tstsqr2w</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">The only difference here is that after each WRITE Block
  entry, the Current Line Position is increased one line. Hence, text lines 1
  and 2 are replaced. We have also included an error flag for each WRITE so that
  if an I/O error occurs, we will know which Block is the cause of the problem.</p>
  <p ALIGN="left">OK. Now close all the windows related to this example. You
  should have a Main GPSS Window with a blank client area.</p>
  <p ALIGN="left">In our final two examples, we will work with strings. You
  can manipulate data in powerful ways using String Procedures with data that
  has been read in or data that you may wish to write. You can format report
  headers and data as well as read in and extract portions of data from a file.
  You might want to read further about Strings in Chapter 8 of the <i>GPSS World
  Reference Manual</i>.</p>
  <p ALIGN="left">Model: TSTCATW.GPS</p>
  </font>
  

</font>
<p><font face="Courier New" size="2">; GPSS World Sample File - TSTCATW.GPS<br>
***********************************************************************<br>
*<br>
* Barber Shop Simulation<br>
* Time is in Minutes<br>
*<br>
***********************************************************************<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GENERATE&nbsp;&nbsp;&nbsp; 5,2.5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
;Create next customer.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SAVEVALUE&nbsp;&nbsp; Custnum+,1&nbsp;&nbsp;&nbsp;
;Total customers who stay<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ASSIGN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Custno,X$Custnum ;Assign number to customer<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; QUEUE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Barber&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;Begin queue time.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SEIZE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Barber&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;Own or wait for barber.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DEPART&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Barber&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
;End queue time.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ADVANCE&nbsp;&nbsp;&nbsp;&nbsp; 10,2.5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
;Haircut takes a few minutes.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RELEASE&nbsp;&nbsp;&nbsp;&nbsp; Barber&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
;Haircut done.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
; Give up the barber.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TEST G&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TG1,1,Fin&nbsp;&nbsp;&nbsp;&nbsp;
;Write final Avg. Queue Residence<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
;Customer leaves.<br>
Fin&nbsp;&nbsp;&nbsp;&nbsp; OPEN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&quot;TSTCATW.TXT&quot;),,Flg1<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WRITE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(Catenate(&quot;Avg. Barber Queue Time Is &quot;,QT$Barber)),,Flg<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CLOSE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Prob,,Flg2<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
Flg&nbsp;&nbsp;&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
Flg1&nbsp;&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
Flg2&nbsp;&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1</font></p>
<p>&nbsp;</p>
<font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Datafile: TSTCATW.TXT</p>
  

</font>
<b>
  <p><font face="Courier New" size="2">This file is to be created.</font></p>
  <p>&nbsp;</p>
</b>
  <p ALIGN="JUSTIFY">Now, let’s run the simulation</p>
  

<font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>File / Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">In the dialog box</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;</font><font face="Helvetica" size="2">&nbsp;&nbsp;&nbsp;
</font><b>Tstcatw</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Now, create a simulation and run it.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / Create
Simulation</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / START</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and in the dialog box we will suppress the Standard Report.
  Replace START 1</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>START 1,NP</p>
</b><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Now, let’s look at the altered data file.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>File / Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and in the dialog box you must first</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; <u>The Down Arrow at the End
of the Files of type box</p>
</u>
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Text File (*.txt)</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">then from the list</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Tstcatw</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">In the WRITE Block in this model, we’ve used the String
  Procedure &quot;Catenate&quot; to take text data and mix it with actual data
  from the simulation run. You can see that this would be most valuable in
  formatting reports or putting out selected information at given time intervals
  in a simulation run. You could have a segment of your model with the sole
  purpose of generating Transactions to write simulation statistics. The values
  from the simulation could be labeled as we have done here for easy
  interpretation after the simulation run is complete.</p>
  <p ALIGN="left">OK. Now close all the windows related to this example. You
  should have a Main GPSS Window with a blank client area.</p>
  <p ALIGN="left">Next, let’s see how we can manipulate data that we read
  in from a file.</p>
  <p ALIGN="JUSTIFY">Model: TSTSTRDW.GPS</p>
  </font>
  

  <p><font face="Courier New" size="2">; GPSS World Sample File - TSTSTRDW.GPS<br>
  *************************************************************************<br>
  * Movie Theater Food Buying Analysis&nbsp;<br>
  * Takes info on age and sex, reads it in and analyzes&nbsp;<br>
  * how mix of people will influence needs at concession&nbsp;<br>
  * stand. Then writes a report on wait times, queue size&nbsp;<br>
  * and total people served.&nbsp;<br>
  *************************************************************************<br>
  Fem EQU 1<br>
  Male EQU 2<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GENERATE&nbsp;&nbsp;&nbsp; 1<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TEST
  E&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X$Finish,0,In&nbsp; ;After End of File-destroy
  next xact<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  READ&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Info,1,Fin&nbsp;&nbsp;&nbsp;&nbsp; ;Get Cust Age and Sex<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SAVEVALUE&nbsp;&nbsp;
  Info1,(Substring(P$Info,1,2))<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SAVEVALUE&nbsp;&nbsp;
  Info2,(Substring(P$Info,3,1))<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SAVEVALUE&nbsp;&nbsp; Counter+,1<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TEST
  G&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X$Info1,8,In&nbsp;&nbsp;&nbsp; ;Older than 8
  may buy<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TEST LE&nbsp;&nbsp;&nbsp;&nbsp;
  X$Info1,17,In&nbsp;&nbsp; ;Older than 17 don’t buy<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TEST
  E&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X$Info2,Male,Ques ;All Males buy<br>
  Ques&nbsp;&nbsp;&nbsp; TRANSFER&nbsp;&nbsp;&nbsp;
  .50,In&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;50% of Females are
  dieting-don’t buy<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  QUEUE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Wait&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;Begin queue
  time.<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  SEIZE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Salesperson&nbsp;&nbsp;&nbsp;
  ;Customer gets salesperson<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  DEPART&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Wait&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;End queue
  time.<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ADVANCE&nbsp;&nbsp;&nbsp;&nbsp;
  6,1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;Get
  service<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SAVEVALUE&nbsp;&nbsp;
  Served+,1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;Keep track of number served<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RELEASE&nbsp;&nbsp;&nbsp;&nbsp;
  Salesperson&nbsp;&nbsp;&nbsp; ;Done with Salesperson<br>
  In&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  TERMINATE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  ;Enter the viewing area<br>
  *************************************************************************<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GENERATE&nbsp;&nbsp;&nbsp; ,,,1,10
  ;Make this first Transaction<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  OPEN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&quot;TSTSTRD.TXT&quot;),1,Er
  ;Read file<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  OPEN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&quot;TSTSTW.TXT&quot;),2,Er1
  ;Write file<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TERMINATE<br>
  Fin&nbsp;&nbsp;&nbsp;&nbsp; SAVEVALUE&nbsp;&nbsp;
  Finish,1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;Signal EOF to new xacts<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  WRITE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (Catenate(&quot;Average
  &quot;,&quot; Average &quot;)),2,Er2<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  WRITE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (Catenate(&quot; Wait
  &quot;,&quot;Line Size&quot;)),2,Er3<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  WRITE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (Polycatenate(&quot; &quot;,
  INT(QT$Wait),&quot; &quot;, INT(QA$Wait) )),2,Er4<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  WRITE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Total People
  Served&quot;,2,Er7<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  WRITE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (Catenate(&quot; &quot;,X$Served)),2,Er8<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  CLOSE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Prob,1,Er9<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  CLOSE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Prob1,2,Er10<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
  Er&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
  Er1&nbsp;&nbsp;&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
  Er2&nbsp;&nbsp;&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
  Er3&nbsp;&nbsp;&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
  Er4&nbsp;&nbsp;&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
  Er5&nbsp;&nbsp;&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
  Er6&nbsp;&nbsp;&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
  Er7&nbsp;&nbsp;&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
  Er8&nbsp;&nbsp;&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
  Er9&nbsp;&nbsp;&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
  Er10&nbsp;&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
  </font></p>
<font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Datafile: TSTSTRD.TXT</p>
<b><font FACE="Courier New" SIZE="1">
  <p>161<br>
  021<br>
  252<br>
  162<br>
  151<br>
  131<br>
  172<br>
  172<br>
  182<br>
  352<br>
  341<br>
  152<br>
  152<br>
  162<br>
  151<br>
  131<br>
  172<br>
  172<br>
  182<br>
  352<br>
  341<br>
  202<br>
  141<br>
  161<br>
  171<br>
  151<br>
  112<br>
  142<br>
  142<br>
  122<br>
  132<br>
  142<br>
  152<br>
  </p>
  </font></b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Datafile: TSTSTW.TXT</p>
  </font>
  

</font>
<b>
  <p><font face="Courier New" size="2">This file is to be created.</font><font FACE="Courier New" SIZE="1">
  <br>
  </p>
  </font></b>
<font FACE="Arial" SIZE="2">
  <font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Now, let’s run the simulation</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>File / Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">In the dialog box</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Tststrdw</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Now, create a simulation and run it.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / Create
Simulation</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / START</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and in the dialog box we will suppress the Standard Report.
  Replace START 1</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>START 1,NP</p>
</b><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and wait for the simulation to run. Now, let’s look at
  the altered data file.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>File / Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and in the dialog box you must first</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; <u>The Down Arrow at the End
of the Files of type box</p>
</u>
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Text File (*.txt)</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">then from the list</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Tststw</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">In this final model, we have read in values from the file
  TSTRDST.TXT, manipulated them first by dividing them into smaller pieces and
  second by taking only a portion of the information that we read at a given
  location in the data string. You can see how powerful String Procedures can
  be. Take some time to examine the String Procedures in Chapter 8 of the <i>GPSS
  World Reference Manual</i>. Also, you may want to take a breather before you
  tackle the ANOVA Command.</p>
  <p ALIGN="left">Don’t forget to initialize the data files as described in
  the beginning of this lesson and delete the two string output files. You may
  also want to delete the reports that we have created along the way. You can do
  that in the Windows file management system. See you when you’re ready for
  the next lesson.</p>
  <p ALIGN="JUSTIFY">&nbsp;</p>
  </font>
  

</font>
<b><h2 align="center"><font face="Arial" size="5"><a name="Lesson 13"></a>Lesson 13 - The ANOVA
Library Procedure</font></h2>
</b><font FACE="Arial" SIZE="2"><font FACE="Arial" SIZE="2">
  <p ALIGN="left">You have probably noticed that changing nothing other than
  the random number seeds in a simulation can cause what appear to be large
  differences in output. If we are to use simulation in real problems, how can
  we tell which effects are random and which are real? The GPSS World ANOVA
  command provides a way.</p>
  <p ALIGN="left">This lesson is a brief introduction in the use of the
  statistical method known as analysis of variance. In it, we consider the ANOVA
  PLUS Library Procedure, which makes a first level of statistical analysis
  relatively easy. However, to become proficient in the application of
  simulation methods, you must become familiar with elementary statistical
  inference and the design of experiments. These topics are not covered in
  detail here.</p>
  <p ALIGN="left">When you use statistical methods to see if two alternatives
  are really different, you must not allow extraneous uncontrolled events to
  occur during the simulations. It would not be fair to load one run with
  additional activities at some unknown place in the simulation, and not to do
  precisely the same thing in all other runs. Therefore, you should generally
  not use interactive methods when you are running simulations that will be used
  for the statistics in your final report.</p>
  <p ALIGN="left">Let’s return now to the example of the barber who cannot
  keep up with arriving customers. As manager of the barber shop, you want to
  determine what effect a faster barber will have on the situation. You do not
  want to hire another barber. You want to see if a barber, who can cut hair in
  an average time of 5 minutes, causes a significant reduction in waiting time
  for the customers.</p>
  <p ALIGN="left">The treatment to be tested is that of barber 1 against
  barber 2. The barbers differ only in their average haircut times. Our
  experiment, then, consists of two treatment levels: 6.8 minute average haircut
  time, and 5 minute average haircut time. We will run 3 simulations at each
  level. In general, you will want to run more.</p>
  <p ALIGN="left">If our results are in the form of an arithmetic average of
  many items, we are justified in using the ANOVA command to do a statistical
  analysis. We can satisfy this criterion by using the average waiting time of
  customers as the overall measure.</p>
  <p ALIGN="left">We are going to build a Results Matrix of a special format
  that can be used by the ANOVA procedure. Let’s begin.</p>
  <p ALIGN="left">Since we have 1 treatment with two levels, we need 2
  dimensions in our Results Matrix. The last dimension of a Results Matrix is
  always for replications, and we will have three of them at each treatment
  level. Therefore we will use a 2 x 3 matrix.</p>
  <p ALIGN="left">Now start the GPSS World Session.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>File / Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">In the dialog box</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Anova</p>
</b><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">Here’s a copy of the program that you should now see in
  the Model Window.</p>
  </font>
  

</font>
  <p><font face="Courier New" size="2">; GPSS World Sample File - ANOVA.GPS<br>
  ***********************************************************************<br>
  *<br>
  * Barber Shop Simulation<br>
  * Time is in minutes&nbsp;<br>
  ***********************************************************************<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GENERATE&nbsp;&nbsp;&nbsp; 5,1.7&nbsp;&nbsp;&nbsp;&nbsp;
  ;Create next customer.<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; QUEUE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Barber&nbsp;&nbsp;&nbsp; ;Begin queue time.<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SEIZE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Barber&nbsp;&nbsp;&nbsp; ;Own or wait for barber.<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DEPART&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Barber&nbsp;&nbsp;&nbsp; ;End queue time.<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ADVANCE&nbsp;&nbsp;&nbsp;&nbsp; Cut_Time&nbsp;
  ;Cut takes a few min.<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RELEASE&nbsp;&nbsp;&nbsp;&nbsp; Barber&nbsp;&nbsp;&nbsp;
  ;Give up the barber.<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TEST G&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  TG1,1,Doout ;Last XN writes Anova data.<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  ;Customer leaves.<br>
  Doout&nbsp;&nbsp; OPEN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&quot;BARBER.RST&quot;),,Prob ;Open Anova database.<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SEEK&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  10000&nbsp;&nbsp;&nbsp;&nbsp; ;Place pointer at end of file.<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WRITE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  (Polycatenate(QT$Barber,&quot; &quot;,Treatment,&quot;
  &quot;)),,Prob,On<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CLOSE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Errorcode,,Prob ;Close,send to Prob if error.<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1<br>
  Prob&nbsp;&nbsp;&nbsp; TERMINATE&nbsp;&nbsp; 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  ;Terminate here if I/O error.<br>
  </font></p>
<font FACE="Arial" SIZE="2">
  <p ALIGN="left">Notice that our main experimental parameter in the ADVANCE
  Block is represented by a User Variable, Cut_Time. This will allow us to
  change the time it takes to complete a haircut. We will use a three digit
  random number seed varying only the middle digit to indicate which run of the
  simulation is being executed, run 1, 2 or 3. In the second set of runs with
  the faster barber, we will use the same random number seeds and change only
  the speed at which the barber works.</p>
  <p ALIGN="left">Before starting the simulation, let’s take a look at the
  Include-file that we will use to execute multiple simulation runs for us.</p>
  

</font>
<p><font face="Courier New" size="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RESULTS MATRIX ,2,3 ; Set up for 3 replicates of two levels<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Cut_Time EQU 6.8<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Treatment EQU 1<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RMULT 411<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Start 100,NP<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MSAVEVALUE RESULTS,1,1,QT$Barber<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Clear Off<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RMULT 421<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Start 100,NP<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MSAVEVALUE RESULTS,1,2,QT$Barber<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Clear Off<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RMULT 431<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Start 100,NP<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MSAVEVALUE RESULTS,1,3,QT$Barber<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Clear Off<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Cut_Time EQU 5<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Treatment EQU 2<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RMULT 411<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Start 100,NP<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MSAVEVALUE RESULTS,2,1,QT$Barber<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Clear Off<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RMULT 421<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Start 100,NP<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MSAVEVALUE RESULTS,2,2,QT$Barber<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Clear Off<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RMULT 431<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Start 100,NP<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MSAVEVALUE RESULTS,2,3,QT$Barber</font></p>
<font FACE="Arial" SIZE="2"><font FACE="Courier New" SIZE="1">
  <b>
  <p>&nbsp;</p>
  </b>
  </font><font FACE="Arial" SIZE="2">
  <p ALIGN="left">Let’s look at what will happen when we Translate the
  Include-file. First, it defines a Global Matrix named Results, which will be
  used to hold the numeric values for the Analysis of Variance. The Matrix has
  two dimensions, supporting 2 treatment levels, with 3 replicates of each.</p>
  <p ALIGN="left">Next, you will see that an EQU Command has been used to set
  the average haircut time equal to 6.8 minutes. Then, after three runs of the
  simulation and collection of appropriate data, the time is set to 5 minutes,
  allowing for a faster barber than in the first series of runs. You will also
  see that we set a Treatment value before each series of runs. This will
  differentiate the runs done with the 6.8 minute Cut_Time (Treatment 1) from
  those done with the 5 minute Cut_Time (Treatment 2).</p>
  <p ALIGN="left">Notice that we CLEAR OFF statistics between runs to avoid
  correlation between one simulation and the next. The OFF parameter is
  necessary to avoid resetting the Results Matrix. Also, in our simple example,
  we have not built in allowance for an empty barber shop at the start of each
  simulation. In your own simulation studies, you will want to ensure that
  startup effects are insignificant. This can be done by ignoring a transient
  startup period, using the RESET command some time into the simulation. The
  GPSS World PLOT command is useful for identifying transient periods that you
  might want to exclude. We could then gather the waittime values for each of
  the runs based on a start with a full shop. For now, let’s just concentrate
  on our simpler example.</p>
  <p ALIGN="left">Finally, we do two additional things. We run with the NP
  option as the B operand of START. This suppresses the Standard Report. Reports
  can also be controlled by the Settings of the Simulation Object. Also, we set
  the seeds of the random number generators in the Command File. The same seeds
  are used in the second series of runs so that the only difference in the model
  is in the time it takes to cut hair. This reduces variance in the results.</p>
  <p ALIGN="left">Now, create a simulation.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / Create
Simulation</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">This creates the Simulation Object and opens its Journal
  View. Next, we’ll use an Include-file to run the simulations. Remember, GPSS
  World will look for the Include-file in the same folder where the model object
  exists, if the simulation has not been saved, as in this case. If the
  simulation has been saved, it will look in the folder where the simulation
  object resides. Now do the Commands in the Include-file:</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / Custom</p>
</b><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">INCLUDE
&quot;ctlanova.txt&quot;</p>
</font></b><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">What happened? The simulation started to run automatically.
  You will see that the simulation has run 6 times in a few seconds. Now, let’s
  look at the Results Matrix we have built for the Analysis of Variance.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Window / Simulation
Window / Matrix Window</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">and when the Matrix Window Cross Section Dialog appears,</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">This opens the Matrix Window on the Results Matrix. You may
  want to expand the window if all the cells in the Matrix are not visible.
  Here, we can see the results of each individual simulation.</p>
  

</font><i><font SIZE="2">
<p>&nbsp;</p>
<p align="center"><img border="0" src="../images/T1_13_1.gif" width="584" height="207"></p>
<p align="center">Figure 13—1. The Results Matrix.</p>
</font></i>
<p ALIGN="JUSTIFY">&nbsp;</p>

  
    <p ALIGN="left">Now, its time for the analysis.</p>
  

<font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / Custom</p>

  
  </b><p ALIGN="center"></font><font face="Helvetica" size="2">TYPE</font><font FACE="Arial" SIZE="2">&nbsp;<font face="Helvetica" size="2">&nbsp;&nbsp;&nbsp;<b>
</b></font></font><b><font face="Arial" SIZE="2">SHOW ANOVA(Results,2,1)

  
  </font></b></p>
  

<font FACE="Arial" SIZE="2"><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">The ANOVA Procedure writes an ANOVA Table into the Journal
  Window and returns the F value of the analysis.</p>
  </font><i><font SIZE="2">
  <p>&nbsp;</p>
  <p align="center"><img border="0" src="../images/T1_13_2.gif" width="595" height="303"></p>
  <p align="center">Figure 13—2. An ANOVA Table in the Journal Window.</p>
</font></i>
<p ALIGN="JUSTIFY">&nbsp;</p>

  
    <p ALIGN="left">Let’s now interpret our results. The primary question
    is whether or not the effect of the faster barber is above the random noise
    level.</p>
    <p ALIGN="left">Look at the line for factor A in the ANOVA Table in the
    Journal Window. We find that the critical value of F for this experiment, at
    the 95% level, is 7.71. Since our calculated F value is much greater, we
    conclude that the effect of the faster barber is statistically significant.</p>
    <p ALIGN="left">Sometimes it is possible to expose real effects by
    increasing the durations of the simulations and/or the number of
    replications. We don’t need to worry about that here. The statistical
    significance of the faster barber is overwhelming.</p>
    <p ALIGN="left">Now look at the last line in the Journal. It shows the
    value returned by the ANOVA Library Procedure, 3.8797650. This is the
    Standard Error of the analysis and is available for use by Procedures which
    call the ANOVA routine.</p>
    <p ALIGN="left">The GPSS World ANOVA feature provides a very easy first
    level of statistical analysis. However, you may want to do more. In that
    case you may find that you want to create a results text file for input to a
    separate statistical analysis program. This is relatively easy using the
    OPEN, CLOSE, READ, WRITE, and SEEK GPSS Blocks, and the String formatting
    routines in the PLUS Library.</p>
    <p ALIGN="left">Also, the powerful GPSS World EXPERIMENT Procedure can be
    used to automatically direct and analyze the progress of an experiment
    involving many simulation runs. Lesson 19, below, goes deeper into the
    subject. We have really only touched the surface here.</p>
    <p ALIGN="left">As usual, close up all the windows before going on to the
    next lesson. You can leave the Main Window open if you don’t intend to
    stop now.</p>
    <p ALIGN="left">In the next lesson, we turn to an easier topic. We will
    look at how Reports are handled in GPSS World. See you then.</p>
    <b><font FACE="Arial" SIZE="5">
    <p>&nbsp;</p>
    </font>
  

</font>
    <h2 align="center"><font face="Arial" size="5"><a name="Lesson 14"></a>Lesson 14 - Reports</font></h2>
</b>
<font FACE="Arial" SIZE="2">
    <p ALIGN="left">The Report management system contains a number of unique
    capabilities. First you should know that reports are never automatically
    deleted and are always created unless you suppress them using NP as the B
    operand of the START Command. Each report is given a name that indicates the
    simulation that produced it. e.g., SAMPLE2.1.1, SAMPLE2.1.2, etc. The
    default name is derived from the file name of your model, the sequence
    number of the simulation created from that model and finally, the report
    number for that simulation version. These reports will remain even after the
    Session is ended.</p>
    <p ALIGN="left">If you choose to use a REPORT Command you can only use it
    interactively as</p>
    <p ALIGN="center"><b><font FACE="Arial">REPORT</p>
    </font></b>
    <p ALIGN="left">You can no longer give your reports names. Since reports
    are specially formatted files, if you wish to name them differently, you can
    copy the report to the clipboard and from there to a file with the name you
    choose to assign. Reports have an extension of &quot;gpr&quot;. The
    numbering scheme is meant to keep your reports ordered. If you wish to reset
    the simulation number, you can do so in the Settings Notebook.</p>
  

<font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE</font></font><font face="Helvetica" size="2">&nbsp;&nbsp;&nbsp;&nbsp;
</font><font FACE="Arial" SIZE="2"><b>File / Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Sample9</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Open</p>
</b><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Edit / Settings</p>
</b><font FACE="Helvetica" SIZE="2">
<p align="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; <u>The Random Numbers Page</p>

  
  </u></font><font FACE="Arial" SIZE="2">
<p ALIGN="left">The setting &quot;Child Object Sequence Number&quot; sets the
number of the simulation filename. If you have saved simulations from this
model, the number would be &gt;1. You can reset it to any value. This is the
value used in the report name.</p>
<p ALIGN="left">When you start a new GPSS World Session, reports generated
during that Session using the default name (simulation name plus simulation
sequence number plus report sequence number) will be numbered starting with the
first available sequence number after the highest number. Therefore, if you have
deleted selected reports, you could have sequence numbers in a Session that are
not contiguous.</p>
<p ALIGN="JUSTIFY">&nbsp;</p>
</font><b><font FACE="Arial" SIZE="4">
<p>The REPORT Command</p>
</font></b><font FACE="Arial" SIZE="2">
<p ALIGN="left">REPORT used in a Custom Command dialog box is used to produce
a report interactively at any time. The A operand of the Report Command, as used
in GPSS/PC</font></font><font face="Arial" size="1"><sup>tm</sup></font><font FACE="Arial" SIZE="2">,
is no longer used.
  

</font>
</p>
<p ALIGN="JUSTIFY">&nbsp;</p>
<font FACE="Arial" SIZE="2"><b><font FACE="Arial" SIZE="4">
<p>The REPORT Settings</p>
</font></b><font FACE="Arial" SIZE="2">
<p ALIGN="left">Now let’s look at some report settings.</p>
<p ALIGN="left">Move to the Reports Page in the Model Settings Notebook.</p>


</font><font FACE="Helvetica" SIZE="2">
<p align="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; <u>The Reports Page</p>

  
  </u></font><font FACE="Arial" SIZE="2">
<p ALIGN="left">You can see the default information that is included in
reports created by running the simulation that we just created. You can try
changing the choices if you like.</p>
<p ALIGN="left">Also, the settings are discussed in detail in chapter 2 of
the GPSS World Reference Manual.</p>
<p ALIGN="left">Let’s create a simulation from the opened model. first
close the Settings Notebook.</p>
<p ALIGN="left">Then</p>


</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / Create
Simulation</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">Now, see how a report is generated</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / START</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">We’ll use the 1 that’s already there.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">When the simulation completes, you’ll notice that a
  Report Window appears automatically as we expected. If you wish, you can
  increase the size of the window and examine the report more closely. For a
  detailed discussion of the items in the report, read Chapter 11 in the <i>GPSS
  World Reference Manual</i>.</p>
  

</font><i><font SIZE="2">
<p>&nbsp;</p>
<p align="center"><img border="0" src="../images/T1_14_1.gif" width="573" height="331"></p>
<p align="center">Figure 14—1. The Report Window.</p>
</font></i>
<p ALIGN="JUSTIFY">&nbsp;</p>

  
    <p ALIGN="JUSTIFY">Let’s run the simulation one more time so we have two
    reports.</p>
  

<font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / START</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">We’ll use the 1 that’s already there.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">When the simulation ends, you should see a second Report
  Window. Next, let’s close one of the Report Windows.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; <u>The X-Upper Right -
SAMPLE9.1.2 Window</p>
</u>
<p align="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; <u>No</p>

  
  </u></font><font FACE="Arial" SIZE="2">
<p ALIGN="JUSTIFY">when asked if you want to save the file. Then close the
second report window, but save this one.</p>


</font><font FACE="Helvetica" SIZE="2">
<p align="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; <u>The X-Upper Right -
SAMPLE9.1.1 Window</p>
</u>
<p align="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; <u>Yes</p>
</u>
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Save</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Now let’s open the report again.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>File / Open</p>
</b><font FACE="Helvetica" SIZE="2">
<p align="center">CLICK ON</font></font><font face="Helvetica" size="2">&nbsp;&nbsp;&nbsp;&nbsp;</font><font FACE="Arial" SIZE="2"><font FACE="Helvetica" SIZE="2">
<u>The down arrow at the end of the Files of type box</p>
</u>
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Report</p>
</b><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Sample9.1.1</p>
</b><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">Examine this report now if you like. Remember that you can
  always print any report from a Report Window by using the </font><b>File /
  Print</b><font FACE="Arial" SIZE="2">  option in the Main Menu.</p>
  <p ALIGN="left">Let’s try using the REPORT Command. First, we’ll start
  the simulation running for a long time and interrupt it.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; </font><u>Anywhere in the
Journal Window</p>
</u><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / Clear</p>
</b><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / START</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Replace the 1,</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">11111</p>
</font></b><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp; </font><b>OK</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Once the simulation is running, interrupt it.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">PRESS</font></font><font face="Helvetica" size="2">&nbsp;&nbsp;&nbsp;&nbsp;
<b>[F4]</b></font></p>
<font FACE="Arial" SIZE="2"><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / Custom</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">REPORT</p>
</font></b><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">In this lesson, we’ve learned about the sequence
  numbering that is used for reports; have examined the settings for reports and
  the contents of the GPSS World Report. We have also used the REPORT command.</p>
  <p ALIGN="left">If you wish to go on to the next lesson, close all windows.
  Don’t forget to delete all the reports that we have created that you no
  longer wish to keep using the Windows file management system.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; <u>The X-Upper Right of Each
Window</p>

  
  </u></font><font FACE="Arial" SIZE="2">
<p ALIGN="left">and answer the appropriate questions.</p>
<p ALIGN="left">In the next lesson, we will look at the Simulation Journal
use in GPSS World.</p>
<p ALIGN="JUSTIFY">&nbsp;</p>
<h2 ALIGN="center"><a name="Lesson 15"></a>LESSON 15 - Session Journaling</h2>
<p ALIGN="left">This lesson considers the GPSS World Journal. We have used
the Journal earlier in the this manual, but now we will examine it in a little
more detail.</p>
<p ALIGN="left">The Journal is a chronology of statements written to the
Journal / Simulation Window. When you save a simulation, all messages in the
Journal / Simulation Window are saved.</p>
<p ALIGN="left">The Session Journal collects trace messages, error messages,
and any interactive Commands.</p>
<p ALIGN="left">Let’s use SAMPLE5 to study the Journal / Simulation Window.</p>


</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>File / Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Sample5</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">When we create a simulation and run it, the Journal /
  Simulation Window will record any errors as well as any interactive actions
  such as SHOW or STEP commands. Now, let’s see how we can use the Journal
  Window for interactive debugging.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / Create
Simulation</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Let’s put a universal Stop Condition on the model so we
  can use the STEP Command and see the record in the Journal.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / Custom</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and in the dialog box</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">Stop</p>
</font></b><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and then</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / START</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and in the dialog box replace the 1</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">11</p>

  
  </font></b><font FACE="Arial" SIZE="2">
<p ALIGN="JUSTIFY">and</p>


</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">The simulation will stop immediately. Let’s use the STEP
  command.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">PRESS</font></font><font face="Helvetica" size="2">&nbsp;&nbsp;&nbsp;&nbsp;<b>
[F5]</b></font></p>

  
<font FACE="Arial" SIZE="2"><font FACE="Arial" SIZE="2">
<p ALIGN="left">a few times. Then look at the Journal Window. You may want to
enlarge its size or print it to look at the messages created. You can imagine
how helpful this window can be in tracking down errors.</p>
<p ALIGN="left">Let’s try something new. Let’s end the GPSS World Session
with no questions asked!</p>


</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / Custom</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">EXIT(1)</p>
</font></b><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">Wow! The whole GPSS World environment disappeared!</p>
  <p ALIGN="left">It was quick, but it also bypassed the &quot;Do you want to
  save ...&quot; queries designed to prevent you from losing your precious work.
  So be very careful with this. The EXIT Command is discussed more fully in
  Chapter 6 of the <i>GPSS World Reference Manual</i>.</p>
  <p ALIGN="left">In the next lesson, we will go into the use of the
  INTEGRATE Command.</p>
  <p ALIGN="JUSTIFY">&nbsp;</p>
  <h2 ALIGN="center"><a name="Lesson 16"></a>Lesson 16 - Continuous Modeling</h2>
  <p ALIGN="left">When you can express changes to variables in terms of their
  derivatives with respect to time, GPSS World can automatically keep their
  values up to date. By using the INTEGRATE Command, you can incorporate a
  system of ordinary differential equations of any order into your simulation.
  Although continuous modeling is quite general, and easily handles nonlinear
  systems, it is usually slower than other methods.</p>
  <p ALIGN="left">Please familiarize yourself with the basic concepts by
  reading the section, Continuous Simulation, in Chapter 4 of the <i>GPSS World
  Reference Manual</i>. See you when you get back.</p>
  <p ALIGN="left">As you have seen, the primary tools for continuous modeling
  are the INTEGRATE Command, which sets up the differential equation and
  thresholds, and the INTEGRATION Block, which can turn each integration on or
  off.</p>
  <p ALIGN="left">It’s easy to set up a continuous variable. All you have
  to do is to initialize the User Variable and assert the INTEGRATE Command.
  This gives GPSS World the starting value and all it needs to know in order to
  keep updating it. Let’s try it.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>File / New</p>
</b><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Model</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">in the dialog box.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">Let’s assume that we have a manufacturing system that
  creates 2 widgets a second. When a full truckload of widgets has been
  produced, the supervisor sends for a truck to hauls away a full load to one of
  the distribution centers. We start the simulation with an inventory of 0.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">Inventory
EQU 0</p>

  
  </font></b><font FACE="Arial" SIZE="2">
<p ALIGN="left">to set up the initial condition. On the next line</p>


</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">Inventory
INTEGRATE 2,Full_Load,Get_Truck</p>

  
  </font></b><font FACE="Arial" SIZE="2">
<p ALIGN="left">to set up the derivative. Usually, you will need to use a
PLUS Procedure to define the derivative. Then, you would use a parenthesized
procedure call in Operand A of the INTEGRATE Command.</p>
<p ALIGN="left">Notice that when the threshold is crossed a transaction will
be generated. We will use this to end the simulation.</p>


</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">Full_Load
EQU 50</p>

  
  </font></b><font FACE="Arial" SIZE="2">
<p ALIGN="left">Now when 50 widgets are created, a transaction will be sent
to the Block labeled Get_Truck.</p>
<p ALIGN="left">That is all you need for the continuous part. For the
discrete part, add the following statements to the model.</p>


</font><p align="left"><font face="Courier New" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;
  

</font>
  

</font>
<font size="2" face="Courier New">TYPE<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
GENERATE&nbsp; 100<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
TERMINATE<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Get_truck TERMINATE 1</font></p>
<p align="left"><font FACE="Arial" SIZE="2"></p>
<p ALIGN="left">You always need the discrete part to start and end the
simulation. In this case we will use the threshold to decrease the Termination
Count.</p>
<p ALIGN="left">Save the model if you might want to experiment later and don’t
want to type it in again.</p>


<font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / Create
Simulation</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">Before we start the simulation, open a Plot of the User
  Variable Inventory,</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Window / Simulation
Window / Plot Window</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">Then in the Edit Plot Window</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier">Inventory</p>

  
  </font></b><font FACE="Arial" SIZE="2">
<p ALIGN="JUSTIFY">in all three fields: Label, Expression, and Title. Leave the
other values as they are.</p>


</font><b><font FACE="Helvetica" SIZE="2">
<p ALIGN="center"></font></b><font FACE="Helvetica" SIZE="2">CLICK
ON&nbsp;&nbsp;&nbsp;&nbsp;<b>
</b><u>The Plot Button</p>
</u><b>
<p ALIGN="center"></b>CLICK ON<b>&nbsp;</b>&nbsp;&nbsp;&nbsp; <u>The Memorize
Button</p>

  
  </u></font><font FACE="Arial" SIZE="2">
<p ALIGN="JUSTIFY">Let's mark the threshold on the plot, as well. In the Edit
Plot Window in the Label entry field replace the current value</p>


</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">Threshold</p>

  
  </font></b><font FACE="Arial" SIZE="2">
<p ALIGN="JUSTIFY">and in the Expression entry field replace the current value</p>


</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">Full_Load</p>

  
  </font></b><font FACE="Arial" SIZE="2">
<p ALIGN="JUSTIFY">Leave the other values as they are and</p>


</font><font FACE="Helvetica" SIZE="2">
<p ALIGN="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp;<b> </b><u>The Plot Button</p>
</u>
<p ALIGN="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; <u>The Memorize Button</p>
</u>
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Expand the Plot Window to a good viewable size. Now start
  the simulation.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / START</p>
</b><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Your Plot Window should look like this.</p>
  </font><i><font SIZE="2">
  <p>&nbsp;</p>
  
  
  <p align="center"><img border="0" src="../images/T1_16_1.gif" width="581" height="299"></p>
  
  
  <p align="center">Figure 16—1. Inventory Plot.</p>
  
    
    </font></i><font FACE="Arial" SIZE="2">
  <p ALIGN="left">You should see the Inventory value increase to 50 very
  quickly, causing the simulation to end. In the Standard Report, it shows that
  it only took 25 simulated minutes to do the job. Therefore, you can determine
  that two widgets were manufactured per minute. The threshold was crossed at 25
  simulated minutes, a transaction was created and sent to the Block labeled
  Get_Truck. The INTEGRATION Block is available for Transaction-level control.
  It’s described in Chapter 7 of the <i>GPSS World Reference Manual</i>.</p>
  <p ALIGN="left">This was a very simple example for showing the basics. Most
  integrated variables do not have constant derivatives. A more realistic model
  is in Chapter 2 of this manual, under PREDATOR.GPS.</p>
  <p ALIGN="left">If we had wanted to cause the Inventory value to drop when
  the truck left, we would have to decrease the value in a User Variable. Since
  the EQU Command cannot be asserted by a Transaction, how would we do this?</p>
  <p ALIGN="left">The answer is a PLUS Procedure, which we will consider in
  the next lesson. Close the Plot Window before you move on to the next example.</p>
  <p ALIGN="left">Now let’s turn to an example where we know the solution
  before we even start.</p>
  <p ALIGN="left">Consider the following system of ordinary differential
  equations:</p>
  </font><b><font FACE="Courier New">
  <p ALIGN="CENTER">x_’ = y_</p>
  <p ALIGN="CENTER">y_’ = -x_</p>
  </font></b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and at time t = 0,</p>
  </font><b><font FACE="Courier New">
  <p ALIGN="CENTER">x_ = 1</p>
  <p ALIGN="CENTER">y_ = 0</p>
  </font></b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">The solution is</p>
  </font><b><font FACE="Courier New">
  <p ALIGN="CENTER">x_ = sin( t )</p>
  <p ALIGN="CENTER">y_ = -cos ( t )</p>
  </font></b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">Here we are using underscores to ensure that our variables
  will not clash with GPSS World keywords.</p>
  <p ALIGN="left">Let’s see what happens when we simulate this system.
  First close all open windows, leaving only the GPSS World Main Window.</p>
  <p ALIGN="left">To run the simulation and create a Plot, in the Model
  Window.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>File / Open</p>
</b><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Sample13</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and then</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Open</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Next, the simulation must be created.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / Create
Simulation</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Now, we set up a Plot of the User Variables, to observe the
  dynamics.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Window / Simulation
Window / Plot Window</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Then in the Edit Plot Window,</p>
  <p ALIGN="JUSTIFY">for the Label,</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">x_</p>

  
  </font></b><font FACE="Arial" SIZE="2">
<p ALIGN="JUSTIFY">and in the Expression field</p>


</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">x_</p>

  
  </font></b><font FACE="Arial" SIZE="2">
<p ALIGN="JUSTIFY">In the Plot Title,</p>


</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">Sine
/ Cosine Sample</p>

  
  </font></b><font FACE="Arial" SIZE="2">
<p ALIGN="JUSTIFY">and for a Time Range</p>


</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">120</p>

  
  </font></b><font FACE="Arial" SIZE="2">
<p ALIGN="JUSTIFY">For Y values for the Min</p>


</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">-2</p>

  
  </font></b><font FACE="Arial" SIZE="2">
<p ALIGN="JUSTIFY">and for Max</p>


</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">2</p>

  
  </font></b><font FACE="Arial" SIZE="2">
<p ALIGN="JUSTIFY">and</p>


</font><b><font FACE="Helvetica" SIZE="2">
<p ALIGN="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; </font></b><font FACE="Helvetica" SIZE="2"><u>The
Plot Button</p>
</u><b>
<p ALIGN="center">CLICK ON&nbsp;</b>&nbsp;&nbsp;&nbsp; <u>The Memorize Button</p>

  
  </u></font><font FACE="Arial" SIZE="2">
<p ALIGN="JUSTIFY">Now, add the other variable to the plot. In the Edit Plot
Window, replace the Label and Expression fields</p>


</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">y_</p>

  
  </font></b><font FACE="Arial" SIZE="2">
<p ALIGN="JUSTIFY">in both and leave the other values as they are.</p>


</font><b><font FACE="Helvetica" SIZE="2">
<p ALIGN="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; </font></b><font FACE="Helvetica" SIZE="2"><u>The
Plot Button</p>
</u><b>
<p ALIGN="JUSTIFY">CLICK ON </b><u>The Memorize Button</p>
</u>
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Before we begin the simulation, arrange the Plot Window so
  that it is large enough to view the details.</p>
  <p ALIGN="JUSTIFY">Now, play out the integration. From the Main Window menu</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / START</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Your plot should look like this.</p>
  </font><i><font SIZE="2">
  
  
  <p>&nbsp;</p>
  
  
  <p align="center"><img border="0" src="../images/T1_16_2.gif" width="554" height="286"></p>
  
  
  <p align="center">Figure 16—2. Sine Wave Plot.</p>
</font></i>
<p ALIGN="JUSTIFY">&nbsp;</p>

  
    <p ALIGN="left">As you can see, the familiar sine wave unfolds for both
    variables. When the simulation completes, examine the Standard Report.
    Compare the x_ variable with the Savevalue x_exact, which is calculated from
    the analytic solution. Do the values agree?</p>
    <p ALIGN="left">When you have the solution to the differential equations,
    consider yourself lucky and use it everywhere you can. Most real world
    systems of equations are much too unwieldy for that. Usually, you will be
    forced to play out the integration numerically, using one or more INTEGRATE
    Commands, which takes a lot more computer time.</p>
    <p ALIGN="left">Now, close all open windows.</p>
    <p ALIGN="left">We.., that's all for now. In the next lesson, we will
    learn about GPSS World's built-in Programming language called PLUS.</p>
    <p ALIGN="JUSTIFY">&nbsp;</p>
  

</font>
    <b>
    <h2 align="center"><font face="Arial" size="5"><a name="Lesson 17"></a>Lesson 17- PLUS</font></h2>
</b>
<font FACE="Arial" SIZE="2">
    <p ALIGN="left">This lesson considers PLUS, the <u>P</u>rogramming <u>L</u>anguage
    <u>U</u>nder <u>S</u>imulation. See the &quot;PLUS Primer&quot; at the end
    of this lesson for practical examples of the use of PLUS.</p>
    <p ALIGN="left">As we have learned, Model Statements are the building
    blocks of Models, and they can be sent interactively to an existing
    simulation.</p>
    <p ALIGN="left">However, the only PLUS Statements that are Model
    Statements are the PROCEDURE and EXPERIMENT Statements. All other PLUS
    Statements can exist only within the body of a Procedure. PLUS Expressions
    are a little different. They can exist within PLUS Statements, or, when
    parenthesized, within the operands of GPSS Statements.</p>
    <p ALIGN="left">There are only a few different PLUS Statement types. They
    are:</p>
    <b>
    
    
    <p>EXPERIMENT </b>— Define a PLUS Experiment.</p>
    <b>
    <p>PROCEDURE </b>— Define a PLUS Procedure.</p>
    <b>
    <p>TEMPORARY </b>— Define and restrict the scope of a User Variable.</p>
    <b>
    <p>TEMPORARY MATRIX </b>— Define and restrict the scope of a Matrix
    Entity.</p>
    <b>
    <p>BEGIN / END </b>— Compound Statement. Create a block of PLUS
    Statements.</p>
    <p>Assignment — Set the value of a Named Value or Matrix element.</p>
    <p>Procedure Call — Invoke a Library Procedure.</p>
    <b>
    <p>IF / THEN </b>— Test an expression and act on a &quot;TRUE&quot;
    result.</p>
    <b>
    <p>IF / THEN / ELSE </b>— Test an expression and act on the result.</p>
    <b>
    <p>WHILE / DO </b>— Perform action repetitively.</p>
    <b>
    <p>GOTO </b>— Jump to a new location within the Procedure.</p>
    <b>
    <p>RETURN </b>— Finish the processing and, optionally, give a result to
    the caller.</p>
    
    
    <p ALIGN="JUSTIFY">&nbsp;</p>
    <p ALIGN="left">Please turn now to Chapter 8 in the GPSS World Reference
    Manual, and read about the PLUS Language.</p>
    <p ALIGN="left">Welcome back. Did you notice that a PROCEDURE Statement
    has a slot for only one statement? Usually, you will use a Compound
    Statement there, and it will enclose a Statement List. However, any single
    valid PLUS Statement goes there just as well.</p>
    <p ALIGN="left">In this lesson we will not use all the PLUS Statements.
    Here we will demonstrate the definition and interactive redefinition of
    Procedures, and some tips on debugging PLUS Procedures interactively.</p>
    <p ALIGN="left">Let’s begin by defining a Procedure that can set the
    value of a User Variable.</p>
  

<font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;</font></font><font face="Helvetica" size="2">&nbsp;&nbsp;&nbsp;
    </font><font FACE="Arial" SIZE="2"><b>File / New</p>
</b><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Model</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Then</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>
</b><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">PROCEDURE
SetPop(level) Foxes = level ;</p>

  
  </font></b><font FACE="Arial" SIZE="2">
<p ALIGN="left">Although most PLUS Procedures are more complex, this is all
that is needed to define one. It doesn’t even declare a return value, so a
return value of 0 would be used by default. Return values are useful when a PLUS
Procedure passes information to a calling Procedure. We don’t use it in this
simple example.</p>
<p ALIGN="left">Now save the model.</p>


</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>File / Save As</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Then</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">Fox</p>

  
  </font></b><font FACE="Arial" SIZE="2">
<p align="left">for the name of the model and</p>
</font><font FACE="Helvetica" SIZE="2">


<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Save</p>
</b><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / Create
Simulation</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">We have included the Procedure SetPop as part of the Model
  and then created the Simulation. Any invocations of SetPop interactively or
  within the simulation will now use this definition.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / SHOW</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and in the dialog box</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">SetPop(100)</p>

  
  </font></b><font FACE="Arial" SIZE="2">
<p ALIGN="JUSTIFY">and</p>


</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">Notice that the return value from the SetPop Procedure was
  0. Let’s look at the population level.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / SHOW</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">and in the dialog box</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">Foxes</p>

  
  </font></b><font FACE="Arial" SIZE="2">
<p ALIGN="left">and</p>


</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">See? The User Variable Foxes was updated when we did the
  first SHOW. Now lets redefine the SetPop Procedure interactively.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / Custom</p>
</b><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">PROCEDURE SetPop(level)</font><font FACE="Courier">
</font><font FACE="Courier New">Foxes = level # 10 ;</p>

  
  </font></b><font FACE="Arial" SIZE="2">
<p ALIGN="JUSTIFY">and</p>


</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">Now, when the SetPop Procedure is invoked, the population
  will be set to ten times the argument. Again</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / SHOW</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">and in the dialog box</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">SetPop(100)</p>

  
  </font></b><font FACE="Arial" SIZE="2">
<p ALIGN="JUSTIFY">and</p>


</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">Notice that the return value from the SetPop Procedure was
  0 again. We could have inserted a RETURN Statement into SetPop. In fact,
  SetPop could be nothing more than a single RETURN Statement.</p>
  <p ALIGN="left">Let’s look at the population level.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / SHOW</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and in the dialog box</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">Foxes</p>

  
  </font></b><font FACE="Arial" SIZE="2">
<p ALIGN="JUSTIFY">and</p>


</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">As you can see, although the simulation had already been
  sent to the Simulation Object, we were able to redefine the Procedure
  interactively. This can be useful when you need to debug your own PLUS
  Procedures, as we will discover next.</p>
  <p ALIGN="left">For now, close both the Model Window and the Journal
  Window.</p>
  <p ALIGN="JUSTIFY">&nbsp;</p>
  </font><b><font FACE="Arial" SIZE="4">
  <p>Debugging PLUS Procedures</p>
  </font></b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">When you are debugging your PLUS Procedures, the first
  thing to do is to turn on the PLUS Trace in the Reports Pages of the Settings.
  Then every invocation causes a record to be written to the Journal Window.
  These traces are indented to show the depth of the processing, and they list
  the evaluated arguments of the invocation. It’s easy to trace within PLUS
  Procedures as well. Just create one or more dummy PLUS Procedures that do
  nothing. Then you can pepper your primary PLUS Procedure(s) with calls to this
  debugging Procedure, and when the PLUS Trace is on you will receive traces in
  the Journal Window showing the state of your variables.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>File / New</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">and since Model is already highlighted</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">Enter the following PLUS Procedures.</p>
  </font><font FACE="Helvetica" SIZE="2">
  <p align="left">&nbsp;&nbsp;&nbsp;</font>
  

  &nbsp; </font><font face="Helvetica" size="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    </font><font FACE="Arial" SIZE="2"><font FACE="Helvetica" SIZE="2">
  TYPE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
    </font>
  <p align="left"><font FACE="Courier New">&nbsp;&nbsp;&nbsp;
  </font>
  

</font>
    <font face="Courier New" size="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    PROCEDURE RabbitRate() BEGIN<br>
    &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    TEMPORARY BirthRate,DeathRate,TotRate;<br>
    &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    BirthRate = 100;<br>
    &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    Dummy(BirthRate);<br>
    &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    DeathRate = 80 ;<br>
    &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    RETURN TotRate;<br>
    &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    END;
    </font></p>
  <p align="left"><font face="Courier New"><font SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PROCEDURE Dummy(
    argument ) RETURN;
  

</font>
  </font></p>
<font FACE="Arial" SIZE="2"><font FACE="Courier New">
    <b>
  <p>&nbsp;</p>
    </b>
  </font><font FACE="Arial" SIZE="2">
  <p ALIGN="left">Don’t forget the final semicolons. We have defined a
  dummy procedure for the sole purpose of tracing the value of our local
  variable. The PLUS Trace must be on for this to work. Let’s turn it on</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Edit / Settings</p>
</b><font FACE="Helvetica" SIZE="2">
<p align="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; <u>The Reports Page of the
Settings Notebook</p>
</u>
<p align="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; <u>The PLUS Trace box</p>

  
  </u></font><font FACE="Arial" SIZE="2">
<p ALIGN="JUSTIFY">Now, save the model.</p>


</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>File / Save As</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Then for the name of the file</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">Rates</p>
</font></b><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Save</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Next, create the simulation</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / Create
Simulation</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">So far, so good. If you inadvertently made typing errors,
  use </font><b><font SIZE="2">Search / Next Error</font></b><font FACE="Arial" SIZE="2">
  in the Model Window to find and correct them. Now invoke the Procedure.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / SHOW</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and in the dialog box</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">RabbitRate()</p>

  
  </font></b><font FACE="Arial" SIZE="2">
<p ALIGN="JUSTIFY">and</p>


</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">We got an error message. Take a close look at each line in
  the message. It tells us the line number where the error occurred. Let’s put
  the cursor at that point. Make sure that the Model Window has the focus.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Search / Go To Line</p>
</b><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">5</p>

  
  </font></b><font FACE="Arial" SIZE="2">
<p ALIGN="JUSTIFY">and</p>


</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">Apparently, this line is trying to use a value from a
  Temporary User Variable that was never initialized. As we can see this is true
  for the TotRate Variable. We forgot to initialize it. Just above the line in
  error,</p>
  <p ALIGN="JUSTIFY">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  TYPE </font><b><font FACE="Courier New">TotRate = BirthRate - DeathRate ;</p>
  </font></b><font FACE="Arial">
  <p ALIGN="JUSTIFY">and, after that</p>
  </font><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  TYPE </font><b><font FACE="Courier New">Dummy(TotRate);</p>
  </font></b><font FACE="Arial" SIZE="2">
  <p ALIGN="left">This time we are NOT going to Retranslate the Model. We are
  going to redefine the Procedure and still maintain the existing simulation
  environment. We do this by using an Interactive INCLUDE Command. This may seem
  cumbersome, but it is meant to show you the power of the INCLUDE Command.</p>
  <p ALIGN="left">First, copy the text in the Model Window to the Window
  Clipboard. Next, we will create a text file.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>File / New</p>
</b><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Text File</p>
</b><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and then paste the Clipboard contents into the new Text
  File and save the file.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>File / Save As</p>
</b><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">RateDef</p>

  
  </font></b><font FACE="Arial" SIZE="2">
<p ALIGN="JUSTIFY">for the file name and</p>


</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Save</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">This creates a TEXT file that can be used as the
  Include-file. All Include-files must be plain text files. Now, let’s
  redefine SetPop() in the existing simulation. That means using INCLUDE, not
  Retranslate.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / Custom</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and in the dialog box</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">INCLUDE
&quot;RateDef.txt&quot;</p>

  
  </font></b><font FACE="Arial" SIZE="2">
<p ALIGN="JUSTIFY">and</p>


</font><font FACE="Helvetica" SIZE="2">
<p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">So far, so good. Notice that we did not Retranslate. Now
  invoke the Procedure.</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / SHOW</p>

  
  </b><font FACE="Arial" SIZE="2">
  <p ALIGN="JUSTIFY">and in the dialog box</p>
  

</font><font FACE="Helvetica" SIZE="2">
<p align="center">TYPE&nbsp;</font><font FACE="Helvetica" SIZE="2">&nbsp;&nbsp;&nbsp;
</font><b><font FACE="Courier New">RabbitRate()</p>

  
  </font></b><font FACE="Arial" SIZE="2">
<p ALIGN="left">There. That fixed the problem. It was easy to redefine the
Procedure interactively.</p>
<p ALIGN="left">You may find it convenient to make minor modifications to the
PLUS Procedure when you are testing it. First, you may want to &quot;comment
out&quot; TEMPORARY Statements, as long as none of the Temporary User Variable
or Matrix Names clash with global entities. If there is a conflict, global
variables could be altered. It is best to keep the Temporary names unique.
Simply place /* at the beginning of each TEMPORARY or TEMPORARY MATRIX
Statement, and */ after it. This will cause your intermediate results to be
available after the Procedure ends. Second, you can add additional Assignment
Statements and RETURN Statements to stop the Procedure wherever you like.</p>
<p ALIGN="left">Don’t forget that you can always insert calls to a dummy
PLUS Procedure to get watch how your variables are changing. Of course, the PLUS
Trace must be turned on in the Settings of the Simulation in order to get the
traces in the Journal Window.</p>
<p ALIGN="left">Hopefully, reviewing the example models in this lesson and
the examples in the Plus Primer that follows will help you to understand some of
the potential of PLUS. Also, the sample model PREDATOR.GPS in Chapter 2 of this
manual uses a PLUS Procedure.</p>
</font><b><font FACE="Arial" SIZE="5">
<p>&nbsp;</p>
</font></b>
  

</font>
<b><p><font face="Arial" size="5">PLUS PRIMER</font></p>
</b><font FACE="Arial" SIZE="2">
    
      
        <p ALIGN="left">PLUS is a powerful programming language that can be
        used nearly anywhere in a GPSS World model. Most GPSS Statement operands
        can take a PLUS expression wrapped in a pair of parentheses. Stop for a
        moment to consider what that means. Sure, PLUS expressions can be a set
        of elements including SNAs and numeric values. But they can also contain
        calls to PLUS Procedures defined by you. You may only need a special
        calculation to be incorporated into the expression evaluation. But at
        times you may want to use a PLUS Procedure for its ability to change
        permanent values.</p>
        <p ALIGN="left">The purpose of this section is to augment the PLUS
        Lesson with uses for this powerful language that is included in your
        GPSS World software. It gives some additional practical examples, and a
        step by step description of how each Model and Plus Procedure work. The
        examples are included with the sample models. Unless you have changed
        their destination on installation, you will find them in the GPSS World
        Samples Folder.</p>
        <p ALIGN="left">PLUS Procedures must be defined before you can use
        them. You define them in PROCEDURE Statements, and you use them by
        placing Procedure Calls in expressions.</p>
        <p ALIGN="left">Every PLUS Procedure Statement starts with your
        Procedure name and the formal argument list. This latter is a list of
        zero or more replacement names that determine how arguments supplied in
        the Procedure Call are to be used.</p>
        <p ALIGN="left">Although the arguments used in a Procedure Call are
        called &quot;Actual Arguments&quot;, each one can be a complicated
        expression, which is evaluated at the time the Procedure Call is
        evaluated. It is the result of each of these argument evaluations which
        is used in place of the &quot;Formal Arguments&quot; declared in the
        Procedure definition. The final value of each argument is matched by
        position only.</p>
        <p ALIGN="left">In the examples that follow, you will find PLUS
        reserved names in upper case letters. They need not be upper case when
        you use them in your Models.</p>
</font>
<p><font face="Courier New" size="2">; GPSS World Sample File - PLUSANS.GPS<br>
;<br>
; This model uses the same PLUS Procedure to do<br>
; different operations dependent on the Arguments<br>
; passed to it.<br>
;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GENERATE ,,,1<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ASSIGN 1,500<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ASSIGN 2,1234<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ASSIGN Type,1 ;Assign calc type.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SAVEVALUE Ans,(Comp(P1,P2,P$Type))
;1st result<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TERMINATE 1<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GENERATE ,,,1<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ASSIGN 1,260<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ASSIGN 2,2<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ASSIGN Type,2 ;Assign calc type.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SAVEVALUE Ans1,(Comp(P1,P2,P$Type))
;2nd result<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TERMINATE 1<br>
<br>
PROCEDURE Comp(Arg1,Arg2,Arg3)BEGIN<br>
&nbsp;&nbsp;&nbsp; TEMPORARY Name1;<br>
&nbsp;&nbsp;&nbsp; IF (Arg3=1) THEN BEGIN<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Name1=((Arg1#Arg2)/3);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RETURN (Catenate(Name1,&quot; is the answer.&quot;));<br>
&nbsp;&nbsp;&nbsp; END;<br>
&nbsp;&nbsp;&nbsp; ELSE BEGIN<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Name1=(Arg1+Arg2);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RETURN (Catenate(Name1,&quot; is the second answer.&quot;));<br>
&nbsp;&nbsp;&nbsp; END;<br>
END;<br>
</font></p>
<font FACE="Arial" SIZE="2">
    
      
        <p ALIGN="left">In this example, a PLUS Procedure is called when
        operand B of a SAVEVALUE block is evaluated. The same Procedure is used
        in two different places in the model and the action in the Procedure is
        determined by one of the arguments that identifies the type of operation
        to be used. When the Type passed as Arg3 is 1, the first part of the
        IF..THEN..ELSE is executed, if the Type is 2, the ELSE portion of the
        statement is executed. In both cases, a TEMPORARY variable is created
        inside the Procedure to receive the results of the calculation. The
        calculation could also be done directly in the RETURN statement and then
        the TEMPORARY variable would not be necessary. It is used more for
        clarity. A TEMPORARY variable only survives until the Procedure returns.
        In the call to the Procedure where the value to be placed in the
        SAVEVALUE Ans is being calculated, The values 500 and 1234 are received
        by the Procedure in Arg1 and Arg2. Arg3 receives the value in the Type
        parameter. Since Arg3=1 the following two steps after the IF....THEN
        statement are performed. The RETURN statement uses the String Library
        command CATENATE to combine two values into a single string which is
        then placed in the SAVEVALUE Ans and the Procedure ends. The BEGIN and
        END statements surrounding the IF and ELSE are necessary to insure that
        both actions are performed.</p>
        <p ALIGN="left">Note that all PROCEDURE definitions surround the
        PROCEDURE with a BEGIN and END. Also each statement ends with a
        &quot;;&quot;. Even Statements within an IF...THEN....ELSE Statement end
        in a &quot;;&quot;.</p>
        <p ALIGN="left">To run this model, after it is translated, use a
        Start 2. When the model has run to completion, you can view the values
        in the SAVEVALUES Ans and Ans1 by pressing<b> [F8]</b> and <b>[F9]</b>.
        These Function keys have been preloaded with Show commands on the
        Function Keys page of the Model Settings Notebook.</p>
</font>
        <p><font FACE="Courier New" size="2">
        ; GPSS World Sample File - MIN.GPS<br>
        ;<br>
        ; This model takes a series of numbers that are picked according<br>
        ; to probabilities as defined in the Function, Myfunc and then<br>
        ; uses a PLUS procedure to select the minimum value. The result<br>
        ; is placed in the Savevalue, Low. When the model has run, the<br>
        ; four values, Val1, Val2, Val3, and Val4 can be displayed in<br>
 </font>
<font FACE="Arial" size="2">
    
      
        <font FACE="Courier New">
        ; the status line by pressing the function keys </font><b>[F5]</b><font FACE="Courier New">, </font><b>[F6]</b><font FACE="Courier New">, </font><b>[F7]</b><font FACE="Keycaps"><br>
        </font><font FACE="Courier New">
        ; and </font><b>[F8]</b><font FACE="Courier New">,
        respectively. The lowest value is displayed by pressing<br>
        ; function key </font><b>[F9]</b><font FACE="Courier New">.
        These keys have been preset in the Model<br>
        </font></font><font FACE="Courier New" size="2">; Settings Notebook on the Keys page.<br>
        ;<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GENERATE ,,,1 ;Create 1 Xact.<br>
        Myfunc&nbsp; FUNCTION RN2,D4 ;Random probabilistic pick of values.<br>
        .25,5/.50,7/.80,8/1,2<br>
        </font><font FACE="Courier New" size="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        SAVEVALUE Val1,FN$Myfunc ;Assign value.<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SAVEVALUE Val2,FN$Myfunc ;Assign value.<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SAVEVALUE Val3,FN$Myfunc ;Assign value.<br>
        </font><font FACE="Courier New" size="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        SAVEVALUE Val4,FN$Myfunc ;Assign value.<br>
        ;Send values to PLUS to select<br>
        ; min value and put in Savevalue.<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SAVEVALUE Low,(Minimum(X$Val1,X$Val2,X$Val3,X$Val4))<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TERMINATE 1 ;End simulation.<br>
        <br>
        PROCEDURE Minimum(Arg1,Arg2,Arg3,Arg4) BEGIN<br>
        &nbsp;&nbsp;&nbsp; TEMPORARY Lowval;<br>
        &nbsp;&nbsp;&nbsp; IF (Arg1&lt;=Arg2) THEN Lowval=Arg1;<br>
        &nbsp;&nbsp;&nbsp; ELSE Loval=Arg2;<br>
        &nbsp;&nbsp;&nbsp; IF (Lowval&gt;Arg3) THEN Lowval=Arg3;<br>
        &nbsp;&nbsp;&nbsp; IF (Lowval&gt;Arg4) THEN Lowval=Arg4;<br>
        &nbsp;&nbsp;&nbsp; RETURN (Lowval);<br>
        END;</font></p>
        <p align="left"><font FACE="Courier New" size="2"><br>
        </font>
<font FACE="Arial" SIZE="2">
    
      
        This model can be run with a START 1. After four
        values have been assigned to four SAVEVALUES using the GPSS Discrete
        Random Function called Myfunc, the lowest value is placed in the
        SAVEVALUE &quot;Low&quot; by calling the Procedure &quot;Minimum&quot;.
        This PLUS Procedure compares the values by using a series of IF
        Statements. The TEMPORARY variable &quot;Lowval&quot; is used to hold
        the intermediary values and finally the value that is determined to be
        lowest by comparison. That value is then returned to Operand B of the
        SAVEVALUE block. When the model run completes, press <b>[F5]</b>, <b>[F6]</b>,
        <b>[F7]</b>,
        and <b>[F8] </b>to
        see the values that were compared in the Status Line of the Main Window.
        <b>[F9] </b>will
        show you the lowest value chosen from the four.</p>
        <font FACE="Arial">
        <p ALIGN="JUSTIFY">&nbsp;</p>
        </font></font>
        <p><font face="Courier New" size="2">
        ; GPSS World Sample File - FACTORL.GPS<br>
        ;<br>
        ; This model uses a PLUS Procedure to calculate<br>
        ; factorials.<br>
        ; You can either change the Initial statement to<br>
        ; calculate factorials based on different values<br>
        ; or use the Initial command after the model is<br>
        ; Translated to Initialize the SAVEVALUE Facval.<br>
        ; After the model has run, you can press the<br>
        ; function key s
        to display the value of the<br>
        ; calculation in the status line. This function<br>
        ; key has been preset to display X$Answer.<br>
        ; This PLUS Procedure is designed to calculate<br>
        ; Factorials for positive integers only.<br>
        ;<br>
        INITIAL X$Facval,10<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GENERATE 1<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SAVEVALUE Answer,(Factorial(X$Facval))<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TERMINATE 1<br>
 </font></p>
        <p><font face="Courier New" size="2">
        PROCEDURE Factorial(Arg1) BEGIN<br>
        &nbsp;&nbsp;&nbsp; TEMPORARY Result;<br>
        &nbsp;&nbsp;&nbsp; Result=1;<br>
        &nbsp;&nbsp;&nbsp; WHILE(Arg1&gt;1) DO BEGIN<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result=Result#Arg1;<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Arg1=(Arg1-1);<br>
        &nbsp;&nbsp;&nbsp; END;<br>
        &nbsp;&nbsp;&nbsp; RETURN Result;<br>
        END;<br>
        </font></p>
<font FACE="Arial" SIZE="2">
    
      
        <font FACE="Arial" SIZE="2">
        <p ALIGN="JUSTIFY">This PLUS Procedure uses a WHILE loop. It takes an
        Argument that is provided via the evaluation of a SAVEVALUE and finds
        the factorial of that value by looping through the WHILE DO,
        accumulating a result by multiplying the TEMPORARY &quot;Result&quot;
        (which is originally set equal to 1) by the variable Arg1. With each
        loop, Arg1 is decreased by one until it reaches 1. At this point, the
        loop is ended and the RETURN is executed which passes the final
        accumulated value back to Operand B of the SAVEVALUE Answer. You can
        view the SAVEVALUE, Answer, by pressing <b>[F8]</b>,
        which has been preset with a Show command in the Model Settings
        Notebook. Use START 1 to run the simulation</p>
        <p ALIGN="JUSTIFY">You can call PLUS Procedures interactively, as well,
        once you have translated the model. Try this using a Custom Command:</p>
        
      
      <b>
      <p ALIGN="CENTER">SHOW&nbsp;&nbsp;&nbsp;&nbsp; </b>Factorial(10)</p>
      
        
          <p ALIGN="JUSTIFY">This can be useful in model verification and
          debugging. Procedures can even be redefined inertactively, as well.</p>
 </font></font>
        <p><font face="Courier New" size="2">
        ; GPSS World Sample File - FACTORL1.GPS<br>
        ;<br>
        ; This model uses a recursive PLUS Procedure to<br>
        ; calculate factorials.<br>
        ; You can either change the Initial statement to<br>
        ; calculate factorials based on different values<br>
        ; or use the Initial command after the model is<br>
        ; Translated to Initialize the SAVEVALUE Facval.<br>
        ; After the model has run, you can press the<br>
        ; function key [F8] to display the value of the<br>
        ; calculation in the status line. This function<br>
        ; key has been preset to display X$Answer.<br>
        ; This PLUS Procedure is designed to calculate<br>
        ; Factorials for positive integers only.<br>
        ;<br>
        INITIAL X$Facval,10<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GENERATE 1<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SAVEVALUE Answer,(Factorial(X$Facval))<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TERMINATE 1<br>
        <br>
        PROCEDURE Factorial(Arg1) BEGIN<br>
        &nbsp;&nbsp;&nbsp; IF (Arg1&lt;=1) THEN RETURN 1;<br>
        &nbsp;&nbsp;&nbsp; ELSE RETURN (Arg1#(Factorial(Arg1-1)));<br>
        END;<br>
        </font></p>
<font FACE="Arial" SIZE="2"><font FACE="Arial" SIZE="2">
        <p ALIGN="JUSTIFY">This approach to calculating the Factorial uses a
        recursive Procedure call. A Procedure actually calls itself from within
        itself repeating again and again until Arg1 reaches 1. PLUS can also
        call other Procedures from within a Procedure. Arguments in such calls
        are kept as long as needed on a stack of arguments called the Procedure
        Call Stack. The maximum stack size can be changed in the Model Settings
        Notebook. Again, use START 1 to run the simulation.</p>
        <p ALIGN="JUSTIFY">The following are the input and output files
        associated with the GPSS World model, MATINIT.GPS that follows.</p>
        </font><b><font FACE="Courier New" SIZE="1">
        <p>&nbsp;&nbsp;&nbsp;
        </font></b></font><b><font face="Courier New" size="1"> </font><font face="Courier New" size="2">Input File - Inpt.txt</font></p>
<font face="Courier New" size="1">
        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp;
        6<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp;&nbsp;
        3<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 33&nbsp;&nbsp; 3&nbsp;&nbsp;&nbsp;
        1<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6&nbsp;&nbsp;&nbsp; 6&nbsp;&nbsp;&nbsp;
        4<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp; 2343 1<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6&nbsp;&nbsp;&nbsp; 45&nbsp;&nbsp;
        4<br>
        &nbsp;&nbsp;&nbsp;</font></b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<b><font face="Courier New" size="1">4&nbsp;&nbsp;&nbsp; 6&nbsp;&nbsp;&nbsp; 7&nbsp;</font></b></p>
<b><font face="Courier New" size="1">
        <p>&nbsp;&nbsp;&nbsp; </font><font face="Courier New" size="2">Output File - Outpt.txt</font></p>
<font face="Courier New" size="1"><p>&nbsp;&nbsp;&nbsp; Initial MX$Values(1,1),1<br>
&nbsp;&nbsp;&nbsp; Initial MX$Values(1,2),2<br>
&nbsp;&nbsp;&nbsp; Initial MX$Values(1,3),6<br>
&nbsp;&nbsp;&nbsp;</font></b>&nbsp; <font face="Courier New" size="1"><b>Initial MX$Values(2,1),2<br>
&nbsp;&nbsp;&nbsp; Initial MX$Values(2,2),4<br>
&nbsp;&nbsp;&nbsp; Initial MX$Values(2,3),3<br>
&nbsp;&nbsp;&nbsp;</b></font>&nbsp; <b><font face="Courier New" size="1">Initial MX$Values(3,1),33<br>
&nbsp;&nbsp;&nbsp;</font></b>&nbsp; <font face="Courier New" size="1"><b>Initial MX$Values(3,2),3<br>
&nbsp;&nbsp;&nbsp;</b></font>&nbsp; <b><font face="Courier New" size="1">Initial MX$Values(3,3),1<br>
&nbsp;&nbsp;&nbsp; Initial MX$Values(4,1),6<br>
&nbsp;&nbsp;&nbsp; Initial MX$Values(4,2),6<br>
&nbsp;&nbsp;&nbsp;</font></b>&nbsp; <b><font face="Courier New" size="1">Initial MX$Values(4,3),4<br>
&nbsp;&nbsp;&nbsp;</font></b>&nbsp; <font face="Courier New" size="1"><b>Initial MX$Values(5,1),5<br>
&nbsp;&nbsp;&nbsp;</b></font>&nbsp; <font face="Courier New" size="1"><b>Initial MX$Values(5,2),2343<br>
&nbsp;&nbsp;&nbsp;</b></font>&nbsp; <b><font face="Courier New" size="1">Initial MX$Values(5,3),1<br>
&nbsp;&nbsp;&nbsp; Initial MX$Values(6,1),6<br>
&nbsp;&nbsp;&nbsp;</font></b>&nbsp; <font face="Courier New" size="1"><b>Initial MX$Values(6,2),45<br>
&nbsp;&nbsp;&nbsp;</b></font>&nbsp; <b><font face="Courier New" size="1">Initial MX$Values(6,3),4<br>
&nbsp;&nbsp;&nbsp;</font></b>&nbsp; <font face="Courier New" size="1"><b>Initial MX$Values(7,1),4<br>
&nbsp;&nbsp;&nbsp;</b></font>&nbsp; <b><font face="Courier New" size="1">Initial MX$Values(7,2),6<br>
&nbsp;&nbsp;&nbsp;</font></b>&nbsp; <font face="Courier New" size="1"><b>Initial MX$Values(7,3),7</p>
        <p>&nbsp;</p>
</b></font>
        <p><font size="2" face="Courier New">; GPSS World Sample File - MATINIT.GPS<br>
        ;<br>
        ; This model reads an external ASCII data file into<br>
        ; a Matrix in GPSS World. It then cycles through<br>
        ; the Matrix and writes out an Initial statement<br>
        ; for each cell of the Matrix. A PLUS Procedure is<br>
        ; used to separate the parts of the statement to be<br>
        ; written. Since PLUS can use a multi-line format<br>
        ; the statement can appear on multiple lines and<br>
        ; the portions of it can be assigned to temporary<br>
        ; variables that will not survive outside the PLUS<br>
        ; Procedure. This makes the statement easier to<br>
        ; handle and interpret than if it were strung<br>
        ; across in Operand A of the Write block.<br>
        Values&nbsp; MATRIX&nbsp;&nbsp;&nbsp;&nbsp; ,10,3 ;Defines Matrix.<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GENERATE&nbsp;&nbsp; ,,,1 ;Produce only one Xact.<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OPEN (&quot;Inpt.txt&quot;),1,Flag ;Open external file to be read.<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OPEN (&quot;Outpt.txt&quot;),2,Flag1 ;Open output file to which
        output<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        ; will be written.<br>
        Again&nbsp;&nbsp; READ Excel,1,Finis ;Read Inpt.dat one line<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        ; at a time into parameter.<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        ; Excel. At end or error;<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        ; go to label Finis.<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SAVEVALUE Rownum+,1&nbsp;&nbsp;&nbsp;&nbsp;
        ;Increase Matrix row by 1.<br>
        Morecol SAVEVALUE Colnum+,1&nbsp;&nbsp;&nbsp;&nbsp; ;Increase Matrix column by 1.<br>
        </font><font size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        MSAVEVALUE Values,X$Rownum,X$Colnum,(Word(P$Excel,X$Colnum))<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        ;Store the value in the parameter<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        ; in the Matrix cell.<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TEST G&nbsp;&nbsp;&nbsp;
        X$Colnum,2,Morecol ;Are there more columns to be loaded?<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SAVEVALUE Colnum,0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        ;No more columns? Start next row<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TRANSFER&nbsp; ,Again&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        ; at label Again.<br>
        Finis&nbsp;&nbsp; CLOSE&nbsp;&nbsp;&nbsp;&nbsp; Prob,1,Flag2&nbsp; ;Close data file.<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ASSIGN&nbsp;&nbsp;&nbsp; Colnum,0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        ;Prepare to cycle<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ASSIGN&nbsp;&nbsp;&nbsp; Rownum,0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        ; thru Values Matrix<br>
        Again2&nbsp; ASSIGN&nbsp;&nbsp;&nbsp; Rownum+,1&nbsp;&nbsp;&nbsp;&nbsp; ; from the beginning<br>
        More&nbsp;&nbsp;&nbsp; ASSIGN&nbsp;&nbsp;&nbsp; Colnum+,1<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TEST LE&nbsp;&nbsp; P$Rownum,7,Finis2 ;Has final row been processed?<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WRITE (WriteInitial()),2,Wrtebug ;Write Initial<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        ; Statement using<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        ; PLUS Procedure.<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TEST G&nbsp;&nbsp;&nbsp; P$Colnum,2,More ;Are there more columns?<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ASSIGN&nbsp;&nbsp;&nbsp; Colnum,0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        ;Set Column number to 0.<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TRANSFER&nbsp; ,Again2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        ;Start Next row.<br>
        Finis2&nbsp; CLOSE&nbsp;&nbsp;&nbsp;&nbsp; Prob2,2,Flag3 ;Close output file.<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TERMINATE 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        ;End for normal completion.<br>
        Flag&nbsp;&nbsp;&nbsp; TERMINATE 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        ;End if errors in input file Open.<br>
        Flag1&nbsp;&nbsp; TERMINATE 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        ;End if errors in output file<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        ; Open.<br>
        Flag2&nbsp;&nbsp; TERMINATE 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        ;End if errors in input file<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        ; Close.<br>
        </font><font size="2" face="Courier New">Wrtebug TERMINATE 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        ;End if errors on Write.<br>
        Flag3&nbsp;&nbsp; TERMINATE 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        ;End if errors on output file<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        ; Close<br>
        </font></p>
        <p><font size="2" face="Courier New">PROCEDURE WriteInitial() BEGIN<br>
        &nbsp;&nbsp;&nbsp; TEMPORARY Value1,Value3,Value5,Value6,Value7;<br>
        &nbsp;&nbsp;&nbsp; Value1=&quot;Initial MX$Values(&quot;;<br>
        &nbsp;&nbsp;&nbsp; Value3=&quot;,&quot;;<br>
        &nbsp;&nbsp;&nbsp; Value5=&quot;),&quot;;<br>
        &nbsp;&nbsp;&nbsp; Value6=MX$values(P$Rownum,P$Colnum);<br>
        &nbsp;&nbsp;&nbsp; Value7=&quot; &quot;;<br>
        &nbsp;&nbsp;&nbsp; RETURN (PolyCatenate<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (Value1,<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; P$Rownum,<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Value3,<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; P$Colnum,<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Value5,<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Value6,<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Value7));<br>
        END;</font></p>
        <p align="left"><font size="2" face="Courier New"><br>
        </font><font FACE="Arial" SIZE="2">This model reads an external ASCII data file into a
        Matrix in GPSS World. It then writes out Initial statements that can be
        used to Initial the Matrix on future runs of the model using a GPSS
        World INCLUDE Command.</p>
        <p ALIGN="left">In this use of PLUS, a complicated, lengthy WRITE
        block operand is broken down into understandable pieces. The advantage
        of a PLUS Procedure here is that the Procedure statements can wrap
        around multiple lines and TEMPORARY Variables can be defined to break
        the statement into more easily handled pieces to make it more self
        documenting. The TEMPORARY Variables do not survive outside the PLUS
        Procedure. Actually, we could have done all the file operations inside
        PLUS Procedures. In that case we would have used the Open(), Close(),
        Read(), and Write(), Library Procedures.</p>
        <p ALIGN="left">You will also see that no arguments are passed to the
        WriteInitial PLUS Procedure. All the values needed that exist in the
        simulation are available to PLUS. Sometimes there is value in passing
        arguments to make the Procedure more readable, or for tracing the values
        of variables.</p>
        <p ALIGN="left">RETURN evaluates the complex string and returns it to
        the WRITE block to be written to the file Outpt.txt. The WRITE block
        knows to which file the data should be written by evaluating the data
        stream operand which in this case is 2. When Outpt.txt was opened, it
        was opened using data stream 2. START 1 will run the simulation.</p>
        <p ALIGN="left">Don’’t forget about the PLUS Trace. It is quite
        helpful in debugging your PLUS Procedures. It van be turned on in the
        Reports page of the Settings Notebook.</p>
        <p ALIGN="left">In the next lesson, we will explore further some of
        the debugging options in GPSS World, including the PLUS Trace.</p>
        <p ALIGN="JUSTIFY">&nbsp;</p>
        <h2 ALIGN="center"><a name="Lesson 18"></a>Lesson 18 - Debugging Your
        Models</h2>
        <p ALIGN="left">GPSS World’s interactivity makes debugging and the
        testing of design alternatives much easier than in older versions of
        GPSS. In the last lesson we saw how much easier it is to debug PLUS
        Procedures in an interactive environment. In this lesson, we’ll try a
        few simple debugging techniques that can be very useful when you apply
        them to complex models.</p>
        <p ALIGN="left">The model is shown below.</p>
</font>
        <p><font face="Courier New" size="2">; GPSS World Sample File - BARBER.GPS.<br>
        ***********************************************************************<br>
        *<br>
        * Barber Shop Simulation<br>
        *<br>
        ***********************************************************************<br>
        Waittime QTABLE&nbsp;&nbsp; Barber,0,2,15&nbsp;&nbsp;&nbsp;&nbsp; ;Histogram of Waiting times<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GENERATE&nbsp; 3.34,1.7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        ;Create next customer<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TEST LE&nbsp;&nbsp; Q$Barber,1,Finis&nbsp;
        ;Wait if line 1 or less<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        ; else leave shop<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SAVEVALUE Custnum+,1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        ;Total customers who stay<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ASSIGN&nbsp;&nbsp;&nbsp; Custnum,X$Custnum ;Assign number to customer<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; QUEUE&nbsp;&nbsp;&nbsp;&nbsp;
        Barber&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        ;Begin queue time<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SEIZE&nbsp;&nbsp;&nbsp;&nbsp;
        Barber&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        ;Own or wait for barber<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DEPART&nbsp;&nbsp;&nbsp; Barber&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        ;End queue time<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ADVANCE&nbsp;&nbsp; 6.66,1.7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        ;Haircut takes a few minutes<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RELEASE&nbsp;&nbsp; Barber&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        ;Haircut done. Give up the barber<br>
        Finis&nbsp;&nbsp; TERMINATE 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        ;Customer leaves<br>
        </font></p>
<font FACE="Arial" SIZE="2"><font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE</font></font><font face="Helvetica" size="2">&nbsp;&nbsp;&nbsp;&nbsp;
</font><font FACE="Arial" SIZE="2"><b>File / Open</p>
    </b><font FACE="Helvetica" SIZE="2">
    <p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Barber</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="JUSTIFY">and</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Open</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="JUSTIFY">Before we go any further, let’s put some SHOW
      commands into Function Keys. Open the Model Settings Notebook</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Edit / Settings</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="JUSTIFY">and select the Function Keys page.</p>
      <p ALIGN="JUSTIFY">Next to <b>[F8]</b> and <b>[F9]</b>
      type the following two SHOW Commands. Place the mouse pointer in each box
      and click once before typing.</p>
      
    
</font><font FACE="Helvetica" SIZE="2">
    <p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">SHOW P$Custnum</p>
    
      
      </font></b><font FACE="Arial" SIZE="2">
    <p ALIGN="JUSTIFY">and</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">SHOW X$Custnum</p>
    </font></b><font FACE="Helvetica" SIZE="2">
    <p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="JUSTIFY">You have now loaded SHOW commands into two function
      keys. While debugging a simulation you can interactively examine many
      values at a touch of a single key. We’ll use them later.</p>
      <p ALIGN="JUSTIFY">Now, create the simulation.</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / Create Simulation</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="JUSTIFY">Let’s also open the Blocks Window. In the Main Menu</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Window / Simulation Window / Blocks Window</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="JUSTIFY">Now, let’s put a Stop Condition on Transaction 5.</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / Custom</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="JUSTIFY">and in the dialog box</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">Stop 5</p>
    </font></b><font FACE="Helvetica" SIZE="2">
    <p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="JUSTIFY">You should also arrange the windows so you can see both
      the Blocks Window and the Journal Window.</p>
      <p ALIGN="JUSTIFY">Your screen should look something like this.</p>
      
    
    <p>&nbsp;</p>
      
    
    <p align="center"><img border="0" src="../images/T1_18_1.gif" width="566" height="426"></font><i><font SIZE="2"></p>
    <p align="center">Figure 18—1. The Blocks, and Journal Windows in BARBER.GPS.</p>
    </font></i>
    <p ALIGN="JUSTIFY">&nbsp;</p>
    
      
        <p ALIGN="JUSTIFY">In the Main Menu</p>
      
    
    <font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / START</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="JUSTIFY">and in the dialog box replace the 1</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">100</p>
    
      
      </font></b><font FACE="Arial" SIZE="2">
    <p ALIGN="JUSTIFY">and</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="JUSTIFY">Now you see a message indicating that Transaction 5 has
      stopped on its first attempted Block entry in the simulation. In this case
      it happens to be the first GENERATE Block.</p>
      </font><i><font SIZE="2">
      <p>&nbsp;</p>
      <p align="center"><img border="0" src="../images/T1_18_2.gif" width="518" height="206"></p>
      <p align="center">Figure 18—2. Message after Stop is executed in the Journal Window.</p>
    </font></i>
    <p ALIGN="JUSTIFY">&nbsp;</p>
    
      
        <p ALIGN="left">Now, we’ll step through the simulation using the
        function key that is loaded in the Model Settings Notebook with STEP 1.
        If you want to check the list of preassigned function key settings, go
        to the Function Keys Page of the Model Settings Notebook.</p>
        <p ALIGN="left">Now that we have control of the active Transaction,
        let’s first take off the Stop Condition.</p>
      
    
    <font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Window / Simulation Snapshot / User Stops</p>
    </b><font FACE="Helvetica" SIZE="2">
    <p ALIGN="center">CLICK ON<b> </b>&nbsp;&nbsp;&nbsp; <u>The &quot;5&quot;</p>
    </u>
    <p ALIGN="center">CLICK ON<b> </b>&nbsp;&nbsp;&nbsp; <u>The Remove Button</p>
    </u>
    <p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="JUSTIFY">Now let’s invoke the STEP 1 Command using the
      Function Key.</p>
      <p ALIGN="center">PRESS&nbsp;&nbsp;&nbsp;&nbsp; <b>[F5]</b></font></p>
<font FACE="Arial" SIZE="2">
      <p ALIGN="left">You could also execute this command by pressing <b>[Ctrl]+[Alt]+[S]</b>
      or choosing </font><b><font SIZE="2">Command / STEP</font></b><font FACE="Arial" SIZE="2">
      in the Main Menu.</p>
      <p ALIGN="left">Transaction 5 will enter the GENERATE Block. You’ll
      be able to see this in the trace messages in the Journal Window. Now STEP
      one more time to cause the Transaction to enter the TEST Block.</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">PRESS</font></font><font face="Helvetica" size="2">&nbsp;&nbsp;&nbsp;&nbsp;<b>
[F5]</b></font></p>
    
      
<font FACE="Arial" SIZE="2"><font FACE="Arial" SIZE="2">
    <p ALIGN="left">When this Transaction enters the TEST Block, it will find
    that the queue for the barber is greater than 1. This customer will then
    choose not to wait and will leave the shop. You will see it has been
    scheduled for the TERMINATE Block.</p>
    <p ALIGN="left">Now, before going on, let’s examine some other values
    related to the simulation.</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / SHOW</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="JUSTIFY">and in the dialog box</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">Q$Barber</p>
    
      
      </font></b><font FACE="Arial" SIZE="2">
    <p ALIGN="JUSTIFY">and</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="JUSTIFY">and see that the size of the queue (2) is returned to
      the Status Line in the Main Window, but can also be seen in the Journal
      Window. Now, let’s use the SHOW Commands that we loaded into the
      function keys.</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">PRESS</font></font><font face="Helvetica" size="2">&nbsp;&nbsp;&nbsp;&nbsp;
<b>[F9]</b></font></p>
    
      
<font FACE="Arial" SIZE="2"><font FACE="Arial" SIZE="2">
    <p ALIGN="left">The value 4 will be returned in the Status Line. This
    tells us the number of customers who have stayed at the shop. Remember, you
    can also use the Expression Window to watch a whole series of values as you
    step through a simulation. The Expression Window was discussed in detail in
    the Lesson 11. Now let’s continue to Step through the simulation.</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">PRESS</font></font><font face="Helvetica" size="2">&nbsp;&nbsp;&nbsp;&nbsp;
<b>[F5]</b></font></p>
    
      
<font FACE="Arial" SIZE="2"><font FACE="Arial" SIZE="2">
    <p ALIGN="JUSTIFY">to move Transaction 5 through the TERMINATE Block. Now
    let’s look at the number of customers that have stayed in the shop</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">PRESS</font></font><font face="Helvetica" size="2">&nbsp;&nbsp;&nbsp;&nbsp;
<b>[F9]</b></font></p>
    
      
<font FACE="Arial" SIZE="2"><font FACE="Arial" SIZE="2">
    <p ALIGN="JUSTIFY">The value returned will be 4. Transaction 5 did not wait
    and was not added to our counter.</p>
    <p ALIGN="JUSTIFY">We’ll use the preloaded function key for CONTINUE to do
    this</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">PRESS</font></font><font face="Helvetica" size="2">&nbsp;&nbsp;&nbsp;&nbsp;<b>
[F2]</b></font></p>
    
      
<font FACE="Arial" SIZE="2"><font FACE="Arial" SIZE="2">
    <p ALIGN="JUSTIFY">If the Blocks Window is open, the simulation will run
    more slowly than with all the windows closed. Close the Blocks Window now,
    but minimize the Journal Window for later use.</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; <u>The X-Upper Right of the Blocks Window</p>
    
      
      </u></font><font FACE="Arial" SIZE="2">
    <p ALIGN="JUSTIFY">then</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CLICK ON&nbsp;</font></font><font face="Helvetica" size="2">&nbsp;&nbsp;&nbsp;
</font><font FACE="Arial" SIZE="2"><u><font FACE="Helvetica" SIZE="2">The leftmost of the three buttons-Upper Right of the Journal
    Window</p>
    
      
</font>
    
      
      </u><font FACE="Arial" SIZE="2">
    <p ALIGN="left">The simulation will quickly run to completion and a
    report will be written.</p>
    <p ALIGN="left">Let’s also take a quick look at one of the other
    windows, the Table Window.</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Window / Simulation Window / Table Window</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="left">and in the drop-down box, you’ll see Waittime, since
      this is the only Table in the model.</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="left">In this particular histogram you can see the wait times
      experienced in the queue for the barber. Mean waiting time was 10.709
      minutes with a standard deviation of 2.702 minutes. The Table Window is
      dynamic, and is updated as the state of the simulation changes.</p>
      </font><i><font SIZE="2">
      <p>&nbsp;</p>
      <p align="center"><img border="0" src="../images/T1_18_3.gif" width="525" height="268"></p>
      
      
      <p align="center">Figure 18—3. The Waittime Table</p>
    </font></i>
    <p ALIGN="JUSTIFY">&nbsp;</p>
    
      
        <p ALIGN="left">Before we go on, let’s restore the Journal Window.
        On the Desktop</p>
      
    
    <p ALIGN="center">DOUBLE CLICK ON<font face="Helvetica" size="2">&nbsp;&nbsp;&nbsp;&nbsp;</font>
    <u>The Minimized Block Icon in the lower
    left of the Main Window</p>
    
      
      </u>
      <p ALIGN="left">Now we can watch Journal messages as we work a little
      more with the use of Stops.</p>
    
    
    <font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Window / Simulation Window / Blocks Window</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="left">and open the Blocks Window to a comfortable viewing
      size.</p>
      <p ALIGN="left">Now, in the Blocks Window select the RELEASE Block
      (Block number 9) in the model. You can do this by moving the mouse pointer
      over the Block labeled REL and clicking mouse button 1.</p>
      <p ALIGN="center">CLICK ON&nbsp;<font face="Helvetica" size="2">&nbsp;&nbsp;&nbsp;
      </font><u>The Release Block in the Blocks Window</p>
      </u>
      <p ALIGN="JUSTIFY">then</p>
      <p ALIGN="center">CLICK ON<font face="Helvetica" size="2">&nbsp;&nbsp;&nbsp;&nbsp;</font>
      <u>The Place Icon in the Debug Toolbar</p>
      </u>
      <p ALIGN="left">A Stop Condition has now been put on Block 9. You can
      do this through the Command menu in the Main Window, as well using a
      Custom Command, but using the Debug Toolbar is easier. Now start the
      simulation.</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / START</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="JUSTIFY">and in the dialog box replace the 1</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">100</p>
    
      
      </font></b><font FACE="Arial" SIZE="2">
    <p ALIGN="JUSTIFY">and</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="left">The simulation will now stop when the next Transaction
      is ready to enter the RELEASE Block.</p>
      <p ALIGN="left">As you can imagine, these techniques will become even
      more valuable as your model becomes more complex.</p>
      <p ALIGN="left">The change will be implemented immediately. First Now
      let’s alter the structure of the model without leaving the Session.</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">PRESS</font></font><font face="Helvetica" size="2">&nbsp;&nbsp;&nbsp;&nbsp;
<b>[F8]</b></font></p>
    
      
<font FACE="Arial" SIZE="2"><font FACE="Arial" SIZE="2">
    <p ALIGN="left">Remember, we loaded a SHOW Command for the customer
    number Parameter into <b>s</b> early in the lesson. The value returned in
    the Status line of the Main Window is 54 for the Customer Number.</p>
    <p ALIGN="left">Let’s remove the STOP on the RELEASE Block.</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Window / Simulation Snapshot / User Stops</b></p>
<font FACE="Helvetica" SIZE="2">
    <p ALIGN="center">CLICK ON<b>&nbsp;</b>&nbsp;&nbsp;&nbsp; <u>The Remove All Button</p>
    </u>
    <p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="left">Now let’s assume you have decided you no longer want
      each Transaction to carry the customer number in a Parameter. We’ll
      eliminate the ASSIGN Block. In the Model Window, position the mouse at the
      beginning of the ASSIGN Block line.</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CLICK and DRAG&nbsp;&nbsp;&nbsp;&nbsp; <u>The Cursor to the End of the Line</p>
    
      
      </u></font><font FACE="Arial" SIZE="2">
    <p ALIGN="JUSTIFY">and</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">PRESS</font></font><font face="Helvetica" size="2">&nbsp;&nbsp;&nbsp;&nbsp;<b>
[Del]</b></font></p>
    
      
<font FACE="Arial" SIZE="2"><font FACE="Arial" SIZE="2">
    <p ALIGN="left">Now in a flash you can retranslate the model and start it
    running again.</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / Retranslate</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="left">and then</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / START</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="left">and in the dialog box replace the 1</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">11111</p>
    
      
      </font></b><font FACE="Arial" SIZE="2">
    <p ALIGN="left">and</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="left">Let the simulation run for a second or two and</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">PRESS</font></font><font face="Helvetica" size="2">&nbsp;&nbsp;&nbsp;&nbsp;<b>
[F4]</b></font></p>
    
      
<font FACE="Arial" SIZE="2"><font FACE="Arial" SIZE="2">
    <p ALIGN="left">to halt the simulation and then</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">PRESS</font></font><font face="Helvetica" size="2">&nbsp;&nbsp;&nbsp;&nbsp;<b>
[F8]</b></font></p>
    
      
<font FACE="Arial" SIZE="2"><font FACE="Arial" SIZE="2">
    <p ALIGN="left">Chances are you got an error message saying that the
    Parameter doesn’t exist since it is no longer being assigned to new
    Transactions. Let’s take a look at a way we can make interactive changes
    in a simulation without having to retranslate the model. We’ll read in a
    new model to examine this option.</p>
    <p ALIGN="left">Before we move on, please close all windows relating to
    the barber model.</p>
    <p ALIGN="left">The model below deserves a little study before you see
    how GPSS World allows interactive changes to your simulation while you are
    in the development and test phases of a project. Take a minute to look at
    the model shown below.</p>
    </font></font><p><font face="Courier New" size="2">; GPSS World Sample File - SAMPLE7.GPS<br>
**********************************************************************<br>
*<br>
* Automobile Arrival Simulation<br>
*<br>
* For simplicity, this model only deals with one-way traffic<br>
* in North-South and East-West directions.&nbsp;<br>
**********************************************************************<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GENERATE&nbsp; 20,10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
;Create next automobile.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; QUEUE&nbsp;&nbsp;&nbsp;&nbsp; Eastwest<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TEST E&nbsp;&nbsp;&nbsp; X$EWlight,F$Intersection ;Block until green, and<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
; the intersection is free<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SEIZE&nbsp;&nbsp;&nbsp;&nbsp; Intersection<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DEPART&nbsp;&nbsp;&nbsp; Eastwest&nbsp;&nbsp;&nbsp;&nbsp;
;End queue time.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ADVANCE&nbsp;&nbsp; 10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
;Cross the intersection.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RELEASE&nbsp;&nbsp; Intersection<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TERMINATE 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
;Auto leaves intersection.<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GENERATE&nbsp; 30,10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
;Create next automobile.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; QUEUE&nbsp;&nbsp;&nbsp;&nbsp; Northsouth<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TEST E&nbsp;&nbsp;&nbsp; X$NSlight,F$Intersection ;Block until green and<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
; the intersection is free<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SEIZE&nbsp;&nbsp;&nbsp;&nbsp; Intersection<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DEPART&nbsp;&nbsp;&nbsp; Northsouth&nbsp;&nbsp;
;End queue time.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ADVANCE&nbsp;&nbsp; 10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
;Cross the intersection.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RELEASE&nbsp;&nbsp; Intersection<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TERMINATE 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
;Auto leaves intersection.<br>
**********************************************************************<br>
*<br>
* Traffic Light Simulation&nbsp;<br>
*<br>
**********************************************************************<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GENERATE&nbsp; ,,,1<br>
Begin1&nbsp; SAVEVALUE NSlight,Red&nbsp;&nbsp;&nbsp;&nbsp; ;North-South light turns red<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SAVEVALUE EWlight,Green&nbsp;&nbsp; ;East-West light turns green<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ADVANCE&nbsp;&nbsp; Greentime&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
;Light is green<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SAVEVALUE NSlight,Green&nbsp;&nbsp; ;North-South light turns green<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SAVEVALUE EWlight,Red&nbsp;&nbsp;&nbsp;&nbsp;
;East-West light turns red<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ADVANCE&nbsp;&nbsp; Redtime&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
;Light is red<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TRANSFER&nbsp; ,Begin1<br>
Greentime EQU 200<br>
* When the light is Green (value 0) and the intersection is not busy<br>
* (the State Variable(SNA) F$Intersection evaluates as 0), a car may<br>
* pass into the intersection. These conditions are tested at the TEST<br>
* Block. When the light is red (value 100) or the intersection is<br>
busy<br>
* (SNA F$Intersection returns the value 1), the condition at the TEST<br>
* Block will not be met and the car will not proceed.<br>
Green EQU 0<br>
Red EQU 100<br>
Redtime EQU 300<br>
*<br>
* Do START 4000 EW Congestion builds. Try Greentime EQU 1000. Fine<br>
* but NS congestion builds. Greentime EQU 400 works for both.<br>
</font></p>
<font FACE="Arial" SIZE="2"><font FACE="Arial" SIZE="2">
    <p ALIGN="left">This model is of an intersection of two one-way streets.
    By changing the length of the green light, you can experiment with the
    effects on the traffic flow. We will open the Plot Window with two
    variables, one for North-South traffic and one for East-West traffic.</p>
    <p ALIGN="left">First, open the model</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>File / Open</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="JUSTIFY">and</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Sample7</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="JUSTIFY">and</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Open</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="left">Then create the simulation and open the Plot Window.</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / Create Simulation</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="JUSTIFY">and</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE&nbsp;&nbsp;&nbsp; </font><b>Window / Simulation Window / Plot Window</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="left">When the Edit Plot Window appears, enter the values you
      see below. Remember to position the mouse pointer at the start of each
      line and click once before you start to type or use the <b>[Tab]</b>
      key to go from box to box in a forward direction. Don’t try to use <b>[Enter]</b>
      to go from box to box.</p>
</font><i><font SIZE="2">
      <p>&nbsp;</p>
      <p align="center"><img border="0" src="../images/T1_18_4.gif" width="536" height="456"></p>
      <p align="center">Figure 18—4. The Edit Plot Window.</p>
    </font></i>
    <p ALIGN="JUSTIFY">&nbsp;</p>
    
      
        <p ALIGN="left">The label field contains the label used in the legend
        at the bottom of the plot Next, the Expression box indicates the
        variable to be plotted. Finally, in the Title field we’ll choose a
        name that will describe both items that we want to plot, namely the
        Queues of cars in both directions. The Y-axis values have defaults of 0
        and 100. We’ll change only the Max value to 150.</p>
        <p ALIGN="left">Finally, the time range for each view of the plot
        must be added. Our time range is 8000. You will want to make this time
        duration long enough so that it does not flash by as the simulation
        runs, but not so long that your plot is jammed together. You may have to
        experiment once or twice to get the correct value. The Plot Window will
        page horizontally when it reaches the end of the window. You should also
        be aware that by default only 10,000 plot points are saved for each
        expression. You can change this setting in the Model Settings Notebook.
        If you refresh or resize your window or do anything that causes the
        window to refresh automatically, such as dragging another window over
        the top of the Plot Window, only the remembered points can be redrawn.
        Of course, the more points you save, the more memory you will use for
        this purpose. Since GPSS World makes huge amounts of memory available to
        you, this is not usually a problem.</p>
        <p ALIGN="left">To add these values to the plot</p>
      
    
    <font FACE="Helvetica" SIZE="2">
    <p align="center">CLICK ON&nbsp;&nbsp;&nbsp; <u>The Plot button</p>
    
      
      </u></font><font FACE="Arial" SIZE="2">
    <p ALIGN="JUSTIFY">and if you want to save the information with this
    simulation</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; <u>The Memorize button</p>
    
      
      </u></font><font FACE="Arial" SIZE="2">
    <p ALIGN="JUSTIFY">Now, you need to add the second variable that we want to
    plot. Enter only the new Expression and Label. For the Label replace the
    existing information.</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">North South Traffic</p>
    
      
      </font></b><font FACE="Arial" SIZE="2">
    <p ALIGN="JUSTIFY">and for the Expression, replace the existing information</p>
    <p ALIGN="JUSTIFY">&nbsp;</p>
    </font><b><font FACE="Helvetica" SIZE="2">
    <p ALIGN="center"></font></b><font FACE="Helvetica" SIZE="2">TYPE<b>&nbsp;</b>&nbsp;&nbsp;&nbsp;
</font><b><font FACE="Courier New">Q$NorthSouth</p>
    
    
    </font></b><font FACE="Helvetica" SIZE="2">
    <p align="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; <u>The Plot button</p>
    
      
      </u></font><font FACE="Arial" SIZE="2">
    <p ALIGN="JUSTIFY">and if you want to save the information with this
    simulation</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; <u>The Memorize button</p>
    </u>
    <p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="JUSTIFY">Position and size the window for easy viewing and then
      start the simulation running.</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / START</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="JUSTIFY">and in the dialog box and replace the 1.</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">4000</p>
    
      
      </font></b><font FACE="Arial" SIZE="2">
    <p ALIGN="JUSTIFY">and</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="JUSTIFY">Your Plot Window should look something like this. Of
      course, it will depend where in simulated time you are.</p>
      </font><i><font SIZE="2">
      <p>&nbsp;</p>
      <p align="center"><img border="0" src="../images/T1_18_5.gif" width="561" height="286"></p>
      
      
      <p align="center">Figure 18—5. Intersection Congestion when Greentime equals 200.</p>
    </font></i>
    <p ALIGN="JUSTIFY">&nbsp;</p>
    
      
        <p ALIGN="left">Notice that East-West congestion is building.
        Interrupt the simulation with</p>
      
    
    <font FACE="Helvetica" SIZE="2">
    <p align="center">PRESS</font></font><font face="Helvetica" size="2">&nbsp;&nbsp;&nbsp;&nbsp;<b>
[F4]</b></font></p>
    
      
<font FACE="Arial" SIZE="2"><font FACE="Arial" SIZE="2">
    <p ALIGN="left">Open up a Custom Command dialog box</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / Custom</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="JUSTIFY">and</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">Greentime EQU 1000</p>
    </font></b><font FACE="Helvetica" SIZE="2">
    <p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="JUSTIFY">then</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">PRESS</font></font><font face="Helvetica" size="2">&nbsp;&nbsp;&nbsp;&nbsp;
<b>[F2]</b></font></p>
    
      
<font FACE="Arial" SIZE="2"><font FACE="Arial" SIZE="2">
    <p ALIGN="left">This will cause the CONTINUE command to be executed. Now
    notice that North-South congestion builds. Interrupt the simulation again</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">PRESS</font></font><font face="Helvetica" size="2">&nbsp;&nbsp;&nbsp;&nbsp;<b>
[F4]</b></font></p>
    
      
<font FACE="Arial" SIZE="2"><font FACE="Arial" SIZE="2">
    <p ALIGN="JUSTIFY">Open up a Custom Command dialog box</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / Custom</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="JUSTIFY">and</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">Greentime EQU 400</p>
    </font></b><font FACE="Helvetica" SIZE="2">
    <p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="JUSTIFY">then</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">PRESS</font></font><font face="Helvetica" size="2">&nbsp;&nbsp;&nbsp;&nbsp;<b>
[F2]</b></font></p>
    
      
<font FACE="Arial" SIZE="2"><font FACE="Arial" SIZE="2">
    <p ALIGN="left">Now, the traffic is flowing reasonably in both
    directions. Let the simulation run to completion or you can halt it when you
    are done watching the Plot.</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">PRESS</font></font><font face="Helvetica" size="2">&nbsp;&nbsp;&nbsp;&nbsp;<b>
[F4]</b></font></p>
    
      
<font FACE="Arial" SIZE="2">
    
      
<font FACE="Arial" SIZE="2">
    <p ALIGN="JUSTIFY">if you prefer.</p>
    <p ALIGN="JUSTIFY">Close all Windows related to the Traffic Model.</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; <u>The X-Upper Right of each Window</p>
    
      
      </u></font><font FACE="Arial" SIZE="2">
    <p ALIGN="left">GPSS World can also call in Command Files consisting of
    INITIAL statements or other Commands. You can do this either by
    interactively typing an INCLUDE Command in a Custom Command dialog box or by
    placing this statement in a Model File.</p>
    <p ALIGN="left">Read in the Barbershop model.</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>File / Open</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="JUSTIFY">and in the dialog box</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Barber</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="JUSTIFY">then</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Open</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="left">Create the simulation</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / Create Simulation</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="left">The following is an example of the command to call in
      an ASCII file containing Initial Statements as described above. The first
      command shows how it would be done interactively, the second as part of
      your program.</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / Custom</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="JUSTIFY">and in the dialog box</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">INCLUDE &quot;Init.txt&quot;</p>
    </font></b><font FACE="Helvetica" SIZE="2">
    <p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="left">Remember, if you have altered the location of the
      sample files, then, you must assert the file path in this INCLUDE Command.</p>
      <p ALIGN="left">The contents of this file are:</p>
      <p ALIGN="JUSTIFY">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      INITIAL X$One,45<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      INITIAL X$Two,765</p>
      <p ALIGN="left">Now, show the values of these Savevalues. The SAVEVALUE
      entities are created as they are given their initial values.</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / SHOW</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="left">and in the dialog box</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">X$One</p>
    </font></b><font FACE="Helvetica" SIZE="2">
    <p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="left">You should see the value 45 in the Status Line of the
      Main Window and in the Journal Window. Repeat this process to see the
      second SAVEVALUE.</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / SHOW</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="left">and in the dialog box</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">TYPE&nbsp;&nbsp;&nbsp;&nbsp; </font><b><font FACE="Courier New">X$Two</p>
    </font></b><font FACE="Helvetica" SIZE="2">
    <p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="left">and check the value in the Status Line.</p>
      <p ALIGN="left">Now, add the following line as the last line of the
      model that you currently see in the Model Window</p>
      
    
    </font><b><font FACE="Courier New">
    <p align="center">INCLUDE &quot;Init.txt&quot;</p>
    
      
      </font></b><font FACE="Arial" SIZE="2">
    <p ALIGN="left">Now, let’s retranslate this model.</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / Retranslate</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p>When the model is retranslated, it will automatically
      read the external file and create and initial the Savevalues. Show the
      Savevalues as we did above, if you wish.</p>
      <p>Include-files can also be used as we did in the ANOVA
      Lesson. They make it easy to manage multiple runs of a simulation. Also,
      unless suppressed, a report will be produced for each completed simulation
      run. See the <i>GPSS World Reference Manual</i> and Lesson 14 of this
      manual for more information on report options.</p>
      <p>Don’t forget that when you have a complex system of
      PLUS Procedures to debug, you can turn on the PLUS Trace in the Reports
      Pages of the Settings. Then every invocation causes a trace record to be
      written to the Journal Window. These traces are indented to show the depth
      of the processing, and they list the evaluated arguments of the
      invocation. It’s easy to trace within PLUS Procedures as well. Just
      create one or more dummy PLUS Procedures that do nothing. Then you can
      pepper your PLUS Procedure with calls to this debugging Procedure, and
      when the PLUS Trace is on the Journal Window will receive trace records
      showing the state of those variables you used as arguments to the dummy
      Procedure.</p>
      <p>Well, that’s enough for now. In this lesson, you have
      used some of the interactive capabilities of GPSS World that can be useful
      when you debug your simulation.</p>
      <p>In the next lesson, we begin to explore the
      experimentation features of GPSS World. We will look at how an Experiment,
      a special type of PLUS Procedure, can be crafted to perform multiple
      simulations and analyze the results automatically. See you then.</p>
      <p ALIGN="JUSTIFY">&nbsp;</p>
      <h2 ALIGN="center"><a name="Lesson 19"></a>Lesson 19 - User Experiments</h2>
      <p ALIGN="left">After you have fully tested your simulation under a
      variety of conditions, you will probably want to ask it some questions.
      That’s where experimentation comes in. In order to predict the effects
      of factors under your control, you will need to simulate each of the
      possibilities and determine if the result exceeds that due only to random
      variation. Before proceeding, your simulation should be well tested under
      even the most stressful of conditions. In addition, it must be equipped to
      deliver all the metrics to be used in the analysis.</p>
      <p ALIGN="left">GPSS World contains two automatic Experiment
      Generators. They are discussed in the next lesson, not this one. Here, we
      will show you how you can use PLUS to create and execute your own
      experiments in an efficient way, and then use the ANOVA Library Procedure
      to analyze the results. In our example, the experiment will consist of
      three runs, or &quot;replicates&quot; under each of four treatment levels.
      Replicates are runs of identical conditions except that a different set of
      seeds is used to prime the pseudo-random number generators. This provides
      a baseline of variability due only to random effects.</p>
      <p ALIGN="left">In GPSS World, experiments are defined when you
      translate a special PLUS Procedure called an Experiment. Other than the
      replacement of the keyword ‘PROCEDURE’ with ‘EXPERIMENT’ there is
      no difference between the syntax of an Experiment and that of a Procedure.
      Actually, there is one extra thing you can do in an Experiment (or in a
      Procedure called by an Experiment). That is the use the DoCommand Library
      Procedure. But more on that later. The bottom line is that Experiments
      inherit all the power of PLUS, making them fully programmable and
      automatic. Your computer can be grinding out results and exploring
      response surfaces even while you sleep. Just as with PLUS Procedures, you
      can insert EXPERIMENT definitions into your Model or you can send them to
      existing simulations using a Custom Command. In either case, you may find
      the INCLUDE Command useful, which can be used to point to a Text Object
      containing lengthy PLUS PROCEDUREs and/or EXPERIMENTs.</p>
      <p ALIGN="left">To actually run a previously defined Experiment a
      CONDUCT Command can be introduced interactively if it did not already
      exist in the Model. To invoke the PLUS Experiment, simply provide a full
      Procedure invocation as the only operand of the CONDUCT Command.</p>
      <p ALIGN="left">Once you have begun an Experiment with a CONDUCT
      Command, your ability to interact with the simulation is somewhat limited.
      You can always display the running Simulation System Clock ( <b>View /
      Clock</b> ), but generally you will have to HALT the Experiment in order
      to examine the Simulation. Then, unless you have planned ahead, you may
      have to restart the Experiment from the beginning. That’s another reason
      why it is best to have your testing done before you begin the
      experimentation. More on this later.</p>
      <p ALIGN="left">Let’s now look at an Experiment we defined for the
      TELEPHON.GPS sample model. But before we do, you should skip ahead to
      Chapter 2 Section 2 to study the internal structure of the Model. See you
      when you get back.</p>
      <p ALIGN="left">As you can see, the purpose of the model is to find the
      best configuration of telephone lines under a predefined set of load
      factors. We now turn to the ONEWAY.GPS Model that has defined an
      experiment for the Telephone system model. Go ahead and Open the Model</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE</font></font><font face="Helvetica" size="2">&nbsp;&nbsp;&nbsp;&nbsp;
</font><font FACE="Arial" SIZE="2"><b>File / Open</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="left">and in the dialog box</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OneWay</p>
    </b><font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Open</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="left">You should see the following Model Statements</p>
      <p ALIGN="JUSTIFY">&nbsp;</p>
      </font>
</font>
      <p><font face="Courier New" size="2">; GPSS World Sample File - ONEWAY.GPS<br>
      ***********************************************************************<br>
      *&nbsp;<br>
      * Balanced Telephone System Experiment with&nbsp;<br>
      * One-Way Analysis of Variance.&nbsp;<br>
      *&nbsp;<br>
      * To Determine the Optimal Number of Telephone Lines.&nbsp;<br>
      *&nbsp;<br>
      * Discussed in Lesson 19 of the Tutorial Manual&nbsp;<br>
      *<br>
      *<br>
      * BestLines() places results in a Global MATRIX MainResult,&nbsp;<br>
      * and in a Results File named RESULT.TXT and then performs&nbsp;<br>
      * a One Way Analysis of Variance.&nbsp;<br>
      *&nbsp;<br>
      * To Create an EXPERIMENT that can be HALTed, saved,&nbsp;<br>
      * and resumed, you would need to use Global SAVEVALUE&nbsp;<br>
      * and/or MATRIX Entities to control the Runs. Also,&nbsp;<br>
      * when you use the CLEAR Command, you must use the OFF&nbsp;<br>
      * option to preserve control variables and results.&nbsp;<br>
      *&nbsp;<br>
      ***********************************************************************<br>
      ***********************************************************************<br>
      * Define the Global Experimental Result Matrix and Residuals Table *<br>
      ***********************************************************************<br>
      * Max of 4 Treatment Levels of Factor 1, Max of 3 Replicates per cell *<br>
      MainResult MATRIX ,4,3<br>
      * Initialize Result Matrix to show missing Data<br>
      INITIAL MainResult,UNSPECIFIED<br>
      * Create Table to receive the ANOVA residuals<br>
      MainResult_Residuals TABLE ,-5,1,10<br>
      * Chapter 13 of the Reference Manual discusses residuals.<br>
      ***********************************************************************<br>
      </font></p>
      <p><font face="Courier New" size="2">EXPERIMENT BestLines(LeastLinesToRun, MostLinesToRun, Increment) BEGIN<br>
      &nbsp;&nbsp;&nbsp; /* Each Result Matrix has the following dimensions:<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1. Each of up to 5 Factors requires a dimension, where<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; each dimension indicates the number of levels used<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for that factor. Each Factor is represented by a<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; User Variable.<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2. The last dimension indicates the maximum number of<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; replicates to be run within a treatment combination<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (i.e. within a cell of the experiment).<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; There may be up to a total of 6 dimensions. */<br>
      </font></p>
      <p><font face="Courier New" size="2">&nbsp;&nbsp;&nbsp; /* Put a Header into the Journal */<br>
      &nbsp;&nbsp;&nbsp; DoCommand(&quot;SHOW &quot;&quot;&quot;&quot; &quot;);<br>
      &nbsp;&nbsp;&nbsp; DoCommand(&quot;SHOW (&quot;&quot;**** Balanced Telephone-System
      Experiment with<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      One-way ANOVA ****&quot;&quot;)&quot;);<br>
      &nbsp;&nbsp;&nbsp; DoCommand(&quot;SHOW &quot;&quot;&quot;&quot; &quot;);<br>
      <br>
      &nbsp;&nbsp;&nbsp; /* Optionally, save data to a Result file for later processing. */<br>
      &nbsp;&nbsp;&nbsp; Open(2,&quot;RESULT.TXT&quot;); /* Open Stream 2 For Statistical data
      */<br>
      &nbsp;&nbsp;&nbsp; Seek(10000,2); /* Append the Results */<br>
      &nbsp;&nbsp;&nbsp; Write(2,&quot;**** EXPERIMENT BestLines() ****&quot;); /* Header
      */<br>
      &nbsp;&nbsp;&nbsp; LevelOfFactor1 = 1; /* Levels are 1-4, incl.*/<br>
      &nbsp;&nbsp;&nbsp; CurrentLines = LeastLinesToRun; /* Set the number of
      ines to
      use */<br>
      &nbsp;&nbsp;&nbsp; WHILE ((CurrentLines &lt;= MostLinesToRun) ‘AND’
      (LevelOfFactor1&lt;=4)) DO<br>
      &nbsp;&nbsp;&nbsp; BEGIN<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Replicate = 1;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WHILE (Replicate &lt;= 3) DO BEGIN<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Run the Simulation by calling a PROCEDURE (defined below) */<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DoTheRun(CurrentLines,Replicate);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Store the first (and only) result of this run.<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; This will be used by the ONEWAY DoCommand, below.<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Multiple results would require additional Results Matrices. */<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MainResult[LevelOfFactor1,Replicate] =
      TB$Transit;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Log Result in the Journal, too. This is optional. */<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RunDescription =
      Polycatenate(&quot;Main Result: &quot;,<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      LevelOfFactor1,<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Replicate),<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      &quot; -
      TB$Transit=&quot;,TB$Transit,&quot;&quot;);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DoCommand(&quot;SHOW (RunDescription)&quot;);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DoCommand(&quot;SHOW &quot;&quot;&quot;&quot; &quot;); /* Space after
      Result */<br>
      </font></p>
      <p><font face="Courier New" size="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      /* Optional Example of writing to */<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* a Results File for 3rd party
      Statistics */<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Write(2,RunDescription);<br>
      </font></p>
      <p><font face="Courier New" size="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      /* Set up the next Replication */<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Replicate = Replicate + 1;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; END;<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Move to the next cell of the experiment. */<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LevelOfFactor1 = LevelOfFactor1 + 1;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CurrentLines = CurrentLines + Increment;<br>
      &nbsp;&nbsp;&nbsp; END;<br>
      </font></p>
      <p><font face="Courier New" size="2">&nbsp;&nbsp;&nbsp; /* Put the Statistical Analysis into the Journal */<br>
      &nbsp;&nbsp;&nbsp; DoCommand(&quot;SHOW &quot;&quot;&quot;&quot; &quot;);/* Space down a
      line */<br>
      &nbsp;&nbsp;&nbsp; ANOVA(MainResult,2,1); /* Perform the One-Way ANOVA */<br>
      &nbsp;&nbsp;&nbsp; /* Replicates in Dimension 2; No interactions (level 1) */<br>
      &nbsp;&nbsp;&nbsp; DoCommand(&quot;SHOW &quot;&quot;&quot;&quot; &quot;);/* Space down a
      line */<br>
      &nbsp;&nbsp;&nbsp; Close(2); /* Close the Optional Results File */<br>
      &nbsp;&nbsp;&nbsp; /* All outcomes can now be viewed in the MATRIX Window, or<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; the RESULTS.TXT Text Object. The ANOVA table is in the Journal. */<br>
      </font></p>
      <p><font face="Courier New" size="2">END;<br>
      </font></p>
      <p><font face="Courier New" size="2">PROCEDURE DoTheRun(NumberOfLines, ReplicateNumber) BEGIN<br>
      &nbsp;&nbsp;&nbsp; /* A PROCEDURE can issue DoCommand() only */<br>
      &nbsp;&nbsp;&nbsp; /* if it is called by an
      EXPERIMENT */<br>
      &nbsp;&nbsp;&nbsp; TEMPORARY RandomSeed1;<br>
      &nbsp;&nbsp;&nbsp; /* Use a seed distinct from those of other replicates */<br>
      &nbsp;&nbsp;&nbsp; RandomSeed1 = 11 # ReplicateNumber;<br>
      &nbsp;&nbsp;&nbsp; DoCommand(&quot;CLEAR OFF&quot;); /* Must use OFF to preserve results.
      */<br>
      &nbsp;&nbsp;&nbsp; DoCommand(Catenate(&quot;RMULT &quot;,RandomSeed1));&nbsp;<br>
      &nbsp;&nbsp;&nbsp; * Here we only
      use one RN stream */<br>
      &nbsp;&nbsp;&nbsp; DoCommand(Catenate(&quot;Sets STORAGE &quot;,NumberOfLines));<br>
      &nbsp;&nbsp;&nbsp; DoCommand(&quot;START 100,NP&quot;); /* Get past the Startup Period */<br>
      &nbsp;&nbsp;&nbsp; DoCommand(&quot;RESET&quot;); /* Begin the Measurement Period */<br>
      &nbsp;&nbsp;&nbsp; DoCommand(&quot;START 1000,NP&quot;); /* Run the Simulation */<br>
      END;<br>
      </font></p>
      <p><font face="Courier New" size="2">; From GPSS World Sample File - TELEPHON.GPS, by Gerard F. Cummings<br>
      **************************************************************<br>
      *<br>
      *&nbsp;<br>
      * Telephone System Model&nbsp;<br>
      *&nbsp;<br>
      *&nbsp;<br>
      * Discussed in Section 2.2 of the Tutorial Manual&nbsp;<br>
      *&nbsp;<br>
      **************************************************************<br>
      * Simple Telephone Simulation *<br>
      * Time Unit is one minute *<br>
      Sets STORAGE 2<br>
      Transit TABLE&nbsp;&nbsp;&nbsp;&nbsp; M1,.5,1,20 ;Transit times<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GENERATE&nbsp; 1.667,1&nbsp;&nbsp;
      ;Calls arrive<br>
      Again&nbsp;&nbsp; GATE SNF&nbsp; Sets,Occupied ;Try for a line<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ENTER&nbsp;&nbsp;&nbsp;&nbsp; Sets&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      ;Connect call<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ADVANCE&nbsp;&nbsp; 3,1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      ;Speak for 3+/-1 min<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LEAVE&nbsp;&nbsp;&nbsp;&nbsp; Sets&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      ;Free a line<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TABULATE&nbsp; Transit&nbsp;&nbsp;
      ;Tabulate transit time<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TERMINATE 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      ;Remove a transaction<br>
      Occupied ADVANCE 5,1 ;Wait 5 minutes<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TRANSFER&nbsp; ,Again&nbsp;&nbsp;&nbsp;
      ;Try again<br>
      **************************************************************<br>
      </font></p>
      <p align="left">
<font FACE="Arial" SIZE="2">First, notice that the PLUS Experiment named BestLines
      calls a second PLUS Procedure called DoTheRun. This is called a &quot;Run
      Procedure&quot;. Its job is to set up the conditions needed for each
      simulation run. In a User Experiment we must write it ourselves. In the
      next lesson, we will see that GPSS World can do a lot of the work for us.</p>
      <p ALIGN="left">When you create a Simulation from a Model, the
      Procedures will be Translated along with the GPSS Statements and will be
      registered in the Simulation Object. They are then available to be called
      at any time. Alternately, we could have sent these PLUS Procedures to an
      existing Simulation, using a Custom Command and/or an INCLUDE Command.</p>
      <p ALIGN="left">When we interact with this Simulation we can ignore the
      BestLines experiment, because it does nothing until a CONDUCT Command is
      sent to the Simulation. But now, let’s take a closer look at the
      statements in the EXPERIMENT.</p>
      <p ALIGN="left">The BestLines Experiment is designed to fill up a
      Global Matrix with results and pass it to the ANOVA Library Procedure,
      which creates a statistical analysis and report. We initialize the Matrix
      elements to UNSPECIFIED so that the ANOVA routine knows which runs have
      been completed. The generated experiments you will study in the next
      lesson tests the Result Matrix for the UNSPECIFIED state so that it doesn’t
      repeat runs that have already been done. You may want to look at a
      generated experiment as an example. Well, back to the Bestlines
      Experiment.</p>
      <p ALIGN="left">In addition to the Result Matrix, we define a GPSS
      Table entity to receive the residuals when the ANOVA routine does the
      Analysis of Variance. All we have to do to get the table of residuals is
      to define a Table with the same name as the Result Matrix except that
      &quot;_Residuals&quot; is appended to it.</p>
      <p ALIGN="left">Notice that there is an inner and outer WHILE/DO loop
      which perform all the simulations needed by the experiment. There is a
      single experimental factor, namely, the number of telephone lines, with 4
      treatment levels. At each treatment level we perform 3 replicates changing
      only the random number seeds. This improves the estimate of the Standard
      Error of the Experiment.</p>
      <p ALIGN="left">Within the innermost loop of the BestLines Experiment,
      the first Statement calls the Run Procedure, here named
      &quot;DoTheRun&quot;. The Run Procedure uses a set of Commands to
      initialize and actually run the simulations. Since DoTheRun is called by
      an EXPERIMENT, it can make calls to the DoCommand Library Procedure. In
      this way it sends CLEAR OFF, RESET and START Commands to the Simulation.
      Each time DoTheRun completes, the BestLines Experiment stores the result
      of the simulation into the corresponding element of the MainResult Global
      Matrix, which is defined just after BestLines() in the listing. There
      could be any number of Result Matrices, but each one must have a dimension
      for each of the experimental factors (up to 5) plus one more for indexing
      replicates. Since we are doing a One Way ANOVA, the first index of the
      Result Matrix is for the treatment level, each with a distinct number of
      phone lines, and a second index allows multiple replicates to be run under
      each treatment level. Thus, our Result Matrix has two dimensions. When the
      Experiment is complete, BestLines calls the ANOVA Library Procedure, which
      writes the statistical report to the Simulation Journal.</p>
      <p ALIGN="left">Here are some tips for using the DoCommand Library
      Procedure. Use 4 double quotes around strings within strings. Each inner
      string should be sandwiched by pairs of double quotes, which get reduced
      to single quotes when translated. Also, do not pass a string to DoCommand
      which contains the name of a TEMPORARY variable. Why? Well, the argument
      string is translated in global scope where TEMPORARY PLUS variables are
      not accessible. For arguments and temporary variables, construct the
      string first and only then pass it to the DoCommand Library Procedure.</p>
      <p ALIGN="left">Normally, GPSS World simulations enqueue all commands
      (except HALT and SHOW) on a low priority Command Queue and work on them
      one at a time until the queue is empty. However, DoCommand behaves a
      little differently. It does not return to the calling procedure until the
      low priority Command Queue is empty. This means that after a START Command
      is executed through the DoCommand Library Procedure it does not complete
      until the simulation is done. Only then does the DoCommand Library
      Procedure return to the calling statement. In this manner, the Experiment
      can access the results of a run immediately after it uses DoCommand to
      START it.</p>
      <p ALIGN="left">Notice that our sample PLUS Procedure DoTheRun uses the
      OFF option of the CLEAR Command. If it didn’t, the ResultMatrix Global
      Matrix would be zeroed and data would be lost. We will be able to open a
      window on all the results after the experiment completes. But before we do
      that, take a look at a few other things that are done.</p>
      <p ALIGN="left">Notice how the SHOW Commands are used to put messages
      in the Simulation Journal. This is a handy way to keep track of what the
      Experiment is currently working on. All it takes is a glance at Journal.</p>
      <p ALIGN="left">The BestLines Experiment also creates a separate plain
      text results file in the form of a Text Object. Using Manual Simulation
      mode, the EXPERIMENT sends Open(), Seek(), Write(), and Close() calls to
      create the Results File, &quot;Result.txt&quot;. It can be read by other
      statistical and data analysis programs, or it can be used simply to make a
      permanent record of the experimental results.</p>
      <p ALIGN="left">Well, enough of the preliminaries, let’s run the
      experiment.</p>
      
    
      <font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / Create Simulation</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="left">Now we have the OneWay Simulation Object. We now want
      to begin the Experiment with a CONDUCT BestLines(1,4,1) The arguments in
      the CONDUCT Command will be assigned to the LeastLinesToRun,
      MostLinesToRun, and IncrementLeast variables, respectively. For your
      convenience we have already loaded the command into a Function Key, as
      part of the Model Settings. So just</p>
      
    
      <p align="center">PRESS&nbsp;&nbsp;&nbsp;&nbsp;<b> [F10]</b></font></p>
    
      
<font FACE="Arial" SIZE="2">
    <p ALIGN="left">Now take a look at the Journal. The Experiment is running
    automatically! If we wanted to get fancy, we could run multiple Experiments
    simultaneously, by creating more than one Simulation Object.</p>
    <p ALIGN="left">Let’s take a closer look at the System Clock of the
    running simulation.</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>View / Simulation Clock</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="left">That puts a running display of the clock down in the
      lower right corner of the Main Window. Interesting, but it makes the
      Experiment run a little slower, so let’s turn it off.</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE&nbsp;&nbsp;&nbsp; </font><b>View / Show Clock</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="left">Doing this again while the Clock is displayed, turns it
      off.</p>
      <p ALIGN="left">Now let the Experiment run to completion. This will
      take a few minutes, so you may want to take a short break.</p>
      <p ALIGN="left">Welcome back. Wasn’t that easy? We have completed an
      experiment and done a statistical analysis. First, look at the Results
      Matrix.</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Window / Simulation Window / Matrix Window</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="left">and, since there’s only one Matrix,</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="left">In the Matrix Window you should be able to see all the
      results neatly tabulated. You may need to enlarge the window in order to
      see all three replicates of each treatment level. Next, look at the Result
      File.</p>
      </font><font FACE="Helvetica" SIZE="2">
      <p ALIGN="center">CHOOSE<b> </b>&nbsp;&nbsp;&nbsp; </font><b>File / Open</p>
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="left">and in the dialog box go to the ‘Files of type:’
      drop-down box and</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Text File (*.txt)</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="JUSTIFY">Then in the main box</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">SELECT&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Result</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="JUSTIFY">and</p>
      </font><font FACE="Helvetica" SIZE="2">
      <p ALIGN="center">CHOOSE&nbsp;&nbsp;&nbsp; </font><font FACE="Arial" SIZE="2"><b>Open</p>
      </b>
      <p ALIGN="left">Again, we see the individual results of the experiment
      that were placed in the file by the Write() call.</p>
      <p ALIGN="left">Now let’s take a look at the ANOVA table in the
      Journal. It should look like this.</p>
      
    
    </font><i><font SIZE="2">
    <p>&nbsp;</p>
    <p align="center"><img border="0" src="../images/T1_19_1.gif" width="499" height="383"></p>
    <p align="center">Figure 19-1. ANOVA Table for Bestlines Experiment</p>
    </font></i>
    <p>&nbsp;</p>
    
      
        <p ALIGN="left">From the ANOVA Table we see that the F statistic is
        so large that there is no question of the number of lines being a
        determining factor. GPSS World places the &quot;Critical Value of
        F&quot;, which is our standard of comparison for the F Statistic. When
        the F statistic calculated for a factor of the experiment is greater
        that the associated Critical Value, we conclude that the effect is
        significant (at the p=0.05 level.</p>
        <p ALIGN="left">We move on to the descriptive statistics following
        the ANOVA table. Here we see that there is only a small improvement in
        adding more than 3 lines in the configuration. Commonly we would find
        that the expense of the fourth line would not be justified. We therefore
        conclude that this system should be configured with three telephone
        lines, under these load conditions.</p>
        <p ALIGN="left">Now let’s examine the Table of residuals that the
        ANOVA routine created. We do this as a check of the assumptions behind
        the Analysis of Variance. Recall that we get a Table of Residuals
        because we defined a GPSS Table Entity named MainResult_Residuals, where
        MainResult is the name of the Result Matrix.</p>
        <p ALIGN="left">To see the table,</p>
      
    
    <font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Window / Simulation Window / Matrix Window</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="JUSTIFY">and, since there’s only one Table,</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>OK</p>
    </b>
    <i><font SIZE="2">
    <p>&nbsp;</p>
    <p align="center"><img border="0" src="../images/T1_19_2.gif" width="481" height="266"></p>
    <p align="center">Figure 19-2. Table of Residuals for the Bestlines Experiment</p>
    </font></i>
    <p ALIGN="JUSTIFY">&nbsp;</p>
    
      
        <p ALIGN="left">We can get another view of the situation from the
        descriptive statistics following the ANOVA Table. The Confidence
        Intervals here are calculated from a pooled estimate of the Standard
        Error. However we do see some lack of homogeneity as the range of
        individual yields within a single treatment combination is seen to drop
        dramatically. Even so, the effectiveness of increasing the number of
        phone lines is beyond question.</p>
        <p ALIGN="left">The BestLines Experiment we used here is relatively
        simple. In the next lesson we proceed to experiments that are created
        for you from dialogs, namely Screening Experiments and Optimizing
        Experiments. In the case of the latter, we even get a mathematical
        description of the Response Surface defined by the experimental
        observations. Not bad for just a little work on your part to fill in the
        blanks. See you next time.</p>
        <p ALIGN="JUSTIFY">&nbsp;</p>
</font>
        <b>
        <h2 align="center"><font face="Arial" size="5"><a name="Lesson 20"></a>Lesson 20 - The
        Experiment Generators</font></h2>
</b>
<font FACE="Arial" SIZE="2">
        <p ALIGN="left">In the final lesson we go through the creation of a
        PLUS Screening Experiment. The good news is that GPSS World is going to
        do almost all the work for you. The creation of a PLUS Optimizing
        Experiment is even simpler, and so we will leave you to do that one on
        your own. In either case, please read Chapter 13 of the GPSS World
        Reference Manual before continuing.</p>
        <b><font FACE="Arial" SIZE="4">
        <p>Generating A PLUS Screening Experiment</p>
        </font></b>
        <p ALIGN="left">Welcome back. We now look in detail at the
        ExperEther.gps sample model distributed with GPSS World. It is based on
        a simulation of an Ethernet network. We now go through the steps needed
        to create a screening experiment intended to expose the most important
        factors.</p>
        <p ALIGN="left">First, start up GPSS World and open the
        ExperEther.gps model in the usual way.</p>
        <p ALIGN="left">Now, open the Screening Experiment Generator.</p>
      
    
    <font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Edit / Insert Experiment / Screening ...</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="left">This brings up the following dialogue window, which we
      have filled in with the information needed to generate the screening
      experiment.</p>
      </font><i><font SIZE="2">
      <p>&nbsp;</p>
      <p align="center"><img border="0" src="../images/T1_20_1.gif" width="440" height="436"></p>
      <p align="center">Figure 20-1. The Screening Experiment Generator Dialog</p>
    </font></i>
    
      
        <p ALIGN="left">Model Objects will remember experiments that were
        defined in the past. We have used that fact to fill in the dialog for
        you. To specify the PLUS Experiment that is about to be generated, we
        simply fill in the fields of the Dialog. The values you see in the
        dialog were saved with the ExperEther Model Object. The &quot;Experiment
        Name&quot; and the &quot;‘Run Procedure’ Name&quot; fields are used
        as the PROCEDURE names in the generated experiments. The newly created
        PLUS Experiment will call the Run Procedure repeatedly.</p>
        <p ALIGN="left">The Factors of the Experiment come next. Each factor
        name is actually the name of a User Variable and must obey the GPSS
        World naming conventions. It must begin with an alphabetic character and
        it must not clash with a keyword, SNA, or SNA class. Since screening
        experiments in GPSS World are full or fraction 2<font FACE="Arial" SIZE="1">k</font>
        experiments, there are two treatment levels to be specified for each
        factor. You must specify the names and two treatment levels for between
        1 and 6 factors, inclusively. Factors must be specified consecutively
        starting with the A factor. The choice of treatment levels is crucial.
        You may want to do some preliminary experimentation so that the choices
        you make are good ones. Choose levels that are far apart to elicit a
        change of behavior.</p>
        <p ALIGN="left">The &quot;Fraction&quot; group is next. It allows us
        to specify what faction of the full 2<font FACE="Arial" SIZE="1">k</font>
        experiment is to be run. The run count that will result is specified to
        the right. Choose a smaller fraction to decrease the run count.</p>
        <p ALIGN="left">The &quot;Result group box&quot; has a required
        field. Here you must specify an expression to be evaluated as the metric
        of the simulation. GPSS World will automatically generate code to define
        and initialize a Result Matrix to receive the values of this expression.
        When you CONDUCT the Experiment the result of each run, called a
        &quot;yield&quot;, will automatically find a distinct place in it.</p>
        <p ALIGN="left">Next we have two checkboxes that allow us to select
        options. First, you can have GPSS World generate a template Run
        Procedure to go along with the generated experiment. You can edit this
        Run Procedure to suit your needs. Second, you can have GPSS World load
        the appropriate CONDUCT Command into the setting for Function Key 11. If
        you choose this, after you create the Simulation Object, you only have
        to press the F11 Function Key to run the experiment.</p>
        <p ALIGN="left">Before we generate the experiment we should examine
        the Alias Groups. Let’s investigate what we can do with 4 runs. So we
        change from a half fraction to an eighth fraction.</p>
      
    
    <font FACE="Helvetica" SIZE="2">
    <p align="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; <u>The Eighth Button in the Fraction Group</p>
    
      
      </u></font><font FACE="Arial" SIZE="2">
    <p ALIGN="JUSTIFY">Then we click the Alias Groups button to examine the
    consequences.</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; <u>The Alias Groups Button</p>
    
      
      </u></font><font FACE="Arial" SIZE="2">
    <p ALIGN="JUSTIFY">This brings up the Alias Groups Dialog.</p>
    </font><i><font SIZE="2">
    <p>&nbsp;</p>
    <p align="center"><img border="0" src="../images/T1_20_2.gif" width="429" height="379"></p>
    <p align="center">Figure 20-2. Alias Groups (eighth fraction)</p>
    </font></i>
    
      
        <p ALIGN="left">In examining the Alias Groups we first look for
        missing effects and secondly for important effects which are
        indistinguishable because they are in the same Alias Group. Main effects
        are denoted by a single letter such as &quot;E&quot; for the main effect
        of the 5th factor. Similarly, &quot;AE&quot; represents the two-way
        interaction between the first factor and the fifth factor in the
        experiment. In Figure 20-2 the effects of the 1/8 fraction are very
        poor. The E main effect does not appear in any group and therefore even
        though it is a main effect we will have no information about it.
        Secondly, the C and D main effects are in the same group and therefore
        would be indistinguishable.</p>
        <p ALIGN="left">We could now try different generators for the alias
        groups. Here are the guidelines. Whatever effects you try as a generator
        will not appear in an Alias Group, and will therefore be lost. For this
        reason, high level interactions are generally the best choices. In
        addition, all modulo-2 products from any combination of generators and
        product will also be lost. For example if you use ABD and ADE as a
        generator, ABDADE=AABDDE=BE , that is, BE will also be lost. Each
        generator you choose must not be derivable from existing generators, and
        you may not use the identity generator, I. Don’t worry, GPSS World
        will tell you if you do either of these by accident.</p>
        <p ALIGN="left">However, in our present situation we know that since
        there are only 3 Alias Groups, there is no way to distinguish 5 main
        effects. Close the Alias Groups Dialog.</p>
      
    
    <font FACE="Helvetica" SIZE="2">
    <p align="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; <u>The Cancel Button</p>
    
      
      </u></font><font FACE="Arial" SIZE="2">
    <p ALIGN="JUSTIFY">Returning to the Experiment Generator, select a quarter
    fraction with 8 runs.</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; <u>The Quarter Button in the Fraction Group</p>
    
      
      </u></font><font FACE="Arial" SIZE="2">
    <p ALIGN="JUSTIFY">Then open the Alias Group Dialog again.</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; <u>The Alias Groups Button</p>
    
      
      </u></font><font FACE="Arial" SIZE="2">
    <p ALIGN="JUSTIFY">Here’s what we see:</p>
    </font><i><font SIZE="2">
    <p>&nbsp;</p>
    <p align="center"><img border="0" src="../images/T1_20_3.gif" width="429" height="379"></p>
    <p align="center">Figure 20-3. Alias Groups (quarter fraction)</p>
    </font></i>
    <p ALIGN="JUSTIFY">&nbsp;</p>
    
      
        <p ALIGN="left">The Alias Groups in Figure 20-3 show quite an
        improvement. The main effects are all in separate groups. However,
        information about two-way interactions would be difficult to interpret.
        In some circumstances this would be adequate. If not, we could try
        different generators to try to isolate one or two two-way interactions,
        but instead we cancel this dialog and choose a larger fraction.</p>
      
    
    <font FACE="Helvetica" SIZE="2">
    <p align="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; <u>The Cancel Button</p>
    
      
      </u></font><font FACE="Arial" SIZE="2">
    <p ALIGN="JUSTIFY">Returning to the Experiment Generator, select a half
    fraction with 16 runs.</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; <u>The Half Button in the Fraction Group</p>
    
      
      </u></font><font FACE="Arial" SIZE="2">
    <p ALIGN="JUSTIFY">Then open the Alias Group Dialog again.</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; <u>The Alias Groups Button</p>
    
      
      </u></font><font FACE="Arial" SIZE="2">
    <p ALIGN="JUSTIFY">Returning to the Alias Group Dialog, we see:</p>
    
    
    </font><i><font SIZE="2">
    <p>&nbsp;</p>
    <p align="center"><img border="0" src="../images/T1_20_4.gif" width="429" height="379"></p>
    <p align="center">Figure 20-4. Alias Groups (half fraction)</p>
    
      
      </font></i><font FACE="Arial" SIZE="2">
    <p ALIGN="left">This design is much better, but it requires us to do 16
    runs. It isolates all the main factors, does not confound them with 2-way
    interactions, and it even isolates the 2-way interactions of the first few
    main effects. We will generate this experiment, so click the OK button.</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; <u>The OK Button</p>
    
      
      </u></font><font FACE="Arial" SIZE="2">
    <p ALIGN="left">It’s time to generate the PLUS Statements and insert
    them at the bottom of our Model.</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; <u>The Insert Experiment Button</p>
    
      
      </u></font><font FACE="Arial" SIZE="2">
    <p ALIGN="left">Since we asked GPSS World to generate a Run Procedure,
    next we see a Dialog that allows us to personalize it.</p>
    
    
    </font><i><font SIZE="2">
    <p>&nbsp;</p>
    <p align="center"><img border="0" src="../images/T1_20_5.gif" width="368" height="257"></p>
    <p align="center">Figure 20-5. The Generated Run Procedure</p>
    
      
      </font></i><font FACE="Arial" SIZE="2">
    <p ALIGN="left">You should make changes you need for your particular
    simulation, such as:</p>
    </font><font FACE="Symbol" SIZE="2">
    <p ALIGN="left">·</font><font FACE="Arial" SIZE="2">&nbsp;To specify a
    different nonmeasured warm-up period.</p>
    </font><font FACE="Symbol" SIZE="2">
    <p ALIGN="left">·</font><font FACE="Arial" SIZE="2">&nbsp;To Specify the
    length of the measurement period.</p>
    </font><font FACE="Symbol" SIZE="2">
    <p ALIGN="left">·</font><font FACE="Arial" SIZE="2">&nbsp;Conceivably
    you may want to change the manner in which the treatment levels are assigned
    to User Variables or the way the random number generators are seeded.</p>
    <p ALIGN="left">In any case, you may want to edit the generated
    experiment itself in your Model Window. You can change the Run Procedure
    there, as well. Just click OK and all the new GPSS World Statements are
    placed at the bottom of your Model.</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CLICK ON&nbsp;&nbsp;&nbsp; <u>The OK Button</p>
    
      
      </u></font><font FACE="Arial" SIZE="2">
    <p ALIGN="left">A sample of the generated code follows in the next two
    sections.</p>
    <p>&nbsp;</p>
    </font><b><font FACE="Arial" SIZE="4">
    <p>The Generated Experiment</p>
    </font></b>
</font>
    <p><font face="Courier New" size="2">*******************************************************<br>
    *&nbsp;<br>
    * ScreenEthernet&nbsp;<br>
    * Fractional Factorial Screening Experiment&nbsp;<br>
    *&nbsp;<br>
    *******************************************************<br>
    ScreenEthernet_Results MATRIX ,2,2,2,2,2<br>
    INITIAL ScreenEthernet_Results,UNSPECIFIED<br>
    ScreenEthernet_NextRunNumber EQU 0<br>
    <br>
    EXPERIMENT ScreenEthernet() BEGIN<br>
    &nbsp;&nbsp;&nbsp; /* Run 1 */<br>
    &nbsp;&nbsp;&nbsp; Node_Count = 100;<br>
    &nbsp;&nbsp;&nbsp; Min_Msg = 256;<br>
    &nbsp;&nbsp;&nbsp; Max_Msg = 6072;<br>
    &nbsp;&nbsp;&nbsp; Fraction_Short_Msgs = 600;<br>
    &nbsp;&nbsp;&nbsp; Intermessage_Time = 1.0;<br>
    <br>
    &nbsp;&nbsp;&nbsp; IF (StringCompare( DataType(
    ScreenEthernet_Results[1,1,1,1,1]),<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    &quot;UNSPECIFIED&quot;)’E’0)<br>
    &nbsp;&nbsp;&nbsp; THEN BEGIN<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Set the Run Number Variable at the beginning. */<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ScreenEthernet_NextRunNumber = 1;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Log the Run and Execute the Simulation */<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ScreenEthernet_GetResult();<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ScreenEthernet_Results[1,1,1,1,1] = (QT$Global_Delays/1000);<br>
    &nbsp;&nbsp;&nbsp; END;<br>
    <br>
    &nbsp;&nbsp;&nbsp; /* Runs 2-15 are omitted for brevity. */<br>
    <br>
    &nbsp;&nbsp;&nbsp; /* Run 16 */<br>
    &nbsp;&nbsp;&nbsp; Node_Count = 300;<br>
    &nbsp;&nbsp;&nbsp; Min_Msg = 512;<br>
    &nbsp;&nbsp;&nbsp; Max_Msg = 24288;<br>
    &nbsp;&nbsp;&nbsp; Fraction_Short_Msgs = 300;<br>
    &nbsp;&nbsp;&nbsp; Intermessage_Time = 1.0;<br>
    &nbsp;&nbsp;&nbsp; IF (StringCompare( DataType(
    ScreenEthernet_Results[2,2,2,2,1]),<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    &quot;UNSPECIFIED&quot;)’E’0)<br>
    &nbsp;&nbsp;&nbsp; THEN BEGIN<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Log the Run and Execute the Simulation */<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ScreenEthernet_GetResult();<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ScreenEthernet_Results[2,2,2,2,1] = (QT$Global_Delays/1000);<br>
    &nbsp;&nbsp;&nbsp; END;<br>
    <br>
    &nbsp;&nbsp;&nbsp; /* Aliased Effects in Fractional Factorial Experiment */<br>
    &nbsp;&nbsp;&nbsp; SE_Effects(ScreenEthernet_Results,&quot;I=ABCDE&quot;);<br>
    <br>
    END;<br>
    </font></p>
<font FACE="Arial" SIZE="2">
        <b>
    <p><br>
        </b>
</font>
        <font face="Courier New" size="2">*******************************************************<br>
        * The Run Execution Procedure&nbsp;<br>
        *******************************************************<br>
        PROCEDURE ScreenEthernet_GetResult() BEGIN<br>
        &nbsp;&nbsp;&nbsp; /* Run Simulation and Log Results. */<br>
        &nbsp;&nbsp;&nbsp; /* Treatments have already been set for this run. */<br>
        &nbsp;&nbsp;&nbsp; TEMPORARY CurrentYield,ShowString,CommandString;<br>
        <br>
        &nbsp;&nbsp;&nbsp; /* Run Procedure Call */<br>
        &nbsp;&nbsp;&nbsp; DoTheRun(ScreenEthernet_NextRunNumber);<br>
        &nbsp;&nbsp;&nbsp; CurrentYield = (QT$Global_Delays/1000);<br>
        &nbsp;&nbsp;&nbsp; ShowString = PolyCatenate(&quot;Run
    &quot;,<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        String( ScreenEthernet_NextRunNumber )<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        ,&quot;. &quot;,&quot;&quot; );<br>
        &nbsp;&nbsp;&nbsp; ShowString = PolyCatenate(ShowString,<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        &quot;
    Yield=&quot;,String(CurrentYield),&quot;. &quot;);<br>
        &nbsp;&nbsp;&nbsp; ShowString = PolyCatenate(ShowString,<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        &quot;
    Node_Count=&quot;,String(Node_Count), &quot;;&quot;);<br>
        &nbsp;&nbsp;&nbsp; ShowString = PolyCatenate(ShowString,<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        &quot;
    Min_Msg=&quot;,String(Min_Msg), &quot;;&quot; );<br>
        &nbsp;&nbsp;&nbsp; ShowString = PolyCatenate(ShowString,<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        &quot;
    Max_Msg=&quot;,String(Max_Msg), &quot;;&quot; );<br>
        &nbsp;&nbsp;&nbsp; ShowString = PolyCatenate(ShowString,<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        &quot; Fraction_Short_Msgs=&quot;,<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        String(Fraction_Short_Msgs), &quot;;&quot;);<br>
        &nbsp;&nbsp;&nbsp; ShowString = PolyCatenate(ShowString,&quot;<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        Intermessage_Time=&quot;,<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        String(Intermessage_Time), &quot;;&quot; );<br>
        &nbsp;&nbsp;&nbsp; CommandString = PolyCatenate(&quot;SHOW
    &quot;&quot;&quot;,ShowString,&quot;&quot;&quot;&quot;, &quot;&quot; );<br>
        <br>
        &nbsp;&nbsp;&nbsp; DoCommand(CommandString);<br>
        <br>
        &nbsp;&nbsp;&nbsp; ScreenEthernet_NextRunNumber = ScreenEthernet_NextRunNumber + 1;<br>
        &nbsp;&nbsp;&nbsp; RETURN CurrentYield;<br>
        <br>
        END;<br>
        <br>
        *******************************************************<br>
        * Run Procedure&nbsp;<br>
        *******************************************************<br>
        PROCEDURE DoTheRun(Run_Number) BEGIN<br>
        <br>
        &nbsp;&nbsp;&nbsp; DoCommand(&quot;CLEAR OFF&quot;); /* Must use OFF to preserve results. */<br>
        <br>
        &nbsp;&nbsp;&nbsp; /* EXPAND THIS RMULT IF YOU HAVE MORE RNGs. */<br>
        &nbsp;&nbsp;&nbsp; /* All Random Number Streams must have new seeds. */<br>
        <br>
        &nbsp;&nbsp;&nbsp; TEMPORARY CommandString;<br>
        &nbsp;&nbsp;&nbsp; /* Evaluate before passing to DoCommand. */<br>
        &nbsp;&nbsp;&nbsp; CommandString = Catenate(&quot;RMULT &quot;,Run_Number#111);<br>
        &nbsp;&nbsp;&nbsp; /* DoCommand compiles the string in Global Context. */<br>
        &nbsp;&nbsp;&nbsp; DoCommand(CommandString);<br>
        <br>
        &nbsp;&nbsp;&nbsp; /* SET UP YOUR OWN RUN CONDITIONS. */<br>
        &nbsp;&nbsp;&nbsp; DoCommand(&quot;START 10,NP&quot;); /* Get past the Startup Period. */<br>
        &nbsp;&nbsp;&nbsp; DoCommand(&quot;RESET&quot;); /* Begin the Measurement Period. */<br>
        &nbsp;&nbsp;&nbsp; DoCommand(&quot;START 60,NP&quot;); /* Run the Simulation. */<br>
        <br>
        END;<br>
        *******************************************************<br>
        </font></p>
<font FACE="Arial" SIZE="2">
        <b><font FACE="Arial" SIZE="4">
    <p>Running the Experiment</p>
    </font></b><font FACE="Arial" SIZE="2">
    <p ALIGN="left">Now we have the big moment! It’s time to CONDUCT the
    experiment. CONDUCT is the GPSS World Command that is used to invoke an
    Experiment. The syntax is similar to that of a Procedure Call. But we have a
    better way. In the Experiment Generation dialog, we chose to have GPSS World
    load the F12 function key with the appropriate CONDUCT Command. (see Edit /
    Settings / Function Keys).</p>
    <p ALIGN="left">To start the execution of the experiment, we must do two
    things. First we must Translate the Model, thereby creating the Simulation
    Object.</p>
    
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CHOOSE&nbsp;&nbsp;&nbsp;&nbsp; </font><b>Command / Create Simulation</p>
    
      
      </b><font FACE="Arial" SIZE="2">
      <p ALIGN="left">Then we issue the CONDUCT Command.</p>
      
    
    </font><font FACE="Helvetica" SIZE="2">
    <p align="center">CLICK ON&nbsp;&nbsp;&nbsp;&nbsp; <u>The </font>
</font>
    <font face="Helvetica" size="2"><b>[F11]</b> Function Key</p>
    
      
</font>
    
      
      </u><font FACE="Arial" SIZE="2"><font FACE="Arial" SIZE="2">
    <p ALIGN="left">The Experiment goes to work, reporting ongoing status and
    writing output to the Journal Window of the newly created Simulation Object.
    Our Screening Experiment will consist of 16 runs. Each yield will be
    reported in the Journal Window, and then the final results will be
    tabulated. It will include the effects of each alias group.</p>
    <p ALIGN="left">The Experiment will take some time on a fast personal
    computer. While it’s running, you’re free to take a break or do other
    things. This is one of the advantages of programmable PLUS Experiments. If
    you’re Model is debugged, the Experiment will run unattended.</p>
    <p ALIGN="left">The final results are shown in Figure 20-6.</p>
    
    
    </font><i><font SIZE="2">
    <p>&nbsp;</p>
    <p align="center"><img border="0" src="../images/T1_20_6.gif" width="496" height="370"></p>
    <p align="center">Figure 20-6. The Final Results of Screening Experiment</p>
    </font></i>
    <p ALIGN="JUSTIFY">&nbsp;</p>
    
      
        <p ALIGN="left">The results show that the C and E factors had
        significant effects and are certainly worthy of additional study. Both
        were aliased with only 4 way interactions, and are most likely the
        source of the effects measured. None of the other factors including 2
        and 3 way interactions were found to be significant.</p>
        <p ALIGN="left">It should be apparent now what we have gained by
        using only a fractional factorial experiment. At one half the cost of a
        full factorial experiment we are able to screen out a large set of
        factors and interactions. We are now ready to design one or more User
        Experiments, and finally, an Optimizing Experiment using GPSS World’s
        other Automatic Experiment Generator. Both Experiment Generators are
        more fully described in Chapter 13 of the <i>GPSS World Reference Manual</i>.</p>
        <p ALIGN="left">&nbsp;</p>
        <p ALIGN="left">Well, that’s all for this series of tutorial
        lessons. Go ahead and end the Session. We hope we have been able to give
        you a few glimpses of the true simulation power available to you through
        GPSS World. Much remains to be explored, however, and we suggest that
        you continue your studies by reading, understanding and running the
        examples in Chapter 2 of this manual. Also, check out the operating tips
        at the end of Chapter 13 of the GPSS World Reference Manual. They may
        save you some time and effort.</p>
      
    
</font>
<font FACE="Arial" SIZE="2">
  

    <p ALIGN="JUSTIFY">&nbsp;</p>
    <p ALIGN="center"><a href="tutorial_manual.htm">[Table of Contents]</a></p>
  

</font>




</blockquote>
</blockquote>
